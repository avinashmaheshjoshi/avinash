postForm("http://dev.ird.mu-sigma.com/muespservice/api/agency/get/agency/all")
require("RCurl")
require("rjson")
require("httr")
postForm("http://dev.ird.mu-sigma.com/muespservice/api/agency/get/agency/all")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/agency/all")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all")
postForm("http://dev.ird.mu-sigma.com/muespservice/api/agency/get/all")
?postForm
postForm("http://dev.ird.mu-sigma.com/muespservice/api/agency/get/all",
"ecosystem=MINT")
postForm("http://dev.ird.mu-sigma.com/muespservice/api/agency/get/all",
"ecosystem"="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all",
"ecosystem"="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all",
"id"="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all",
"ecosystem"="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all",
"ecosystem"="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all",
ecosystem="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all",
id="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all",
ID="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/get/all",
ID="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agent/get/all",
ID="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agent/get/all")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/where",
id="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/where",
"id"="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/where",
"ecosystem"="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/where",
ecosystem="MINT")
require("RCurl")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/where",ecosystem="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/where",a="MINT")
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/where",
.opts = list(postfields = toJSON(list(id = "MINT")),
httpheader = c('Content-Type' = 'text/plain', ssl.verifypeer = FALSE)))
postForm("http://qa.ird.mu-sigma.com/muespservice/api/agency/where",
.opts = list(postfields = toJSON(list("id" = "MINT")),
httpheader = c('Content-Type' = 'text/plain', ssl.verifypeer = FALSE)))
postForm("http://test.reco4j.org:7474/db/data/ext/Reco4jRecommender/node/248/get_recommendations",
.opts = list(postfields = toJSON(list(type = "0")),
httpheader = c('Content-Type' = 'application/json', ssl.verifypeer = FALSE)
))
require("Rjms")
require("Rjms")
require("futile.logger")
require("futile.logger")
require("Rjms")
consumer <- initialize.consumer(conIP,amqtype,topicName)
conIP = "tcp://172.25.1.27:61616"
topicName = "testLat"
amqtype = "Q"
consumer <- initialize.consumer(conIP,amqtype,topicName)
source('~/testLatSenderQ.R')
source('~/testLatSenderQ.R')
source('~/testLatSenderQ.R')
sendTimeStamp()
source('~/testLatReceiveQ.R')
source('~/testLatReceiveQ.R')
flog.appender(appender.file(paste(mripPath,"/MINTlogs/testLatReceiver.log",sep="")))
flog.info("Acl communication latency test started")
mripPath = Sys.getenv("MRIP_HOME")
paste(mripPath,"/MINTlogs/testLatReceiver.log",sep="")
source('~/testLatReceiveQ.R')
mripPath
paste(mripPath,"/MINTlogs/testLatReceiver.log",sep="")
source('~/testLatSenderQ.R')
sendTimeStamp()
source('~/testLatSenderQ.R')
sendTimeStamp()
source('~/testLatReceiveQ.R')
recTimeStamp()
source('~/testLatSenderQ.R')
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
input <- consume(consumer,asString=T,timeOut=0.1)
input
source('~/testLatSenderQ.R')
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
source('~/testLatSenderQ.R')
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
#Get Env Variable
mripPath = Sys.getenv("MRIP_HOME")
require("Rjms")
conIP = "tcp://172.25.1.27:61616"
topicName = "testLat"
amqtype = "Q"
logger <- initialize.logger(conIP,amqtype,topicName)
nMsg <- 0
sendTimeStamp <- function(){
nMsg <<- nMsg + 1
ret <- paste(Sys.time(),nMsg,sep=",")
print(ret)
to.logger(logger,ret,asString=T)
return("ignore")
}
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
sendTimeStamp()
input <- consume(consumer,asString=T,timeOut=0.1)
input
i <- i+1
delay <- as.numeric(Sys.time()) - as.numeric(input)
delay
as.numeric(Sys.time())
as.numeric(input)
source('~/testLatReceiveQ.R')
source('~/testLatReceiveQ.R')
recTimeStamp()
recTimeStamp <- function(){
input <- consume(consumer,asString=T,timeOut=0.1)
flog.info("Got input %s", input)
if(is.null(input)) return("ignore")
msg <- strsplit(input,",")
timeStamp <- msg[[1]][1]
nMsg <- msg[[1]][2]
i <- i+1
print(timeStamp)
delay <- as.numeric(Sys.time()) - as.numeric(timeStamp)
print(delay)
mat[1,] <- c(i,delay)
#write.csv(mat,file=paste(mripPath,"/wd/testLatReceive.csv",sep=""),append=TRUE)
write.csv.ffdf(as.ffdf(as.ff(mat)),file=paste(mripPath,"/wd/testLatReceiveACLQ.csv",sep=""),append=TRUE)
flog.info("%s",paste(delay,collapse=","))
return("ignore")
}
recTimeStamp()
recTimeStamp <- function(){
input <- consume(consumer,asString=T,timeOut=0.1)
flog.info("Got input %s", input)
if(is.null(input)) return("ignore")
msg <- strsplit(input,",")
timeStamp <- msg[[1]][1]
nMsg <- msg[[1]][2]
i <- i+1
print(as.numeric(timeStamp))
delay <- as.numeric(Sys.time()) - as.numeric(timeStamp)
print(delay)
mat[1,] <- c(i,delay)
#write.csv(mat,file=paste(mripPath,"/wd/testLatReceive.csv",sep=""),append=TRUE)
write.csv.ffdf(as.ffdf(as.ff(mat)),file=paste(mripPath,"/wd/testLatReceiveACLQ.csv",sep=""),append=TRUE)
flog.info("%s",paste(delay,collapse=","))
return("ignore")
}
recTimeStamp()
recTimeStamp <- function(){
input <- consume(consumer,asString=T,timeOut=0.1)
flog.info("Got input %s", input)
if(is.null(input)) return("ignore")
msg <- strsplit(input,",")
timeStamp <- msg[[1]][1]
nMsg <- msg[[1]][2]
i <- i+1
print(as.numeric(timeStamp))
delay <- difftime(Sys.time(),timeStamp)
delay <- as.numeric(Sys.time()) - as.numeric(timeStamp)
print(delay)
mat[1,] <- c(i,delay)
#write.csv(mat,file=paste(mripPath,"/wd/testLatReceive.csv",sep=""),append=TRUE)
write.csv.ffdf(as.ffdf(as.ff(mat)),file=paste(mripPath,"/wd/testLatReceiveACLQ.csv",sep=""),append=TRUE)
flog.info("%s",paste(delay,collapse=","))
return("ignore")
}
recTimeStamp()
input <- consume(consumer,asString=T,timeOut=0.1)
flog.info("Got input %s", input)
if(is.null(input)) return("ignore")
msg <- strsplit(input,",")
timeStamp <- msg[[1]][1]
msg
timeStamp
msg
nMsg
nMsg <- msg[[1]][2]
i <- i+1
print(as.numeric(timeStamp))
difftime(Sys.time(),timeStamp)
delay <- difftime(Sys.time(),timeStamp)
delay
as.numeric(delay)
delay <- difftime(Sys.time(),timeStamp)
recTimeStamp <- function(){
input <- consume(consumer,asString=T,timeOut=0.1)
flog.info("Got input %s", input)
if(is.null(input)) return("ignore")
msg <- strsplit(input,",")
timeStamp <- msg[[1]][1]
nMsg <- msg[[1]][2]
i <- i+1
delay <- difftime(Sys.time(),timeStamp)
print(delay)
mat[1,] <- c(i,delay)
#write.csv(mat,file=paste(mripPath,"/wd/testLatReceive.csv",sep=""),append=TRUE)
write.csv.ffdf(as.ffdf(as.ff(mat)),file=paste(mripPath,"/wd/testLatReceiveACLQ.csv",sep=""),append=TRUE)
flog.info("%s",paste(delay,collapse=","))
return("ignore")
}
recTimeStamp()
source('~/testLatSender.R')
tmp <- sendTimeStamp()
source('~/testLatReceive.R')
recTimeStamp(tmp)
destroy.consumer(consumer)
recTimeStamp(sendTimeStamp())
library("ggplot2")
library("ggplot2")
getwd()
setwd("~/GitHub//avinash//ACLvsActiveMQ")
aclTable <- read.csv("testLatReceiveACL.csv")
qTable <- read.csv("testLatReceiveQ.csv")
aclTable
dim(aclTable)
tmp <- Sys.time()
as.numeric(difftime(Sys.time,tmp))
tmp <- as.character(Sys.time()
as.numeric(difftime(Sys.time,tmp))
tmp <- as.character(Sys.time())
as.numeric(difftime(Sys.time,tmp))
tmp
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
tmp <- as.character(Sys.time())
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
as.numeric(difftime(Sys.time(),tmp))
while(T) print(as.numeric(difftime(Sys.time(),tmp)))
