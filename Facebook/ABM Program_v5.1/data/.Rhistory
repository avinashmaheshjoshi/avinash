View(data)
data
library("cluster")
install.packages("cluster")
sum(CTR)
CpcBounty
CpcBounty.Sum()
data.CpcBounty
data.CpcBounty.Sum()
data
library("sem")
install.packages("sem")
install.packages("ellipse")
library("ellipse")
??ellipse
?ellipse
plot(ellipse(0.8), type = '1')
?ellipse
?ellipse
runif(1:10)
runif(1:100)
v <- function(a,b) {return (a+b)}
v(2,3)
data.frame(CTR = 0.1)
data
?frame
?data
data()
library("cluster")
animals
flower
flower.v1()
x = runif(1:100)
x
hist(x)
ruspini
chorSub
pluton
install.packages("compiler")
install.packages("plyr")
??plyr
##-----------------------------------------------------------------
## Project              : Incremental Revenue Impact Measurement
## Analytic Technique   : Agent Based Simulation
## Client               : Facebook
## Start Date           : April 2nd
## File Type            : Function Library
## Version              : 5.1
##-----------------------------------------------------------------
##-----------------------------------------------------------------
## Clear Memory and Load required libraries
##-----------------------------------------------------------------
library(sqldf)
##-----------------------------------------------------------------
## Set working directory
##-----------------------------------------------------------------
WorkingDir <- function(path)  {
setwd(path)
}
##--------------------------------------------------------------------------------------
#Function to modify the bid to CPM for participating in auction
##---------------------------------------------------------------------------------------
BidModify <- function(y){
if(y[1] == 1){
z <- 10* y[2] * y[3] * y[5]
}
else{
z <- y[4] * y[5]
}
return(z)
}
##-----------------------------------------------------------------
## Function to execute an auction and load the agents
##-----------------------------------------------------------------
LoadAgents <- function(AuctionSets, AgentProfile, Period)  {
dateCol <<- which(colnames(AuctionSets) == Period) # Date needs to be given "d0102" is read as 1st Feb.
Auction <<- sample(AuctionSets$TargetingID, prob = AuctionSets[,dateCol], 1)
ASAgents <<- subset(AgentProfile, TargetingID == Auction | TargetingID == 0)
##------------------------------------------Types of Agents----------------------------------------------------------------
#
#   Marketplace CPC
#   Marketplace CPM
#   Premium CPC
#   Premium CPM
#   Premium MOO
#   NetEGO CPM
#   SponsoredStories CPM
#
##-------------------------------------------------------------------------------------------------------------------------
ASAgents <<- ddply(ASAgents,.(if_CPC,Bid_CPC,Bid_CPM,AdCTR,PacingParameter),transform, AuctionBid = BidModify(c(if_CPC,Bid_CPC,AdCTR,Bid_CPM,PacingParameter)))
s_ASAgents <- ASAgents[with(ASAgents, order(-AuctionBid)), ]
s_ASAgents <- data.frame(AgentID = s_ASAgents$AgentID, AgentType = s_ASAgents$BidderType, AuctionBid = s_ASAgents$AuctionBid)
return(s_ASAgents)
}
##-----------------------------------------------------------------
## Function to execute the VCG if Agents are more than slots
##-----------------------------------------------------------------
AgentCountMoreThanSlots <- function(s_ASAgents, slotvalue) {
mat <- matrix(data = 0, nrow = slots + 1, ncol = slots)
##  attach(s_ASAgents)
for (i in 1:slots+1) {
for (j in 1:slots) {
if (i <= j) {
mat[i, j] <- 0
}
else if (i > slots) {
mat[i, j] <- as.numeric(s_ASAgents$AuctionBid[i]) * (slotvalue[i-1])
}
else if (i != 1) {
mat[i, j] <- as.numeric(s_ASAgents$AuctionBid[i]) * (slotvalue[i-1] - slotvalue[i])
}
}
}
unitVector <- matrix(data =1, nrow=1, ncol=slots+1)
ValueLost <- t(unitVector%*%mat)
ValueLost <- ValueLost/1000
temp  <-
Imps <- c(1,1,1,1,1,1,1)
AgentPayout <- data.frame( AgentId = s_ASAgents[1:7,1], ValueLost, Imps)
##-----------------------------------------------------------------
## Z list returs
## 1) Agents Participated
## 2) VCG displacement matric
## 3) Payout for each slot 4) Agent level payout
##-----------------------------------------------------------------
z <- list(agent_id = s_ASAgents, disp_matrix = mat, payout = ValueLost, AgentP = AgentPayout)
return (z)
}
##---------------------------------------------------------------------
## The Function executes the following tasks (Layer 1 Implementation)
## 1) Generate a Auction
## 2) Identify agents to participate in a auction Set
## 3) Execute VCG auction
## 4) Update result tables - Rev per iteration, Agent level revenue,
##    Utility and Overall Revenue
##---------------------------------------------------------------------
runSimulation <- function(newpath, slotvalue, agentFile, auctionFile, YearlyPV,  UpdateFreq, BidUpdate, Indate)  {
##-----------------------------------------------------------------
## Read AuctionSets and Agents profile
##-----------------------------------------------------------------
WorkingDir(newpath)
AuctionSets <<- read.csv(file = auctionFile , header = TRUE)
AgentProfile <<- read.csv(file = agentFile , header = TRUE)
YearlyPageViews <<- read.csv(file = YearlyPV, header = TRUE)
slots <<- length(slotvalue)
nSims <<- YearlyPageViews$ScaledPV[which(YearlyPageViews$DateCode == rundate)]
##------------------------------------------------------------------
## Initialize the graph windows
##------------------------------------------------------------------
windows(width = 7, height = 3, xpos = -5, ypos = 5)
##----------------------------------------------------------------------
## Initializing Frame to collect revenue per iteration later in the loop
##----------------------------------------------------------------------
Tick_No <- NULL
Auction_Revenue <-  NULL
Overall_R <- NULL
AuctionR <<- data.frame(Tick = Tick_No, Revenue = Auction_Revenue, CumulativeRevenue = Overall_R)
##-----------------------------------------------------------------
## Start of the loop
##-----------------------------------------------------------------
Overall_R <- 0
for(i in 1:nSims) {
##-----------------------------------------------------------------
## Sampling a auction and loading participating agents
##-----------------------------------------------------------------
s_ASAgents <<- LoadAgents(AuctionSets, AgentProfile, Indate)
##-----------------------------------------------------------------
## Examining all legal configurations, validating them, and executing the maximum value auction
##-----------------------------------------------------------------
pay.out <- AgentCountMoreThanSlots(s_ASAgents, slotvalue)
##-----------------------------------------------------------------
## Initializing and updating the data frame for storing the
## revenue per iteration
##-----------------------------------------------------------------
Tick_No <- i
Auction_Revenue <-  sum(pay.out$payout)
Overall_R <- Overall_R + Auction_Revenue
tmp_row <- data.frame(Tick = Tick_No, Revenue = Auction_Revenue, CumulativeRevenue = Overall_R)
AuctionR <<- rbind(AuctionR, tmp_row)
##-----------------------------------------------------------------
## Update graph with Auction Revenue
##-----------------------------------------------------------------
dev.set(2)
if (i <= 100) {
plot(x = AuctionR$Tick, y = AuctionR$Revenue, col = "red", type = "l", lwd = 1, xlab = "Tick", ylab = "Revenue/Auction")
} else {
st <- i - 100
plot(x = AuctionR$Tick[st:i], y = AuctionR$Revenue[st:i], col = "red", type = "l", lwd = 1,  xlab = "Tick", ylab = "Revenue/Auction")
}
##-----------------------------------------------------------------
## Update the Overall revenue (Cumulative of revenue per iteration)
##-----------------------------------------------------------------
Impressions <- i * 7
eCPM <- Overall_R *1000/ Impressions
Overall <<- data.frame(Overall_R, Impressions, eCPM)
##-----------------------------------------------------------------
## Update the Agent level revenue
## Initialize the data frame if i = 1, else append the dataframe
## with Agent level revenues
##-----------------------------------------------------------------
if (i == 1) {
AgentsR <<- data.frame(pay.out$AgentP)
#
} else {
#
AgentsR <<- rbind(AgentsR, pay.out$AgentP)
##-----------------------------------------------------------------
## Roll up the revenue and impressions at an agent level
##-----------------------------------------------------------------
if((i %% UpdateFreq) == 0) {
# AgentsR <-  aggregate(ValueLost~AgentId, sum, data = AgentsR)
AgentsR <<- sqldf("select AgentId, sum(ValueLost) as ValueLost, sum(Imps) as Imps from AgentsR group by AgentId")
}
}
##-----------------------------------------------------------------
## Response Model -
## Update Utility in agent profile based on utility  and roll up
## agent revenue
##-----------------------------------------------------------------
if((i %% BidUpdate) == 0)    {
AgentsR <<- sqldf("select AgentId, sum(ValueLost) as ValueLost, sum(Imps) as Imps from AgentsR group by AgentId")
AgentProfile <<- sqldf("select AgentProfile.AgentID, AgentProfile.TargetingID, AgentProfile.Alpha,
AgentProfile.Beta, AgentProfile.Bid, AgentProfile.Utility, AgentProfile.Budget,
AgentProfile.if_CPM, AgentProfile.if_CPC, AgentProfile.Imps_Goal,
AgentProfile.Click_Goal, AgentProfile.Camp_len, coalesce(AgentsR.ValueLost,0) as Spend,
coalesce(AgentsR.Imps,0) as Delv_Imps from AgentProfile left join AgentsR on AgentProfile.AgentID = AgentsR.AgentId")
AgentProfile$Utility <<- (AgentProfile$Imps_Goal - AgentProfile$Delv_Imps)/100
#   AgentProfile$AuctionBid <<- AgentProfile$AuctionBid + AgentProfile$Utility
}
}
##-----------------------------------------------------------------
## Agent Revenue
##-----------------------------------------------------------------
z <- list(Revenue_Per_Iteration = AuctionR, Overall_Revenue = Overall_R, agentlevel = AgentsR , Overall)
return(z)
}
##-----------------------------------------------------------------
## Project              : Incremental Revenue Impact Measurement
## Analytic Technique   : Agent Based Simulation
## Client               : Facebook
## Start Date           : April 2nd
## File Type            : Executable Script
## Version              : 5.1
##-----------------------------------------------------------------
##-----------------------------------------------------------------
## Clear workspace and memory
##-----------------------------------------------------------------
rm(list = ls())
gc()
library(compiler)
cmpfile(infile= "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.r")
##-----------------------------------------------------------------
## Close existing graph windows
##-----------------------------------------------------------------
dev.off()
#dev.off()
##-----------------------------------------------------------------
## Load Source
##-----------------------------------------------------------------
loadcmp("C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.Rc")
##-----------------------------------------------------------------
## Set Parameters
##-----------------------------------------------------------------
path <<- "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\data\\"
slotval <<- c(1,0.8, 0.7, 0.6, 0.5, 0.4, 0.3)
AgFile <<- "AgentProfile.csv"
AucFile <<-  "AuctionSets.csv"
YearlyPageViewFile <<- "YearlyPageViews.csv"
rundate <<- "d0102"
UpdateFrequency <<- 4000
BidUpdateFreq <<- 5000
##-----------------------------------------------------------------
## Execute Main simulation function
##-----------------------------------------------------------------
simr <- runSimulation(newpath = path, slotvalue = slotval, agentFile = AgFile, auctionFile = AucFile, YearlyPV = YearlyPageViewFile, UpdateFreq = UpdateFrequency, BidUpdate = BidUpdateFreq, Indate = rundate)
simr
install.packages("plyr")
library(plyr)
##-----------------------------------------------------------------
## Project              : Incremental Revenue Impact Measurement
## Analytic Technique   : Agent Based Simulation
## Client               : Facebook
## Start Date           : April 2nd
## File Type            : Executable Script
## Version              : 5.1
##-----------------------------------------------------------------
##-----------------------------------------------------------------
## Clear workspace and memory
##-----------------------------------------------------------------
rm(list = ls())
gc()
library(compiler)
cmpfile(infile= "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.r")
##-----------------------------------------------------------------
## Close existing graph windows
##-----------------------------------------------------------------
dev.off()
#dev.off()
##-----------------------------------------------------------------
## Load Source
##-----------------------------------------------------------------
loadcmp("C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.Rc")
##-----------------------------------------------------------------
## Set Parameters
##-----------------------------------------------------------------
path <<- "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\data\\"
slotval <<- c(1,0.8, 0.7, 0.6, 0.5, 0.4, 0.3)
AgFile <<- "AgentProfile.csv"
AucFile <<-  "AuctionSets.csv"
YearlyPageViewFile <<- "YearlyPageViews.csv"
rundate <<- "d0102"
UpdateFrequency <<- 4000
BidUpdateFreq <<- 5000
##-----------------------------------------------------------------
## Execute Main simulation function
##-----------------------------------------------------------------
simr <- runSimulation(newpath = path, slotvalue = slotval, agentFile = AgFile, auctionFile = AucFile, YearlyPV = YearlyPageViewFile, UpdateFreq = UpdateFrequency, BidUpdate = BidUpdateFreq, Indate = rundate)
simr
View(s_ASAgents)
View(s_ASAgents)
View(AgentProfile)
View(AgentProfile)
##-----------------------------------------------------------------
## Project              : Incremental Revenue Impact Measurement
## Analytic Technique   : Agent Based Simulation
## Client               : Facebook
## Start Date           : April 2nd
## File Type            : Executable Script
## Version              : 5.1
##-----------------------------------------------------------------
##-----------------------------------------------------------------
## Clear workspace and memory
##-----------------------------------------------------------------
rm(list = ls())
gc()
library(compiler)
cmpfile(infile= "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.r")
##-----------------------------------------------------------------
## Close existing graph windows
##-----------------------------------------------------------------
dev.off()
#dev.off()
##-----------------------------------------------------------------
## Load Source
##-----------------------------------------------------------------
loadcmp("C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.Rc")
##-----------------------------------------------------------------
## Set Parameters
##-----------------------------------------------------------------
path <<- "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\data\\"
slotval <<- c(1,0.8, 0.7, 0.6, 0.5, 0.4, 0.3)
AgFile <<- "AgentProfile.csv"
AucFile <<-  "AuctionSets.csv"
YearlyPageViewFile <<- "YearlyPageViews.csv"
rundate <<- "d0102"
UpdateFrequency <<- 4000
BidUpdateFreq <<- 5000
##-----------------------------------------------------------------
## Execute Main simulation function
##-----------------------------------------------------------------
simr <- runSimulation(newpath = path, slotvalue = slotval, agentFile = AgFile, auctionFile = AucFile, YearlyPV = YearlyPageViewFile, UpdateFreq = UpdateFrequency, BidUpdate = BidUpdateFreq, Indate = rundate)
simr
View(s_ASAgents)
View(s_ASAgents)
##-----------------------------------------------------------------
## Project              : Incremental Revenue Impact Measurement
## Analytic Technique   : Agent Based Simulation
## Client               : Facebook
## Start Date           : April 2nd
## File Type            : Executable Script
## Version              : 5.1
##-----------------------------------------------------------------
##-----------------------------------------------------------------
## Clear workspace and memory
##-----------------------------------------------------------------
rm(list = ls())
gc()
library(compiler)
cmpfile(infile= "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.r")
##-----------------------------------------------------------------
## Close existing graph windows
##-----------------------------------------------------------------
dev.off()
#dev.off()
##-----------------------------------------------------------------
## Load Source
##-----------------------------------------------------------------
loadcmp("C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.Rc")
##-----------------------------------------------------------------
## Set Parameters
##-----------------------------------------------------------------
path <<- "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\data\\"
slotval <<- c(1,0.8, 0.7, 0.6, 0.5, 0.4, 0.3)
AgFile <<- "AgentProfile.csv"
AucFile <<-  "AuctionSets.csv"
YearlyPageViewFile <<- "YearlyPageViews.csv"
rundate <<- "d0102"
UpdateFrequency <<- 4000
BidUpdateFreq <<- 5000
##-----------------------------------------------------------------
## Execute Main simulation function
##-----------------------------------------------------------------
simr <- runSimulation(newpath = path, slotvalue = slotval, agentFile = AgFile, auctionFile = AucFile, YearlyPV = YearlyPageViewFile, UpdateFreq = UpdateFrequency, BidUpdate = BidUpdateFreq, Indate = rundate)
simr
##-----------------------------------------------------------------
## Project              : Incremental Revenue Impact Measurement
## Analytic Technique   : Agent Based Simulation
## Client               : Facebook
## Start Date           : April 2nd
## File Type            : Executable Script
## Version              : 5.1
##-----------------------------------------------------------------
##-----------------------------------------------------------------
## Clear workspace and memory
##-----------------------------------------------------------------
rm(list = ls())
gc()
library(compiler)
cmpfile(infile= "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.r")
##-----------------------------------------------------------------
## Close existing graph windows
##-----------------------------------------------------------------
dev.off()
#dev.off()
##-----------------------------------------------------------------
## Load Source
##-----------------------------------------------------------------
loadcmp("C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\code\\abs_code.Rc")
##-----------------------------------------------------------------
## Set Parameters
##-----------------------------------------------------------------
path <<- "C:\\Users\\Gaurav.Saxena\\Desktop\\Facebook\\ABM Program_v5.1\\data\\"
slotval <<- c(1,0.8, 0.7, 0.6, 0.5, 0.4, 0.3)
AgFile <<- "AgentProfile.csv"
AucFile <<-  "AuctionSets.csv"
YearlyPageViewFile <<- "YearlyPageViews.csv"
rundate <<- "d0102"
UpdateFrequency <<- 4000
BidUpdateFreq <<- 5000
##-----------------------------------------------------------------
## Execute Main simulation function
##-----------------------------------------------------------------
simr <- runSimulation(newpath = path, slotvalue = slotval, agentFile = AgFile, auctionFile = AucFile, YearlyPV = YearlyPageViewFile, UpdateFreq = UpdateFrequency, BidUpdate = BidUpdateFreq, Indate = rundate)
simr
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
books <- data.frame(
name = I(c("Tukey", "Venables", "Tierney",
"Ripley", "Ripley", "McNeil", "R Core")),
title = c("Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis",
"An Introduction to R"),
other.author = c(NA, "Ripley", NA, NA, NA, NA,
"Venables & Smith"))
authors
authors <- data.frame(
surname = I(c("Tukey", "Venables", "Tierney", "Ripley", "McNeil")),
nationality = c("US", "Australia", "US", "UK", "Australia"),
deceased = c("yes", rep("no", 4)))
authors
books
(m1 <- merge(authors, books, by.x = "surname", by.y = "name"))
View(s_ASAgents)
View(s_ASAgents)
VCGPayout = c(sample(x=30,size=1, replace= TRUE)
VCGPayout = c(sample(x=30,size=1, replace= TRUE):10)
)
FuncOut <- head(s_ASAgents                )
FuncOut <- head(s_ASAgents)
FuncOut
FuncOut$Spend <- FuncOut$AuctionBid*15
FuncOut
View(AgentProfile)
Profile <- AgentProfile
m1 <- merge(Profile, FuncOut, by.x = "AgentID", by.y ="AgentID")
m1
View(`m1`)
View(`m1`)
m1 <- merge(Profile, FuncOut, by.x = "AgentID", by.y ="AgentID", all.x = TRUE)
View(`m1`)
View(`m1`)
FuncOutTest <- data.frame(AgentID = FuncOut$AgentID, Spend = FuncOut$Spend)
m1 <- merge(Profile, FuncOutTest, by.x = "AgentID", by.y ="AgentID", all.x = TRUE)
m1
View(`m1`)
View(`m1`)
m1 <- merge(Profile, FuncOutTest, by.x = "AgentID", by.y ="AgentID", all.x = TRUE, incomparables= 0)
View(`m1`)
View(`m1`)
m1 <- merge(Profile, FuncOutTest, by.x = "AgentID", by.y ="AgentID", all.x = TRUE, incomparables= "0")
View(`m1`)
View(`m1`)
m1 <- merge(Profile, FuncOutTest, by.x = "AgentID", by.y ="AgentID", all.x = TRUE, incomparables= FALSE)
View(`m1`)
View(`m1`)
m1 <- merge(Profile, FuncOutTest, by.x = "AgentID", by.y ="AgentID", all.x = TRUE)
if(is.NA(m1$Spend)) {m1$Spend = 0}
m1 <- merge(Profile, FuncOutTest, by.x = "AgentID", by.y ="AgentID", all.x = TRUE)
m1
View(`m1`)
View(`m1`)
m1$RemBudget <- m1$Budget - m1$Spend
View(`m1`)
View(`m1`)
View(s_ASAgents)
m1[is.na(m1)] <- 0
View(`m1`)
View(`m1`)
