
;; Function rfftf (rfftf_)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r78: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r78,l0) best DIREG, cover GENERAL_REGS
    r77: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a1 (r77,l0) best SIREG, cover GENERAL_REGS
    r76: preferred DREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r76,l0) best DREG, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred CREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a3 (r70,l0) best CREG, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r76,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:-1,-1 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a7(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a8(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a9(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a10(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a11(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a12(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a13(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a14(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a15(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a16(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a17(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a18(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a19(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 46(l0): point = 1
   Insn 41(l0): point = 3
   Insn 40(l0): point = 5
   Insn 39(l0): point = 7
   Insn 38(l0): point = 9
   Insn 37(l0): point = 11
   Insn 36(l0): point = 13
   Insn 35(l0): point = 15
   Insn 34(l0): point = 17
   Insn 33(l0): point = 19
   Insn 32(l0): point = 21
   Insn 31(l0): point = 23
   Insn 30(l0): point = 25
   Insn 29(l0): point = 27
   Insn 28(l0): point = 29
   Insn 27(l0): point = 31
   Insn 26(l0): point = 33
   Insn 25(l0): point = 35
   Insn 24(l0): point = 37
   Insn 23(l0): point = 39
   Insn 22(l0): point = 41
   Insn 21(l0): point = 43
   Insn 20(l0): point = 45
   Insn 19(l0): point = 47
   Insn 18(l0): point = 49
   Insn 17(l0): point = 51
   Insn 11(l0): point = 54
   Insn 10(l0): point = 56
   Insn 9(l0): point = 58
   Insn 8(l0): point = 60
   Insn 4(l0): point = 62
   Insn 3(l0): point = 64
   Insn 2(l0): point = 66
 a0(r78): [8..17]
 a1(r77): [10..19]
 a2(r76): [12..21]
 a3(r70): [14..23]
 a4(r65): [16..37]
 a5(r75): [24..25]
 a6(r69): [26..27]
 a7(r68): [28..29]
 a8(r67): [30..31]
 a9(r66): [32..33]
 a10(r74): [34..35]
 a11(r73): [38..39]
 a12(r64): [40..41]
 a13(r63): [42..43]
 a14(r62): [44..45]
 a15(r61): [46..47]
 a16(r60): [48..49]
 a17(r72): [50..51]
 a18(r59): [57..58]
 a19(r71): [59..60]
Compressing live ranges: from 69 to 32 - 46%
Ranges after the compression:
 a0(r78): [0..1]
 a1(r77): [0..1]
 a2(r76): [0..1]
 a3(r70): [0..1]
 a4(r65): [0..13]
 a5(r75): [2..3]
 a6(r69): [4..5]
 a7(r68): [6..7]
 a8(r67): [8..9]
 a9(r66): [10..11]
 a10(r74): [12..13]
 a11(r73): [14..15]
 a12(r64): [16..17]
 a13(r63): [18..19]
 a14(r62): [20..21]
 a15(r61): [22..23]
 a16(r60): [24..25]
 a17(r72): [26..27]
 a18(r59): [28..29]
 a19(r71): [30..31]
  regions=1, blocks=5, points=32
    allocnos=20 (big 0), copies=0, conflicts=0, ranges=20
Disposition:
   18:r59  l0     0   16:r60  l0     0   15:r61  l0     0   14:r62  l0     0
   13:r63  l0     0   12:r64  l0     0    4:r65  l0     5    9:r66  l0     0
    8:r67  l0     0    7:r68  l0     0    6:r69  l0     0    3:r70  l0     2
   19:r71  l0     0   17:r72  l0     0   11:r73  l0     0   10:r74  l0     0
    5:r75  l0     0    2:r76  l0     1    1:r77  l0     4    0:r78  l0     0
+++Costs: overall -4, reg -4, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 4, 7, dead_or_set: 5
insn=3, live_throughout: 1, 7, dead_or_set: 4
insn=4, live_throughout: 7, dead_or_set: 1
insn=8, live_throughout: 7, dead_or_set: 71
insn=9, live_throughout: 7, dead_or_set: 59, 71
insn=10, live_throughout: 7, dead_or_set: 59
insn=11, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 72
insn=18, live_throughout: 7, dead_or_set: 60, 72
insn=19, live_throughout: 7, dead_or_set: 60, 61
insn=20, live_throughout: 7, dead_or_set: 61, 62
insn=21, live_throughout: 7, dead_or_set: 62, 63
insn=22, live_throughout: 7, dead_or_set: 63, 64
insn=23, live_throughout: 7, dead_or_set: 64, 73
insn=24, live_throughout: 7, dead_or_set: 65, 73
insn=25, live_throughout: 7, 65, dead_or_set: 74
insn=26, live_throughout: 7, 65, dead_or_set: 66, 74
insn=27, live_throughout: 7, 65, dead_or_set: 66, 67
insn=28, live_throughout: 7, 65, dead_or_set: 67, 68
insn=29, live_throughout: 7, 65, dead_or_set: 68, 69
insn=30, live_throughout: 7, 65, dead_or_set: 69, 75
insn=31, live_throughout: 7, 65, dead_or_set: 70, 75
insn=32, live_throughout: 7, 65, 70, dead_or_set: 76
insn=33, live_throughout: 7, 65, 70, 76, dead_or_set: 77
insn=34, live_throughout: 7, 65, 70, 76, 77, dead_or_set: 78
insn=35, live_throughout: 7, 70, 76, 77, 78, dead_or_set: 37, 65
insn=36, live_throughout: 7, 37, 76, 77, 78, dead_or_set: 2, 70
insn=37, live_throughout: 2, 7, 37, 77, 78, dead_or_set: 1, 76
insn=38, live_throughout: 1, 2, 7, 37, 78, dead_or_set: 4, 77
insn=39, live_throughout: 1, 2, 4, 7, 37, dead_or_set: 5, 78
insn=40, live_throughout: 1, 2, 4, 5, 7, 37, dead_or_set: 0
insn=41, live_throughout: 7, dead_or_set: 0, 1, 2, 4, 5, 37
insn=46, live_throughout: 7, dead_or_set: 
insn=44, live_throughout: 7, dead_or_set: 
changing reg in insn 9
changing reg in insn 10
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 35
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 36
changing reg in insn 8
changing reg in insn 9
changing reg in insn 17
changing reg in insn 18
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 30
changing reg in insn 31
changing reg in insn 32
changing reg in insn 37
changing reg in insn 33
changing reg in insn 38
changing reg in insn 34
changing reg in insn 39
Spilling for insn 24.
Spilling for insn 31.

Reloads for insn # 24
Reload 0: reload_in (DI) = (reg:DI 0 ax [73])
	reload_out (DI) = (reg/f:DI 5 di [orig:65 D.1856 ] [65])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 0 ax [73])
	reload_out_reg: (reg/f:DI 5 di [orig:65 D.1856 ] [65])
	reload_reg_rtx: (reg/f:DI 5 di [orig:65 D.1856 ] [65])

Reloads for insn # 31
Reload 0: reload_in (DI) = (reg:DI 0 ax [75])
	reload_out (DI) = (reg/f:DI 2 cx [orig:70 D.1861 ] [70])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 0 ax [75])
	reload_out_reg: (reg/f:DI 2 cx [orig:70 D.1861 ] [70])
	reload_reg_rtx: (reg/f:DI 2 cx [orig:70 D.1861 ] [70])
deleting insn with uid = 36.
deleting insn with uid = 37.
deleting insn with uid = 38.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 41.


rfftf

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={19d,17u} r1={3d,2u} r2={4d,2u} r4={3d,2u} r5={5d,4u} r6={1d,15u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={11d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 147{97d,50u,0e} in 32{31 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 71

;; Pred edge  ENTRY (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])
        (reg:DI 5 di [ n ])) Test6.f08:90 62 {*movdi_internal_rex64}
     (nil))

(insn 3 2 4 2 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 r+0 S8 A64])
        (reg:DI 4 si [ r ])) Test6.f08:90 62 {*movdi_internal_rex64}
     (nil))

(insn 4 3 5 2 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wsave+0 S8 A64])
        (reg:DI 1 dx [ wsave ])) Test6.f08:90 62 {*movdi_internal_rex64}
     (nil))

(note 5 4 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 5 9 2 (set (reg/f:DI 0 ax [71])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])) Test6.f08:92 62 {*movdi_internal_rex64}
     (nil))

(insn 9 8 10 2 (set (reg:SI 0 ax [orig:59 D.1848 ] [59])
        (mem:SI (reg/f:DI 0 ax [71]) [0 *n_1(D)+0 S4 A32])) Test6.f08:92 64 {*movsi_internal}
     (nil))

(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:59 D.1848 ] [59])
            (const_int 1 [0x1]))) Test6.f08:92 6 {*cmpsi_1}
     (nil))

(jump_insn 11 10 15 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) Test6.f08:92 591 {*jcc_1}
     (nil)
 -> 44)
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4
;; Succ edge  3 (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 72 73 74 75 76 77 78

;; Pred edge  2 (fallthru)
(code_label 15 11 16 3 2 "" [0 uses])

(note 16 15 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 3 (set (reg/f:DI 0 ax [72])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 18 17 19 3 (set (reg:SI 0 ax [orig:60 D.1851 ] [60])
        (mem:SI (reg/f:DI 0 ax [72]) [0 *n_1(D)+0 S4 A32])) Test6.f08:93 64 {*movsi_internal}
     (nil))

(insn 19 18 20 3 (parallel [
            (set (reg:SI 0 ax [orig:61 D.1852 ] [61])
                (ashift:SI (reg:SI 0 ax [orig:60 D.1851 ] [60])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 497 {*ashlsi3_1}
     (nil))

(insn 20 19 21 3 (parallel [
            (set (reg:SI 0 ax [orig:62 D.1853 ] [62])
                (plus:SI (reg:SI 0 ax [orig:61 D.1852 ] [61])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 252 {*addsi_1}
     (nil))

(insn 21 20 22 3 (set (reg:DI 0 ax [orig:63 D.1854 ] [63])
        (sign_extend:DI (reg:SI 0 ax [orig:62 D.1853 ] [62]))) Test6.f08:93 126 {*extendsidi2_rex64}
     (nil))

(insn 22 21 23 3 (parallel [
            (set (reg:DI 0 ax [orig:64 D.1855 ] [64])
                (plus:DI (reg:DI 0 ax [orig:63 D.1854 ] [63])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 253 {*adddi_1}
     (nil))

(insn 23 22 48 3 (parallel [
            (set (reg:DI 0 ax [73])
                (ashift:DI (reg:DI 0 ax [orig:64 D.1855 ] [64])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 498 {*ashldi3_1}
     (nil))

(insn 48 23 24 3 (set (reg/f:DI 5 di [orig:65 D.1856 ] [65])
        (reg:DI 0 ax [73])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 24 48 25 3 (parallel [
            (set (reg/f:DI 5 di [orig:65 D.1856 ] [65])
                (plus:DI (reg/f:DI 5 di [orig:65 D.1856 ] [65])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 wsave+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 253 {*adddi_1}
     (nil))

(insn 25 24 26 3 (set (reg/f:DI 0 ax [74])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 26 25 27 3 (set (reg:SI 0 ax [orig:66 D.1857 ] [66])
        (mem:SI (reg/f:DI 0 ax [74]) [0 *n_1(D)+0 S4 A32])) Test6.f08:93 64 {*movsi_internal}
     (nil))

(insn 27 26 28 3 (parallel [
            (set (reg:SI 0 ax [orig:67 D.1858 ] [67])
                (plus:SI (reg:SI 0 ax [orig:66 D.1857 ] [66])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 252 {*addsi_1}
     (nil))

(insn 28 27 29 3 (set (reg:DI 0 ax [orig:68 D.1859 ] [68])
        (sign_extend:DI (reg:SI 0 ax [orig:67 D.1858 ] [67]))) Test6.f08:93 126 {*extendsidi2_rex64}
     (nil))

(insn 29 28 30 3 (parallel [
            (set (reg:DI 0 ax [orig:69 D.1860 ] [69])
                (plus:DI (reg:DI 0 ax [orig:68 D.1859 ] [68])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 253 {*adddi_1}
     (nil))

(insn 30 29 49 3 (parallel [
            (set (reg:DI 0 ax [75])
                (ashift:DI (reg:DI 0 ax [orig:69 D.1860 ] [69])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 498 {*ashldi3_1}
     (nil))

(insn 49 30 31 3 (set (reg/f:DI 2 cx [orig:70 D.1861 ] [70])
        (reg:DI 0 ax [75])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 31 49 32 3 (parallel [
            (set (reg/f:DI 2 cx [orig:70 D.1861 ] [70])
                (plus:DI (reg/f:DI 2 cx [orig:70 D.1861 ] [70])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 wsave+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:93 253 {*adddi_1}
     (nil))

(insn 32 31 33 3 (set (reg:DI 1 dx [76])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 wsave+0 S8 A64])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 33 32 34 3 (set (reg:DI 4 si [77])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 r+0 S8 A64])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 34 33 35 3 (set (reg:DI 0 ax [78])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 35 34 39 3 (set (reg:DI 37 r8)
        (reg/f:DI 5 di [orig:65 D.1856 ] [65])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 39 35 40 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [78])) Test6.f08:93 62 {*movdi_internal_rex64}
     (nil))

(insn 40 39 41 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:93 66 {*movqi_internal}
     (nil))

(call_insn 41 40 46 3 (call (mem:QI (symbol_ref:DI ("rfftf1_") [flags 0x41]  <function_decl 0x7fc95ddfdc00 rfftf1>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:93 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (expr_list:REG_DEP_TRUE (use (reg:DI 2 cx))
                        (expr_list:REG_DEP_TRUE (use (reg:DI 37 r8))
                            (nil))))))))

(insn 46 41 44 3 (const_int 0 [0]) Test6.f08:94 638 {nop}
     (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  3 (fallthru)
;; Pred edge  2
(code_label 44 46 45 4 1 "" [1 uses])

(note 45 44 47 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 47 45 0 NOTE_INSN_DELETED)


;; Function rffti (rffti_)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r76: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r76,l0) best DIREG, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a1 (r70,l0) best SIREG, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a4 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred DREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r65,l0) best DREG, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r65,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a4(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a5(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a6(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a7(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a8(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a9(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a10(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a11(r63,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a12(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a13(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a14(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a15(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a16(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a17(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8

   Insn 41(l0): point = 1
   Insn 36(l0): point = 3
   Insn 35(l0): point = 5
   Insn 34(l0): point = 7
   Insn 33(l0): point = 9
   Insn 32(l0): point = 11
   Insn 31(l0): point = 13
   Insn 30(l0): point = 15
   Insn 29(l0): point = 17
   Insn 28(l0): point = 19
   Insn 27(l0): point = 21
   Insn 26(l0): point = 23
   Insn 25(l0): point = 25
   Insn 24(l0): point = 27
   Insn 23(l0): point = 29
   Insn 22(l0): point = 31
   Insn 21(l0): point = 33
   Insn 20(l0): point = 35
   Insn 19(l0): point = 37
   Insn 18(l0): point = 39
   Insn 17(l0): point = 41
   Insn 16(l0): point = 43
   Insn 10(l0): point = 46
   Insn 9(l0): point = 48
   Insn 8(l0): point = 50
   Insn 7(l0): point = 52
   Insn 3(l0): point = 54
   Insn 2(l0): point = 56
 a0(r76): [8..13]
 a1(r70): [10..15]
 a2(r65): [12..29]
 a3(r75): [16..17]
 a4(r69): [18..19]
 a5(r68): [20..21]
 a6(r67): [22..23]
 a7(r66): [24..25]
 a8(r74): [26..27]
 a9(r73): [30..31]
 a10(r64): [32..33]
 a11(r63): [34..35]
 a12(r62): [36..37]
 a13(r61): [38..39]
 a14(r60): [40..41]
 a15(r72): [42..43]
 a16(r59): [49..50]
 a17(r71): [51..52]
Compressing live ranges: from 59 to 32 - 54%
Ranges after the compression:
 a0(r76): [0..1]
 a1(r70): [0..1]
 a2(r65): [0..13]
 a3(r75): [2..3]
 a4(r69): [4..5]
 a5(r68): [6..7]
 a6(r67): [8..9]
 a7(r66): [10..11]
 a8(r74): [12..13]
 a9(r73): [14..15]
 a10(r64): [16..17]
 a11(r63): [18..19]
 a12(r62): [20..21]
 a13(r61): [22..23]
 a14(r60): [24..25]
 a15(r72): [26..27]
 a16(r59): [28..29]
 a17(r71): [30..31]
  regions=1, blocks=5, points=32
    allocnos=18 (big 0), copies=0, conflicts=0, ranges=18
Disposition:
   16:r59  l0     0   14:r60  l0     0   13:r61  l0     0   12:r62  l0     0
   11:r63  l0     0   10:r64  l0     0    2:r65  l0     1    7:r66  l0     0
    6:r67  l0     0    5:r68  l0     0    4:r69  l0     0    1:r70  l0     2
   17:r71  l0     0   15:r72  l0     0    9:r73  l0     0    8:r74  l0     0
    3:r75  l0     0    0:r76  l0     0
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 4, 7, dead_or_set: 5
insn=3, live_throughout: 7, dead_or_set: 4
insn=7, live_throughout: 7, dead_or_set: 71
insn=8, live_throughout: 7, dead_or_set: 59, 71
insn=9, live_throughout: 7, dead_or_set: 59
insn=10, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 
insn=16, live_throughout: 7, dead_or_set: 72
insn=17, live_throughout: 7, dead_or_set: 60, 72
insn=18, live_throughout: 7, dead_or_set: 60, 61
insn=19, live_throughout: 7, dead_or_set: 61, 62
insn=20, live_throughout: 7, dead_or_set: 62, 63
insn=21, live_throughout: 7, dead_or_set: 63, 64
insn=22, live_throughout: 7, dead_or_set: 64, 73
insn=23, live_throughout: 7, dead_or_set: 65, 73
insn=24, live_throughout: 7, 65, dead_or_set: 74
insn=25, live_throughout: 7, 65, dead_or_set: 66, 74
insn=26, live_throughout: 7, 65, dead_or_set: 66, 67
insn=27, live_throughout: 7, 65, dead_or_set: 67, 68
insn=28, live_throughout: 7, 65, dead_or_set: 68, 69
insn=29, live_throughout: 7, 65, dead_or_set: 69, 75
insn=30, live_throughout: 7, 65, dead_or_set: 70, 75
insn=31, live_throughout: 7, 65, 70, dead_or_set: 76
insn=32, live_throughout: 7, 70, 76, dead_or_set: 1, 65
insn=33, live_throughout: 1, 7, 76, dead_or_set: 4, 70
insn=34, live_throughout: 1, 4, 7, dead_or_set: 5, 76
insn=35, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=36, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=41, live_throughout: 7, dead_or_set: 
insn=39, live_throughout: 7, dead_or_set: 
changing reg in insn 8
changing reg in insn 9
changing reg in insn 17
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 23
changing reg in insn 32
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 28
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 33
changing reg in insn 7
changing reg in insn 8
changing reg in insn 16
changing reg in insn 17
changing reg in insn 22
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 34
Spilling for insn 23.
Spilling for insn 30.

Reloads for insn # 23
Reload 0: reload_in (DI) = (reg:DI 0 ax [73])
	reload_out (DI) = (reg/f:DI 1 dx [orig:65 D.1841 ] [65])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 0 ax [73])
	reload_out_reg: (reg/f:DI 1 dx [orig:65 D.1841 ] [65])
	reload_reg_rtx: (reg/f:DI 1 dx [orig:65 D.1841 ] [65])

Reloads for insn # 30
Reload 0: reload_in (DI) = (reg:DI 0 ax [75])
	reload_out (DI) = (reg/f:DI 2 cx [orig:70 D.1846 ] [70])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 0 ax [75])
	reload_out_reg: (reg/f:DI 2 cx [orig:70 D.1846 ] [70])
	reload_reg_rtx: (reg/f:DI 2 cx [orig:70 D.1846 ] [70])
deleting insn with uid = 32.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 36.


rffti

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={19d,17u} r1={4d,2u} r2={4d,2u} r4={3d,2u} r5={3d,2u} r6={1d,12u} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={11d,1u} r18={1d} r19={1d} r20={1d,1u} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} 
;;    total ref usage 139{95d,44u,0e} in 29{28 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 59 71

;; Pred edge  ENTRY (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])
        (reg:DI 5 di [ n ])) Test6.f08:82 62 {*movdi_internal_rex64}
     (nil))

(insn 3 2 4 2 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 wsave+0 S8 A64])
        (reg:DI 4 si [ wsave ])) Test6.f08:82 62 {*movdi_internal_rex64}
     (nil))

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 (set (reg/f:DI 0 ax [71])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])) Test6.f08:84 62 {*movdi_internal_rex64}
     (nil))

(insn 8 7 9 2 (set (reg:SI 0 ax [orig:59 D.1833 ] [59])
        (mem:SI (reg/f:DI 0 ax [71]) [0 *n_1(D)+0 S4 A32])) Test6.f08:84 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:59 D.1833 ] [59])
            (const_int 1 [0x1]))) Test6.f08:84 6 {*cmpsi_1}
     (nil))

(jump_insn 10 9 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 39)
            (pc))) Test6.f08:84 591 {*jcc_1}
     (nil)
 -> 39)
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4
;; Succ edge  3 (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 65 66 67 68 69 70 72 73 74 75 76

;; Pred edge  2 (fallthru)
(code_label 14 10 15 3 5 "" [0 uses])

(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 16 15 17 3 (set (reg/f:DI 0 ax [72])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])) Test6.f08:85 62 {*movdi_internal_rex64}
     (nil))

(insn 17 16 18 3 (set (reg:SI 0 ax [orig:60 D.1836 ] [60])
        (mem:SI (reg/f:DI 0 ax [72]) [0 *n_1(D)+0 S4 A32])) Test6.f08:85 64 {*movsi_internal}
     (nil))

(insn 18 17 19 3 (parallel [
            (set (reg:SI 0 ax [orig:61 D.1837 ] [61])
                (ashift:SI (reg:SI 0 ax [orig:60 D.1836 ] [60])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 497 {*ashlsi3_1}
     (nil))

(insn 19 18 20 3 (parallel [
            (set (reg:SI 0 ax [orig:62 D.1838 ] [62])
                (plus:SI (reg:SI 0 ax [orig:61 D.1837 ] [61])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 252 {*addsi_1}
     (nil))

(insn 20 19 21 3 (set (reg:DI 0 ax [orig:63 D.1839 ] [63])
        (sign_extend:DI (reg:SI 0 ax [orig:62 D.1838 ] [62]))) Test6.f08:85 126 {*extendsidi2_rex64}
     (nil))

(insn 21 20 22 3 (parallel [
            (set (reg:DI 0 ax [orig:64 D.1840 ] [64])
                (plus:DI (reg:DI 0 ax [orig:63 D.1839 ] [63])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 253 {*adddi_1}
     (nil))

(insn 22 21 43 3 (parallel [
            (set (reg:DI 0 ax [73])
                (ashift:DI (reg:DI 0 ax [orig:64 D.1840 ] [64])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 498 {*ashldi3_1}
     (nil))

(insn 43 22 23 3 (set (reg/f:DI 1 dx [orig:65 D.1841 ] [65])
        (reg:DI 0 ax [73])) Test6.f08:85 62 {*movdi_internal_rex64}
     (nil))

(insn 23 43 24 3 (parallel [
            (set (reg/f:DI 1 dx [orig:65 D.1841 ] [65])
                (plus:DI (reg/f:DI 1 dx [orig:65 D.1841 ] [65])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 wsave+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 253 {*adddi_1}
     (nil))

(insn 24 23 25 3 (set (reg/f:DI 0 ax [74])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])) Test6.f08:85 62 {*movdi_internal_rex64}
     (nil))

(insn 25 24 26 3 (set (reg:SI 0 ax [orig:66 D.1842 ] [66])
        (mem:SI (reg/f:DI 0 ax [74]) [0 *n_1(D)+0 S4 A32])) Test6.f08:85 64 {*movsi_internal}
     (nil))

(insn 26 25 27 3 (parallel [
            (set (reg:SI 0 ax [orig:67 D.1843 ] [67])
                (plus:SI (reg:SI 0 ax [orig:66 D.1842 ] [66])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 252 {*addsi_1}
     (nil))

(insn 27 26 28 3 (set (reg:DI 0 ax [orig:68 D.1844 ] [68])
        (sign_extend:DI (reg:SI 0 ax [orig:67 D.1843 ] [67]))) Test6.f08:85 126 {*extendsidi2_rex64}
     (nil))

(insn 28 27 29 3 (parallel [
            (set (reg:DI 0 ax [orig:69 D.1845 ] [69])
                (plus:DI (reg:DI 0 ax [orig:68 D.1844 ] [68])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 253 {*adddi_1}
     (nil))

(insn 29 28 44 3 (parallel [
            (set (reg:DI 0 ax [75])
                (ashift:DI (reg:DI 0 ax [orig:69 D.1845 ] [69])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 498 {*ashldi3_1}
     (nil))

(insn 44 29 30 3 (set (reg/f:DI 2 cx [orig:70 D.1846 ] [70])
        (reg:DI 0 ax [75])) Test6.f08:85 62 {*movdi_internal_rex64}
     (nil))

(insn 30 44 31 3 (parallel [
            (set (reg/f:DI 2 cx [orig:70 D.1846 ] [70])
                (plus:DI (reg/f:DI 2 cx [orig:70 D.1846 ] [70])
                    (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                            (const_int -16 [0xfffffffffffffff0])) [0 wsave+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:85 253 {*adddi_1}
     (nil))

(insn 31 30 33 3 (set (reg:DI 0 ax [76])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 n+0 S8 A64])) Test6.f08:85 62 {*movdi_internal_rex64}
     (nil))

(insn 33 31 34 3 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [orig:70 D.1846 ] [70])) Test6.f08:85 62 {*movdi_internal_rex64}
     (nil))

(insn 34 33 35 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [76])) Test6.f08:85 62 {*movdi_internal_rex64}
     (nil))

(insn 35 34 36 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:85 66 {*movqi_internal}
     (nil))

(call_insn 36 35 41 3 (call (mem:QI (symbol_ref:DI ("rffti1_") [flags 0x41]  <function_decl 0x7fc95dbed000 rffti1>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:85 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))

(insn 41 36 39 3 (const_int 0 [0]) Test6.f08:86 638 {nop}
     (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  3 (fallthru)
;; Pred edge  2
(code_label 39 41 40 4 4 "" [1 uses])

(note 40 39 42 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 42 40 0 NOTE_INSN_DELETED)


;; Function random_normal (random_normal_)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 8 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r109: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a2 (r109,l0) best SSE_REGS, cover SSE_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a10 (r107,l0) best SSE_REGS, cover SSE_REGS
    r106: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a13 (r106,l0) best SSE_REGS, cover SSE_REGS
    r105: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a21 (r105,l0) best SSE_REGS, cover SSE_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r103: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r103,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a25 (r102,l0) best SSE_REGS, cover SSE_REGS
    r101: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a35 (r101,l0) best SSE_REGS, cover SSE_REGS
    r100: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a39 (r100,l0) best SSE_REGS, cover SSE_REGS
    r99: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a40 (r99,l0) best SSE_REGS, cover SSE_REGS
    r98: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a44 (r98,l0) best SSE_REGS, cover SSE_REGS
    r97: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a47 (r97,l0) best SSE_REGS, cover SSE_REGS
    r96: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a49 (r96,l0) best DIREG, cover GENERAL_REGS
    r95: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a50 (r95,l0) best DIREG, cover GENERAL_REGS
    r94: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a0 (r94,l0) best SSE_FIRST_REG, cover SSE_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a3 (r92,l0) best SSE_REGS, cover SSE_REGS
    r91: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a4 (r91,l0) best SSE_REGS, cover SSE_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a5 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a8 (r89,l0) best SSE_REGS, cover SSE_REGS
    r88: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a9 (r88,l0) best SSE_REGS, cover SSE_REGS
    r87: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a12 (r87,l0) best SSE_REGS, cover SSE_REGS
    r86: preferred SSE_FIRST_REG, alternative SSE_REGS, cover SSE_REGS
    a14 (r86,l0) best SSE_FIRST_REG, cover SSE_REGS
    r85: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a15 (r85,l0) best SSE_FIRST_REG, cover SSE_REGS
    r84: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a11 (r84,l0) best SSE_REGS, cover SSE_REGS
    r83: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a16 (r83,l0) best SSE_REGS, cover SSE_REGS
    r82: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a7 (r82,l0) best SSE_REGS, cover SSE_REGS
    r81: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a17 (r81,l0) best SSE_REGS, cover SSE_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a20 (r79,l0) best SSE_REGS, cover SSE_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a24 (r77,l0) best SSE_REGS, cover SSE_REGS
    r76: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a27 (r76,l0) best SSE_REGS, cover SSE_REGS
    r75: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a28 (r75,l0) best SSE_REGS, cover SSE_REGS
    r74: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a29 (r74,l0) best SSE_REGS, cover SSE_REGS
    r73: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a30 (r73,l0) best SSE_REGS, cover SSE_REGS
    r72: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a32 (r72,l0) best SSE_REGS, cover SSE_REGS
    r71: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a31 (r71,l0) best SSE_REGS, cover SSE_REGS
    r70: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a33 (r70,l0) best SSE_REGS, cover SSE_REGS
    r69: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a26 (r69,l0) best SSE_REGS, cover SSE_REGS
    r68: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a34 (r68,l0) best SSE_REGS, cover SSE_REGS
    r67: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a36 (r67,l0) best SSE_REGS, cover SSE_REGS
    r66: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a37 (r66,l0) best SSE_REGS, cover SSE_REGS
    r65: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a38 (r65,l0) best SSE_REGS, cover SSE_REGS
    r64: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a41 (r64,l0) best SSE_REGS, cover SSE_REGS
    r63: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a42 (r63,l0) best SSE_REGS, cover SSE_REGS
    r62: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a43 (r62,l0) best SSE_REGS, cover SSE_REGS
    r61: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a45 (r61,l0) best SSE_REGS, cover SSE_REGS
    r60: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a46 (r60,l0) best SSE_REGS, cover SSE_REGS
    r59: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a48 (r59,l0) best SSE_REGS, cover SSE_REGS

  a0(r94,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:11
  a1(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:26,26 FP_TOP_REG:0,0 FP_SECOND_REG:0,0 FLOAT_REGS:0,0 MEM:7
  a2(r109,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a3(r92,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a4(r91,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a5(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a6(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a7(r82,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:15
  a8(r89,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:16
  a9(r88,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:16
  a10(r107,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 MEM:15
  a11(r84,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:15
  a12(r87,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:15
  a13(r106,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a14(r86,l0) costs: AREG:17,17 DREG:17,17 CREG:17,17 BREG:17,17 SIREG:17,17 DIREG:17,17 AD_REGS:17,17 CLOBBERED_REGS:17,17 Q_REGS:17,17 NON_Q_REGS:17,17 LEGACY_REGS:17,17 GENERAL_REGS:17,17 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:25,25 FP_SECOND_REG:25,25 FLOAT_REGS:25,25 MEM:15
  a15(r85,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:11
  a16(r83,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:47,47 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:18
  a17(r81,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:47,47 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:18
  a18(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a19(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a20(r79,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a21(r105,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a22(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a23(r103,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a24(r77,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a25(r102,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a26(r69,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:15
  a27(r76,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:15
  a28(r75,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a29(r74,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a30(r73,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:15
  a31(r71,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:16
  a32(r72,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a33(r70,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a34(r68,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:47,47 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:18
  a35(r101,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a36(r67,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a37(r66,l0) costs: AREG:26,26 DREG:26,26 CREG:26,26 BREG:26,26 SIREG:26,26 DIREG:26,26 AD_REGS:26,26 CLOBBERED_REGS:26,26 Q_REGS:26,26 NON_Q_REGS:26,26 LEGACY_REGS:26,26 GENERAL_REGS:26,26 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:34,34 FP_TOP_REG:42,42 FP_SECOND_REG:42,42 FLOAT_REGS:42,42 MEM:16
  a38(r65,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a39(r100,l0) costs: SSE_FIRST_REG:0,0 SSE_REGS:0,0 MEM:15
  a40(r99,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a41(r64,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a42(r63,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a43(r62,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a44(r98,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a45(r61,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a46(r60,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a47(r97,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a48(r59,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a49(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a50(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 93(l0): point = 0
   Insn 90(l0): point = 2
   Insn 86(l0): point = 4
   Insn 85(l0): point = 6
   Insn 84(l0): point = 8
   Insn 83(l0): point = 10
   Insn 82(l0): point = 12
   Insn 81(l0): point = 14
   Insn 73(l0): point = 17
   Insn 72(l0): point = 19
   Insn 71(l0): point = 21
   Insn 70(l0): point = 23
   Insn 69(l0): point = 25
   Insn 68(l0): point = 27
   Insn 67(l0): point = 29
   Insn 66(l0): point = 31
   Insn 65(l0): point = 33
   Insn 64(l0): point = 35
   Insn 63(l0): point = 37
   Insn 62(l0): point = 39
   Insn 61(l0): point = 41
   Insn 60(l0): point = 43
   Insn 59(l0): point = 45
   Insn 58(l0): point = 47
   Insn 57(l0): point = 49
   Insn 56(l0): point = 51
   Insn 54(l0): point = 54
   Insn 53(l0): point = 56
   Insn 52(l0): point = 58
   Insn 51(l0): point = 60
   Insn 50(l0): point = 62
   Insn 49(l0): point = 64
   Insn 48(l0): point = 66
   Insn 46(l0): point = 69
   Insn 45(l0): point = 71
   Insn 44(l0): point = 73
   Insn 43(l0): point = 75
   Insn 42(l0): point = 77
   Insn 41(l0): point = 79
   Insn 40(l0): point = 81
   Insn 39(l0): point = 83
   Insn 38(l0): point = 85
   Insn 37(l0): point = 87
   Insn 36(l0): point = 89
   Insn 35(l0): point = 91
   Insn 34(l0): point = 93
   Insn 33(l0): point = 95
   Insn 32(l0): point = 97
   Insn 31(l0): point = 99
   Insn 30(l0): point = 101
   Insn 29(l0): point = 103
   Insn 28(l0): point = 105
   Insn 27(l0): point = 107
   Insn 26(l0): point = 109
   Insn 25(l0): point = 111
   Insn 24(l0): point = 113
   Insn 23(l0): point = 115
   Insn 22(l0): point = 117
   Insn 21(l0): point = 119
   Insn 20(l0): point = 121
   Insn 19(l0): point = 123
   Insn 18(l0): point = 125
   Insn 17(l0): point = 127
   Insn 16(l0): point = 129
   Insn 15(l0): point = 131
   Insn 14(l0): point = 133
   Insn 13(l0): point = 135
   Insn 12(l0): point = 137
   Insn 11(l0): point = 139
   Insn 10(l0): point = 141
   Insn 9(l0): point = 143
   Insn 8(l0): point = 145
   Insn 7(l0): point = 147
   Insn 6(l0): point = 149
   Insn 5(l0): point = 151
   Insn 100(l0): point = 154
   Insn 96(l0): point = 157
 a0(r94): [3..4]
 a1(r93): [5..6]
 a2(r109): [9..10]
 a3(r92): [11..12]
 a4(r91): [11..14]
 a5(r90): [20..21]
 a6(r108): [22..23]
 a7(r82): [26..49]
 a8(r89): [26..27]
 a9(r88): [28..31]
 a10(r107): [28..29]
 a11(r84): [32..45]
 a12(r87): [32..33]
 a13(r106): [34..35]
 a14(r86): [34..37]
 a15(r85): [42..43]
 a16(r83): [46..47]
 a17(r81): [50..51]
 a18(r80): [57..58]
 a19(r104): [59..60]
 a20(r79): [63..66]
 a21(r105): [63..64]
 a22(r78): [72..73]
 a23(r103): [74..75]
 a24(r77): [78..79]
 a25(r102): [82..83]
 a26(r69): [84..99]
 a27(r76): [84..85]
 a28(r75): [86..87]
 a29(r74): [88..89]
 a30(r73): [90..91]
 a31(r71): [90..95]
 a32(r72): [92..93]
 a33(r70): [96..97]
 a34(r68): [100..101]
 a35(r101): [104..105]
 a36(r67): [106..107]
 a37(r66): [106..109]
 a38(r65): [110..113]
 a39(r100): [110..111]
 a40(r99): [116..117]
 a41(r64): [118..119]
 a42(r63): [118..121]
 a43(r62): [124..125]
 a44(r98): [126..127]
 a45(r61): [126..129]
 a46(r60): [130..131]
 a47(r97): [132..133]
 a48(r59): [132..135]
 a49(r96): [142..143]
 a50(r95): [150..151]
Compressing live ranges: from 160 to 76 - 47%
Ranges after the compression:
 a0(r94): [0..1]
 a1(r93): [2..3]
 a2(r109): [4..5]
 a3(r92): [6..7]
 a4(r91): [6..7]
 a5(r90): [8..9]
 a6(r108): [10..11]
 a7(r82): [12..23]
 a8(r89): [12..13]
 a9(r88): [14..15]
 a10(r107): [14..15]
 a11(r84): [16..21]
 a12(r87): [16..17]
 a13(r106): [18..19]
 a14(r86): [18..19]
 a15(r85): [20..21]
 a16(r83): [22..23]
 a17(r81): [24..25]
 a18(r80): [26..27]
 a19(r104): [28..29]
 a20(r79): [30..31]
 a21(r105): [30..31]
 a22(r78): [32..33]
 a23(r103): [34..35]
 a24(r77): [36..37]
 a25(r102): [38..39]
 a26(r69): [40..51]
 a27(r76): [40..41]
 a28(r75): [42..43]
 a29(r74): [44..45]
 a30(r73): [46..47]
 a31(r71): [46..49]
 a32(r72): [48..49]
 a33(r70): [50..51]
 a34(r68): [52..53]
 a35(r101): [54..55]
 a36(r67): [56..57]
 a37(r66): [56..57]
 a38(r65): [58..59]
 a39(r100): [58..59]
 a40(r99): [60..61]
 a41(r64): [62..63]
 a42(r63): [62..63]
 a43(r62): [64..65]
 a44(r98): [66..67]
 a45(r61): [66..67]
 a46(r60): [68..69]
 a47(r97): [70..71]
 a48(r59): [70..71]
 a49(r96): [72..73]
 a50(r95): [74..75]
  regions=2, blocks=8, points=76
    allocnos=51 (big 0), copies=0, conflicts=0, ranges=51
Disposition:
   48:r59  l0    21   46:r60  l0    21   45:r61  l0    22   43:r62  l0    21
   42:r63  l0    21   41:r64  l0    22   38:r65  l0    22   37:r66  l0    21
   36:r67  l0    22   34:r68  l0    21   26:r69  l0    22   33:r70  l0    21
   31:r71  l0    21   32:r72  l0    23   30:r73  l0    23   29:r74  l0    21
   28:r75  l0    21   27:r76  l0    21   24:r77  l0    21   22:r78  l0     0
   20:r79  l0    22   18:r80  l0     0   17:r81  l0    21    7:r82  l0   mem
   16:r83  l0    21   11:r84  l0   mem   15:r85  l0    21   14:r86  l0    21
   12:r87  l0    21    9:r88  l0    21    8:r89  l0    21    5:r90  l0     0
    4:r91  l0    21    3:r92  l0    22    1:r93  l0     0    0:r94  l0    21
   50:r95  l0     0   49:r96  l0     0   47:r97  l0    22   44:r98  l0    21
   40:r99  l0    21   39:r100 l0    21   35:r101 l0    21   25:r102 l0    21
   23:r103 l0     0   19:r104 l0     0   21:r105 l0    21   13:r106 l0    22
   10:r107 l0    22    6:r108 l0     0    2:r109 l0    21
+++Costs: overall 25, reg -5, mem 30, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=96, live_throughout: 7, dead_or_set: 
insn=99, live_throughout: 7, dead_or_set: 
insn=100, live_throughout: 7, dead_or_set: 
insn=76, live_throughout: 7, dead_or_set: 
insn=5, live_throughout: 7, dead_or_set: 95
insn=6, live_throughout: 7, dead_or_set: 5, 95
insn=7, live_throughout: 5, 7, dead_or_set: 0
insn=8, live_throughout: 7, dead_or_set: 0, 5
insn=9, live_throughout: 7, dead_or_set: 96
insn=10, live_throughout: 7, dead_or_set: 5, 96
insn=11, live_throughout: 5, 7, dead_or_set: 0
insn=12, live_throughout: 7, dead_or_set: 0, 5
insn=13, live_throughout: 7, dead_or_set: 59
insn=14, live_throughout: 7, 59, dead_or_set: 97
insn=15, live_throughout: 7, dead_or_set: 59, 60, 97
insn=16, live_throughout: 7, dead_or_set: 60, 61
insn=17, live_throughout: 7, 61, dead_or_set: 98
insn=18, live_throughout: 7, dead_or_set: 61, 62, 98
insn=19, live_throughout: 7, dead_or_set: 62
insn=20, live_throughout: 7, dead_or_set: 63
insn=21, live_throughout: 7, 63, dead_or_set: 64
insn=22, live_throughout: 7, dead_or_set: 63, 64, 99
insn=23, live_throughout: 7, dead_or_set: 99
insn=24, live_throughout: 7, dead_or_set: 65
insn=25, live_throughout: 7, 65, dead_or_set: 100
insn=26, live_throughout: 7, dead_or_set: 65, 66, 100
insn=27, live_throughout: 7, 66, dead_or_set: 67
insn=28, live_throughout: 7, dead_or_set: 66, 67, 101
insn=29, live_throughout: 7, dead_or_set: 101
insn=30, live_throughout: 7, dead_or_set: 68
insn=31, live_throughout: 7, dead_or_set: 68, 69
insn=32, live_throughout: 7, 69, dead_or_set: 70
insn=33, live_throughout: 7, 69, dead_or_set: 70, 71
insn=34, live_throughout: 7, 69, 71, dead_or_set: 72
insn=35, live_throughout: 7, 69, 71, dead_or_set: 72, 73
insn=36, live_throughout: 7, 69, dead_or_set: 71, 73, 74
insn=37, live_throughout: 7, 69, dead_or_set: 74, 75
insn=38, live_throughout: 7, 69, dead_or_set: 75, 76
insn=39, live_throughout: 7, dead_or_set: 69, 76, 102
insn=40, live_throughout: 7, dead_or_set: 102
insn=41, live_throughout: 7, dead_or_set: 77
insn=42, live_throughout: 7, dead_or_set: 77
insn=43, live_throughout: 7, dead_or_set: 103
insn=44, live_throughout: 7, dead_or_set: 78, 103
insn=45, live_throughout: 7, dead_or_set: 78
insn=46, live_throughout: 7, dead_or_set: 
insn=48, live_throughout: 7, dead_or_set: 79
insn=49, live_throughout: 7, 79, dead_or_set: 105
insn=50, live_throughout: 7, dead_or_set: 79, 105
insn=51, live_throughout: 7, dead_or_set: 104
insn=52, live_throughout: 7, dead_or_set: 80, 104
insn=53, live_throughout: 7, dead_or_set: 80
insn=54, live_throughout: 7, dead_or_set: 
insn=56, live_throughout: 7, dead_or_set: 81
insn=57, live_throughout: 7, dead_or_set: 81
insn=58, live_throughout: 7, dead_or_set: 83
insn=59, live_throughout: 7, dead_or_set: 83
insn=60, live_throughout: 7, dead_or_set: 85
insn=61, live_throughout: 7, dead_or_set: 21, 85
insn=62, live_throughout: 7, dead_or_set: 21
insn=63, live_throughout: 7, dead_or_set: 21, 86
insn=64, live_throughout: 7, 86, dead_or_set: 106
insn=65, live_throughout: 7, dead_or_set: 86, 87, 106
insn=66, live_throughout: 7, dead_or_set: 87, 88
insn=67, live_throughout: 7, 88, dead_or_set: 107
insn=68, live_throughout: 7, dead_or_set: 88, 89, 107
insn=69, live_throughout: 7, dead_or_set: 89
insn=70, live_throughout: 7, dead_or_set: 108
insn=71, live_throughout: 7, dead_or_set: 90, 108
insn=72, live_throughout: 7, dead_or_set: 90
insn=73, live_throughout: 7, dead_or_set: 
insn=79, live_throughout: 7, dead_or_set: 
insn=81, live_throughout: 7, dead_or_set: 91
insn=82, live_throughout: 7, 91, dead_or_set: 92
insn=83, live_throughout: 7, dead_or_set: 91, 92, 109
insn=84, live_throughout: 7, dead_or_set: 109
insn=85, live_throughout: 7, dead_or_set: 93
insn=86, live_throughout: 7, dead_or_set: 93, 94
insn=90, live_throughout: 7, dead_or_set: 21, 94
insn=93, live_throughout: 7, 21, dead_or_set: 
changing reg in insn 13
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 18
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 21
changing reg in insn 22
changing reg in insn 24
changing reg in insn 26
changing reg in insn 26
changing reg in insn 26
changing reg in insn 28
changing reg in insn 27
changing reg in insn 28
changing reg in insn 30
changing reg in insn 31
changing reg in insn 31
changing reg in insn 31
changing reg in insn 39
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 36
changing reg in insn 34
changing reg in insn 35
changing reg in insn 35
changing reg in insn 36
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 44
changing reg in insn 45
changing reg in insn 48
changing reg in insn 50
changing reg in insn 52
changing reg in insn 53
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 60
changing reg in insn 61
changing reg in insn 63
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 68
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 71
changing reg in insn 72
changing reg in insn 81
changing reg in insn 83
changing reg in insn 82
changing reg in insn 83
changing reg in insn 85
changing reg in insn 86
changing reg in insn 86
changing reg in insn 90
changing reg in insn 5
changing reg in insn 6
changing reg in insn 9
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 17
changing reg in insn 18
changing reg in insn 22
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 28
changing reg in insn 29
changing reg in insn 39
changing reg in insn 40
changing reg in insn 43
changing reg in insn 44
changing reg in insn 51
changing reg in insn 52
changing reg in insn 49
changing reg in insn 50
changing reg in insn 64
changing reg in insn 65
changing reg in insn 67
changing reg in insn 68
changing reg in insn 70
changing reg in insn 71
changing reg in insn 83
changing reg in insn 84
Spilling for insn 31.
Spilling for insn 57.
Using reg 22 for reload 0
Spilling for insn 59.
Using reg 22 for reload 0
Spilling for insn 86.

Reloads for insn # 31
Reload 0: reload_in (SF) = (reg:SF 21 xmm0 [orig:68 D.1563 ] [68])
	reload_out (SF) = (reg:SF 22 xmm1 [orig:69 D.1564 ] [69])
	SSE_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SF 21 xmm0 [orig:68 D.1563 ] [68])
	reload_out_reg: (reg:SF 22 xmm1 [orig:69 D.1564 ] [69])
	reload_reg_rtx: (reg:SF 22 xmm1 [orig:69 D.1564 ] [69])

Reloads for insn # 57
Reload 0: reload_in (SF) = (reg:SF 21 xmm0 [orig:81 D.1568 ] [81])
	reload_out (SF) = (reg:SF 82 [ D.1569 ])
	SSE_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SF 21 xmm0 [orig:81 D.1568 ] [81])
	reload_out_reg: (reg:SF 82 [ D.1569 ])
	reload_reg_rtx: (reg:SF 22 xmm1)

Reloads for insn # 59
Reload 0: reload_in (SF) = (reg:SF 21 xmm0 [orig:83 D.1570 ] [83])
	reload_out (SF) = (reg:SF 84 [ D.1571 ])
	SSE_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SF 21 xmm0 [orig:83 D.1570 ] [83])
	reload_out_reg: (reg:SF 84 [ D.1571 ])
	reload_reg_rtx: (reg:SF 22 xmm1)

Reloads for insn # 86
Reload 0: reload_in (SF) = (reg:SF 0 ax [orig:93 D.1831 ] [93])
	SSE_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:SF 0 ax [orig:93 D.1831 ] [93])
	reload_reg_rtx: (reg:SF 21 xmm0 [orig:94 <retval> ] [94])
deleting insn with uid = 37.
deleting insn with uid = 61.
deleting insn with uid = 63.
deleting insn with uid = 86.
deleting insn with uid = 90.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 62.


random_normal

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame] 21 [xmm0]
;;  regs ever live 	 0[ax] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1] 23[xmm2]
;;  ref usage 	r0={15d,11u} r1={4d} r2={4d} r4={4d} r5={6d,2u} r6={1d,35u} r7={1d,10u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={16d,6u} r18={3d} r19={3d} r20={1d,1u} r21={30d,31u,1e} r22={19d,15u,1e} r23={6d,2u} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 334{219d,113u,2e} in 79{76 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 96 2 NOTE_INSN_FUNCTION_BEG)

(jump_insn 96 2 97 2 (set (pc)
        (label_ref 76)) 606 {jump}
     (nil)
 -> 76)
;; End of basic block 2 -> ( 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 [100.0%] 

(barrier 97 96 99)

;; Start of basic block ( 4 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  4
;; Pred edge  5
(code_label 99 97 98 7 11 "" [2 uses])

(note 98 99 100 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 100 98 76 7 (const_int 0 [0]) Test6.f08:57 638 {nop}
     (nil))
;; End of basic block 7 -> ( 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 95 96 97 98 99 100 101 102 103

;; Pred edge  2 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 76 100 4 3 10 "" [1 uses])

(note 4 76 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 5 4 6 3 (parallel [
            (set (reg:DI 0 ax [95])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:58 253 {*adddi_1}
     (nil))

(insn 6 5 7 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [95])) Test6.f08:58 62 {*movdi_internal_rex64}
     (nil))

(insn 7 6 8 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:58 66 {*movqi_internal}
     (nil))

(call_insn 8 7 9 3 (call (mem:QI (symbol_ref:DI ("_gfortran_random_r4") [flags 0x41]  <function_decl 0x7fc95dbed300 _gfortran_random_r4>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:58 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))

(insn 9 8 10 3 (parallel [
            (set (reg:DI 0 ax [96])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:59 253 {*adddi_1}
     (nil))

(insn 10 9 11 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [96])) Test6.f08:59 62 {*movdi_internal_rex64}
     (nil))

(insn 11 10 12 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:59 66 {*movqi_internal}
     (nil))

(call_insn 12 11 13 3 (call (mem:QI (symbol_ref:DI ("_gfortran_random_r4") [flags 0x41]  <function_decl 0x7fc95dbed300 _gfortran_random_r4>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:59 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))

(insn 13 12 14 3 (set (reg:SF 21 xmm0 [orig:59 v.18 ] [59])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 v+0 S4 A64])) Test6.f08:60 110 {*movsf_internal}
     (nil))

(insn 14 13 15 3 (set (reg:SF 22 xmm1 [97])
        (mem/u/c/i:SF (symbol_ref/u:DI ("*.LC0") [flags 0x2]) [0 S4 A32])) Test6.f08:60 110 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 5.0e-1 [0x0.8p+0])
        (nil)))

(insn 15 14 16 3 (set (reg:SF 21 xmm0 [orig:60 D.1801 ] [60])
        (minus:SF (reg:SF 21 xmm0 [orig:59 v.18 ] [59])
            (reg:SF 22 xmm1 [97]))) Test6.f08:60 740 {*fop_sf_1_sse}
     (nil))

(insn 16 15 17 3 (set (reg:SF 22 xmm1 [orig:61 D.1802 ] [61])
        (reg:SF 21 xmm0 [orig:60 D.1801 ] [60])) Test6.f08:60 110 {*movsf_internal}
     (nil))

(insn 17 16 18 3 (set (reg:SF 21 xmm0 [98])
        (mem/u/c/i:SF (symbol_ref/u:DI ("*.LC1") [flags 0x2]) [0 S4 A32])) Test6.f08:60 110 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.71560001373291015625e+0 [0x0.db98c8p+1])
        (nil)))

(insn 18 17 19 3 (set (reg:SF 21 xmm0 [orig:62 v.19 ] [62])
        (mult:SF (reg:SF 21 xmm0 [98])
            (reg:SF 22 xmm1 [orig:61 D.1802 ] [61]))) Test6.f08:60 729 {*fop_sf_comm_sse}
     (nil))

(insn 19 18 20 3 (set (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 v+0 S4 A64])
        (reg:SF 21 xmm0 [orig:62 v.19 ] [62])) Test6.f08:60 110 {*movsf_internal}
     (nil))

(insn 20 19 21 3 (set (reg:SF 21 xmm0 [orig:63 u.20 ] [63])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 u+0 S4 A32])) Test6.f08:63 110 {*movsf_internal}
     (nil))

(insn 21 20 22 3 (set (reg:SF 22 xmm1 [orig:64 s.21 ] [64])
        (mem/c/i:SF (symbol_ref:DI ("s.1554") [flags 0x2]  <var_decl 0x7fc95dbef3c0 s>) [0 s+0 S4 A32])) Test6.f08:63 110 {*movsf_internal}
     (nil))

(insn 22 21 23 3 (set (reg:SF 21 xmm0 [99])
        (minus:SF (reg:SF 21 xmm0 [orig:63 u.20 ] [63])
            (reg:SF 22 xmm1 [orig:64 s.21 ] [64]))) Test6.f08:63 740 {*fop_sf_1_sse}
     (nil))

(insn 23 22 24 3 (set (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32])
        (reg:SF 21 xmm0 [99])) Test6.f08:63 110 {*movsf_internal}
     (nil))

(insn 24 23 25 3 (set (reg:SF 22 xmm1 [orig:65 v.22 ] [65])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 v+0 S4 A64])) Test6.f08:64 110 {*movsf_internal}
     (nil))

(insn 25 24 26 3 (set (reg:V4SF 21 xmm0 [100])
        (mem/u/c/i:V4SF (symbol_ref/u:DI ("*.LC2") [flags 0x2]) [0 S16 A128])) Test6.f08:64 1126 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF +QNaN [+QNaN])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))

(insn 26 25 27 3 (parallel [
            (set (reg:SF 21 xmm0 [orig:66 D.1807 ] [66])
                (abs:SF (reg:SF 22 xmm1 [orig:65 v.22 ] [65])))
            (use (reg:V4SF 21 xmm0 [100]))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:64 457 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (abs:SF (reg:SF 22 xmm1 [orig:65 v.22 ] [65]))
        (nil)))

(insn 27 26 28 3 (set (reg:SF 22 xmm1 [orig:67 t.23 ] [67])
        (mem/c/i:SF (symbol_ref:DI ("t.1555") [flags 0x2]  <var_decl 0x7fc95dbef460 t>) [0 t+0 S4 A32])) Test6.f08:64 110 {*movsf_internal}
     (nil))

(insn 28 27 29 3 (set (reg:SF 21 xmm0 [101])
        (minus:SF (reg:SF 21 xmm0 [orig:66 D.1807 ] [66])
            (reg:SF 22 xmm1 [orig:67 t.23 ] [67]))) Test6.f08:64 740 {*fop_sf_1_sse}
     (nil))

(insn 29 28 30 3 (set (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32])
        (reg:SF 21 xmm0 [101])) Test6.f08:64 110 {*movsf_internal}
     (nil))

(insn 30 29 102 3 (set (reg:SF 21 xmm0 [orig:68 D.1563 ] [68])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32])) Test6.f08:65 110 {*movsf_internal}
     (nil))

(insn 102 30 31 3 (set (reg:SF 22 xmm1 [orig:69 D.1564 ] [69])
        (reg:SF 21 xmm0 [orig:68 D.1563 ] [68])) Test6.f08:65 110 {*movsf_internal}
     (nil))

(insn 31 102 32 3 (set (reg:SF 22 xmm1 [orig:69 D.1564 ] [69])
        (mult:SF (reg:SF 22 xmm1 [orig:69 D.1564 ] [69])
            (reg:SF 21 xmm0 [orig:68 D.1563 ] [68]))) Test6.f08:65 729 {*fop_sf_comm_sse}
     (nil))

(insn 32 31 33 3 (set (reg:SF 21 xmm0 [orig:70 a.24 ] [70])
        (mem/c/i:SF (symbol_ref:DI ("a.1548") [flags 0x2]  <var_decl 0x7fc95dbef000 a>) [0 a+0 S4 A32])) Test6.f08:65 110 {*movsf_internal}
     (nil))

(insn 33 32 34 3 (set (reg:SF 21 xmm0 [orig:71 D.1810 ] [71])
        (mult:SF (reg:SF 21 xmm0 [orig:70 a.24 ] [70])
            (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32]))) Test6.f08:65 729 {*fop_sf_comm_sse}
     (nil))

(insn 34 33 35 3 (set (reg:SF 23 xmm2 [orig:72 b.25 ] [72])
        (mem/c/i:SF (symbol_ref:DI ("b.1549") [flags 0x2]  <var_decl 0x7fc95dbef0a0 b>) [0 b+0 S4 A32])) Test6.f08:65 110 {*movsf_internal}
     (nil))

(insn 35 34 36 3 (set (reg:SF 23 xmm2 [orig:73 D.1812 ] [73])
        (mult:SF (reg:SF 23 xmm2 [orig:72 b.25 ] [72])
            (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -4 [0xfffffffffffffffc])) [0 x+0 S4 A32]))) Test6.f08:65 729 {*fop_sf_comm_sse}
     (nil))

(insn 36 35 38 3 (set (reg:SF 21 xmm0 [orig:74 D.1813 ] [74])
        (minus:SF (reg:SF 21 xmm0 [orig:71 D.1810 ] [71])
            (reg:SF 23 xmm2 [orig:73 D.1812 ] [73]))) Test6.f08:65 740 {*fop_sf_1_sse}
     (nil))

(insn 38 36 39 3 (set (reg:SF 21 xmm0 [orig:76 D.1815 ] [76])
        (mult:SF (reg:SF 21 xmm0 [orig:75 D.1814 ] [75])
            (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -8 [0xfffffffffffffff8])) [0 y+0 S4 A32]))) Test6.f08:65 729 {*fop_sf_comm_sse}
     (nil))

(insn 39 38 40 3 (set (reg:SF 21 xmm0 [102])
        (plus:SF (reg:SF 21 xmm0 [orig:76 D.1815 ] [76])
            (reg:SF 22 xmm1 [orig:69 D.1564 ] [69]))) Test6.f08:65 729 {*fop_sf_comm_sse}
     (nil))

(insn 40 39 41 3 (set (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 q+0 S4 A32])
        (reg:SF 21 xmm0 [102])) Test6.f08:65 110 {*movsf_internal}
     (nil))

(insn 41 40 42 3 (set (reg:SF 21 xmm0 [orig:77 r1.26 ] [77])
        (mem/c/i:SF (symbol_ref:DI ("r1.1552") [flags 0x2]  <var_decl 0x7fc95dbef280 r1>) [0 r1+0 S4 A32])) Test6.f08:68 110 {*movsf_internal}
     (nil))

(insn 42 41 43 3 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:77 r1.26 ] [77])
            (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -12 [0xfffffffffffffff4])) [0 q+0 S4 A32]))) Test6.f08:68 38 {*cmpfp_iu_sse}
     (nil))

(insn 43 42 44 3 (set (reg:QI 0 ax [103])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) Test6.f08:68 585 {*setcc_qi}
     (nil))

(insn 44 43 45 3 (parallel [
            (set (reg:SI 0 ax [orig:78 D.1817 ] [78])
                (zero_extend:SI (reg:QI 0 ax [103])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:68 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 45 44 46 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:78 D.1817 ] [78])
            (const_int 0 [0]))) Test6.f08:68 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 46 45 47 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) Test6.f08:68 591 {*jcc_1}
     (nil)
 -> 79)
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6
;; Succ edge  4 (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 79 80 104 105

;; Pred edge  3 (fallthru)
(note 47 46 48 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 48 47 49 4 (set (reg:SF 22 xmm1 [orig:79 r2.27 ] [79])
        (mem/c/i:SF (symbol_ref:DI ("r2.1553") [flags 0x2]  <var_decl 0x7fc95dbef320 r2>) [0 r2+0 S4 A32])) Test6.f08:70 110 {*movsf_internal}
     (nil))

(insn 49 48 50 4 (set (reg:SF 21 xmm0 [105])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -12 [0xfffffffffffffff4])) [0 q+0 S4 A32])) Test6.f08:70 110 {*movsf_internal}
     (nil))

(insn 50 49 51 4 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [105])
            (reg:SF 22 xmm1 [orig:79 r2.27 ] [79]))) Test6.f08:70 38 {*cmpfp_iu_sse}
     (nil))

(insn 51 50 52 4 (set (reg:QI 0 ax [104])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) Test6.f08:70 585 {*setcc_qi}
     (nil))

(insn 52 51 53 4 (parallel [
            (set (reg:SI 0 ax [orig:80 D.1820 ] [80])
                (zero_extend:SI (reg:QI 0 ax [104])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:70 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 53 52 54 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:80 D.1820 ] [80])
            (const_int 0 [0]))) Test6.f08:70 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 54 53 55 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 99)
            (pc))) Test6.f08:70 591 {*jcc_1}
     (nil)
 -> 99)
;; End of basic block 4 -> ( 7 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  7
;; Succ edge  5 (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 81 82 83 84 85 86 87 88 89 90 106 107 108

;; Pred edge  4 (fallthru)
(note 55 54 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 56 55 103 5 (set (reg:SF 21 xmm0 [orig:81 D.1568 ] [81])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 v+0 S4 A64])) Test6.f08:72 110 {*movsf_internal}
     (nil))

(insn 103 56 57 5 (set (reg:SF 22 xmm1)
        (reg:SF 21 xmm0 [orig:81 D.1568 ] [81])) Test6.f08:72 110 {*movsf_internal}
     (nil))

(insn 57 103 104 5 (set (reg:SF 22 xmm1)
        (mult:SF (reg:SF 22 xmm1)
            (reg:SF 21 xmm0 [orig:81 D.1568 ] [81]))) Test6.f08:72 729 {*fop_sf_comm_sse}
     (nil))

(insn 104 57 58 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -36 [0xffffffffffffffdc])) [0 %sfp+-36 S4 A32])
        (reg:SF 22 xmm1)) Test6.f08:72 110 {*movsf_internal}
     (nil))

(insn 58 104 105 5 (set (reg:SF 21 xmm0 [orig:83 D.1570 ] [83])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 u+0 S4 A32])) Test6.f08:72 110 {*movsf_internal}
     (nil))

(insn 105 58 59 5 (set (reg:SF 22 xmm1)
        (reg:SF 21 xmm0 [orig:83 D.1570 ] [83])) Test6.f08:72 110 {*movsf_internal}
     (nil))

(insn 59 105 106 5 (set (reg:SF 22 xmm1)
        (mult:SF (reg:SF 22 xmm1)
            (reg:SF 21 xmm0 [orig:83 D.1570 ] [83]))) Test6.f08:72 729 {*fop_sf_comm_sse}
     (nil))

(insn 106 59 60 5 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -40 [0xffffffffffffffd8])) [0 %sfp+-40 S4 A32])
        (reg:SF 22 xmm1)) Test6.f08:72 110 {*movsf_internal}
     (nil))

(insn 60 106 62 5 (set (reg:SF 21 xmm0 [orig:85 u.28 ] [85])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 u+0 S4 A32])) Test6.f08:72 110 {*movsf_internal}
     (nil))

(call_insn/u 62 60 64 5 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("logf") [flags 0x41]  <function_decl 0x7fc95dd46300 __builtin_logf>) [0 S1 A8])
            (const_int 0 [0]))) Test6.f08:72 929 {*call_value_0_rex64}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SF 21 xmm0))
        (nil)))

(insn 64 62 65 5 (set (reg:SF 22 xmm1 [106])
        (mem/u/c/i:SF (symbol_ref/u:DI ("*.LC3") [flags 0x2]) [0 S4 A32])) Test6.f08:72 110 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 4.0e+0 [0x0.8p+3])
        (nil)))

(insn 65 64 66 5 (set (reg:SF 21 xmm0 [orig:87 D.1824 ] [87])
        (mult:SF (reg:SF 21 xmm0 [orig:86 D.1823 ] [86])
            (reg:SF 22 xmm1 [106]))) Test6.f08:72 729 {*fop_sf_comm_sse}
     (nil))

(insn 66 65 67 5 (set (reg:SF 21 xmm0 [orig:88 D.1825 ] [88])
        (mult:SF (reg:SF 21 xmm0 [orig:87 D.1824 ] [87])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -40 [0xffffffffffffffd8])) [0 %sfp+-40 S4 A32]))) Test6.f08:72 729 {*fop_sf_comm_sse}
     (nil))

(insn 67 66 68 5 (set (reg:V4SF 22 xmm1 [107])
        (mem/u/c/i:V4SF (symbol_ref/u:DI ("*.LC4") [flags 0x2]) [0 S16 A128])) Test6.f08:72 1126 {*movv4sf_internal}
     (expr_list:REG_EQUAL (const_vector:V4SF [
                (const_double:SF -0.0 [-0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
                (const_double:SF 0.0 [0x0.0p+0])
            ])
        (nil)))

(insn 68 67 69 5 (parallel [
            (set (reg:SF 21 xmm0 [orig:89 D.1826 ] [89])
                (neg:SF (reg:SF 21 xmm0 [orig:88 D.1825 ] [88])))
            (use (reg:V4SF 22 xmm1 [107]))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:72 457 {*absnegsf2_sse}
     (expr_list:REG_EQUAL (neg:SF (reg:SF 21 xmm0 [orig:88 D.1825 ] [88]))
        (nil)))

(insn 69 68 70 5 (set (reg:CCFPU 17 flags)
        (compare:CCFPU (reg:SF 21 xmm0 [orig:89 D.1826 ] [89])
            (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                    (const_int -36 [0xffffffffffffffdc])) [0 %sfp+-36 S4 A32]))) Test6.f08:72 38 {*cmpfp_iu_sse}
     (nil))

(insn 70 69 71 5 (set (reg:QI 0 ax [108])
        (gt:QI (reg:CCFPU 17 flags)
            (const_int 0 [0]))) Test6.f08:72 585 {*setcc_qi}
     (nil))

(insn 71 70 72 5 (parallel [
            (set (reg:SI 0 ax [orig:90 D.1827 ] [90])
                (zero_extend:SI (reg:QI 0 ax [108])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:72 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 72 71 73 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:90 D.1827 ] [90])
            (const_int 0 [0]))) Test6.f08:72 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 73 72 79 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 99)
            (pc))) Test6.f08:72 591 {*jcc_1}
     (nil)
 -> 99)
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  7

;; Start of basic block ( 3 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 21 [xmm0] 91 92 93 94 109

;; Pred edge  3
;; Pred edge  5 (fallthru)
(code_label 79 73 80 6 8 "" [1 uses])

(note 80 79 81 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 81 80 82 6 (set (reg:SF 21 xmm0 [orig:91 v.29 ] [91])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 v+0 S4 A64])) Test6.f08:76 110 {*movsf_internal}
     (nil))

(insn 82 81 83 6 (set (reg:SF 22 xmm1 [orig:92 u.30 ] [92])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 u+0 S4 A32])) Test6.f08:76 110 {*movsf_internal}
     (nil))

(insn 83 82 84 6 (set (reg:SF 21 xmm0 [109])
        (div:SF (reg:SF 21 xmm0 [orig:91 v.29 ] [91])
            (reg:SF 22 xmm1 [orig:92 u.30 ] [92]))) Test6.f08:76 740 {*fop_sf_1_sse}
     (nil))

(insn 84 83 85 6 (set (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fn_val+0 S4 A32])
        (reg:SF 21 xmm0 [109])) Test6.f08:76 110 {*movsf_internal}
     (nil))

(insn 85 84 107 6 (set (reg:SF 0 ax [orig:93 D.1831 ] [93])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 fn_val+0 S4 A32])) Test6.f08:77 110 {*movsf_internal}
     (nil))

(insn 107 85 108 6 (set (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 S4 A32])
        (reg:SF 0 ax [orig:93 D.1831 ] [93])) Test6.f08:77 110 {*movsf_internal}
     (nil))

(insn 108 107 93 6 (set (reg:SF 21 xmm0 [orig:94 <retval> ] [94])
        (mem/c:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -44 [0xffffffffffffffd4])) [0 S4 A32])) Test6.f08:77 110 {*movsf_internal}
     (nil))

(insn 93 108 101 6 (use (reg/i:SF 21 xmm0)) Test6.f08:79 -1
     (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 21 [xmm0]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 101 93 0 NOTE_INSN_DELETED)


;; Function init_random_seed (init_random_seed_)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 57 count 48 (  1.1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r178: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a4 (r178,l0) best SIREG, cover GENERAL_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a13 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    r176: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a26 (r176,l0) best AREG, cover GENERAL_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a33 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a35 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a55 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a56 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a66 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    r170: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a69 (r170,l0) best DIREG, cover GENERAL_REGS
    r169: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a73 (r169,l0) best AREG, cover GENERAL_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a75 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a82 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a88 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a95 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a96 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a104 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    r162: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a107 (r162,l0) best AREG, cover GENERAL_REGS
    r161: preferred DREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a108 (r161,l0) best DREG, cover GENERAL_REGS
    r160: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a106 (r160,l0) best AREG, cover GENERAL_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a112 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a114 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    r157: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a118 (r157,l0) best DIREG, cover GENERAL_REGS
    r156: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r156,l0) best DIREG, cover GENERAL_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    r154: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r154,l0) best DIREG, cover GENERAL_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a3 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    r152: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a5 (r152,l0) best DIREG, cover GENERAL_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a9 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a14 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a19 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    r144: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a20 (r144,l0) best AREG, cover GENERAL_REGS
    r143: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a21 (r143,l0) best DIREG, cover GENERAL_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a24 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a27 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    r139: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a22 (r139,l0) best SIREG, cover GENERAL_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a28 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a30 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a31 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a32 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a29 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS
    r132: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a34 (r132,l0) best GENERAL_REGS, cover GENERAL_REGS
    r131: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a36 (r131,l0) best GENERAL_REGS, cover GENERAL_REGS
    r130: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a37 (r130,l0) best GENERAL_REGS, cover GENERAL_REGS
    r129: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a38 (r129,l0) best GENERAL_REGS, cover GENERAL_REGS
    r128: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a39 (r128,l0) best GENERAL_REGS, cover GENERAL_REGS
    r127: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a40 (r127,l0) best GENERAL_REGS, cover GENERAL_REGS
    r126: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a41 (r126,l0) best GENERAL_REGS, cover GENERAL_REGS
    r125: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a42 (r125,l0) best GENERAL_REGS, cover GENERAL_REGS
    r124: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a43 (r124,l0) best GENERAL_REGS, cover GENERAL_REGS
    r123: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a18 (r123,l0) best GENERAL_REGS, cover GENERAL_REGS
    r122: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a48 (r122,l0) best GENERAL_REGS, cover GENERAL_REGS
    r121: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a47 (r121,l0) best GENERAL_REGS, cover GENERAL_REGS
    r120: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a52 (r120,l0) best GENERAL_REGS, cover GENERAL_REGS
    r119: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a53 (r119,l0) best GENERAL_REGS, cover GENERAL_REGS
    r118: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a54 (r118,l0) best GENERAL_REGS, cover GENERAL_REGS
    r117: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a57 (r117,l0) best AREG, cover GENERAL_REGS
    r116: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a58 (r116,l0) best DIREG, cover GENERAL_REGS
    r115: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a51 (r115,l0) best GENERAL_REGS, cover GENERAL_REGS
    r114: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a59 (r114,l0) best GENERAL_REGS, cover GENERAL_REGS
    r113: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a60 (r113,l0) best GENERAL_REGS, cover GENERAL_REGS
    r112: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a61 (r112,l0) best GENERAL_REGS, cover GENERAL_REGS
    r111: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a62 (r111,l0) best GENERAL_REGS, cover GENERAL_REGS
    r110: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a63 (r110,l0) best GENERAL_REGS, cover GENERAL_REGS
    r109: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a65 (r109,l0) best GENERAL_REGS, cover GENERAL_REGS
    r108: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a67 (r108,l0) best GENERAL_REGS, cover GENERAL_REGS
    r107: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a68 (r107,l0) best GENERAL_REGS, cover GENERAL_REGS
    r106: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a64 (r106,l0) best GENERAL_REGS, cover GENERAL_REGS
    r105: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a49 (r105,l0) best GENERAL_REGS, cover GENERAL_REGS
    r104: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r104,l0) best GENERAL_REGS, cover GENERAL_REGS
    r102: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a44 (r102,l0) best GENERAL_REGS, cover GENERAL_REGS
    r101: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a70 (r101,l0) best GENERAL_REGS, cover GENERAL_REGS
    r100: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a71 (r100,l0) best GENERAL_REGS, cover GENERAL_REGS
    r99: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a72 (r99,l0) best GENERAL_REGS, cover GENERAL_REGS
    r98: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a74 (r98,l0) best DIREG, cover GENERAL_REGS
    r97: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a76 (r97,l0) best GENERAL_REGS, cover GENERAL_REGS
    r96: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a78 (r96,l0) best GENERAL_REGS, cover GENERAL_REGS
    r95: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a79 (r95,l0) best GENERAL_REGS, cover GENERAL_REGS
    r94: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a80 (r94,l0) best GENERAL_REGS, cover GENERAL_REGS
    r93: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a81 (r93,l0) best GENERAL_REGS, cover GENERAL_REGS
    r92: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a83 (r92,l0) best GENERAL_REGS, cover GENERAL_REGS
    r91: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a85 (r91,l0) best GENERAL_REGS, cover GENERAL_REGS
    r90: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a87 (r90,l0) best GENERAL_REGS, cover GENERAL_REGS
    r89: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a89 (r89,l0) best GENERAL_REGS, cover GENERAL_REGS
    r88: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a84 (r88,l0) best GENERAL_REGS, cover GENERAL_REGS
    r87: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a92 (r87,l0) best GENERAL_REGS, cover GENERAL_REGS
    r86: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a93 (r86,l0) best GENERAL_REGS, cover GENERAL_REGS
    r85: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a94 (r85,l0) best GENERAL_REGS, cover GENERAL_REGS
    r84: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a97 (r84,l0) best GENERAL_REGS, cover GENERAL_REGS
    r83: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a86 (r83,l0) best GENERAL_REGS, cover GENERAL_REGS
    r82: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a90 (r82,l0) best GENERAL_REGS, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a101 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a102 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a103 (r79,l0) best GENERAL_REGS, cover GENERAL_REGS
    r78: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a105 (r78,l0) best GENERAL_REGS, cover GENERAL_REGS
    r77: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a109 (r77,l0) best GENERAL_REGS, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a110 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a111 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a98 (r74,l0) best GENERAL_REGS, cover GENERAL_REGS
    r73: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a113 (r73,l0) best GENERAL_REGS, cover GENERAL_REGS
    r72: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a115 (r72,l0) best GENERAL_REGS, cover GENERAL_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a116 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a117 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a91 (r69,l0) best GENERAL_REGS, cover GENERAL_REGS
    r68: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a100 (r68,l0) best GENERAL_REGS, cover GENERAL_REGS
    r67: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a99 (r67,l0) best GENERAL_REGS, cover GENERAL_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a50 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a46 (r63,l0) best GENERAL_REGS, cover GENERAL_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a45 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a15 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a7 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a77 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r156,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r155,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a2(r154,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r153,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a4(r178,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a5(r152,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a6(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 MEM:21
  a7(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:12
  a8(r147,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a9(r151,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a10(r104,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a11(r150,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a12(r149,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:52,52 SSE_REGS:52,52 MMX_REGS:52,52 MEM:13
  a13(r177,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:104,104 SSE_REGS:104,104 MMX_REGS:104,104 MEM:25
  a14(r148,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a15(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a16(r146,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a17(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:12
  a18(r123,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:78,78 SSE_REGS:78,78 MMX_REGS:78,78 MEM:21
  a19(r145,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a20(r144,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a21(r143,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a22(r139,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:10
  a23(r134,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a24(r142,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a25(r141,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a26(r176,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a27(r140,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a28(r138,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a29(r133,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:10
  a30(r137,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a31(r136,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a32(r135,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a33(r175,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a34(r132,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a35(r174,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a36(r131,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:10
  a37(r130,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a38(r129,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a39(r128,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a40(r127,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a41(r126,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a42(r125,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a43(r124,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a44(r102,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a45(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:65,65 SSE_REGS:65,65 MMX_REGS:65,65 MEM:17
  a46(r63,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:80,80 SSE_REGS:80,80 MMX_REGS:80,80 MEM:22
  a47(r121,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a48(r122,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a49(r105,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:41,41 SSE_REGS:41,41 MMX_REGS:41,41 MEM:12
  a50(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:52,52 SSE_REGS:52,52 MMX_REGS:52,52 MEM:16
  a51(r115,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:52,52 SSE_REGS:52,52 MMX_REGS:52,52 MEM:15
  a52(r120,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a53(r119,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a54(r118,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a55(r173,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a56(r172,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a57(r117,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a58(r116,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a59(r114,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a60(r113,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a61(r112,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a62(r111,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a63(r110,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a64(r106,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a65(r109,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a66(r171,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a67(r108,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:10
  a68(r107,l0) costs: AREG:2,2 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:28,28 SSE_REGS:28,28 MMX_REGS:28,28 MEM:8
  a69(r170,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a70(r101,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a71(r100,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a72(r99,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a73(r169,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a74(r98,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a75(r168,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a76(r97,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a77(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:10
  a78(r96,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a79(r95,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a80(r94,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a81(r93,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a82(r167,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a83(r92,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a84(r88,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:6
  a85(r91,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a86(r83,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:10
  a87(r90,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a88(r166,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a89(r89,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a90(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a91(r69,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a92(r87,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a93(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a94(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a95(r165,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a96(r164,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a97(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a98(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:52,52 SSE_REGS:52,52 MMX_REGS:52,52 MEM:14
  a99(r67,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a100(r68,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a101(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a102(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a103(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a104(r163,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a105(r78,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a106(r160,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a107(r162,l0) costs: AREG:0,0 DREG:2,2 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a108(r161,l0) costs: AREG:2,2 DREG:0,0 CREG:2,2 BREG:2,2 SIREG:2,2 DIREG:2,2 AD_REGS:2,2 CLOBBERED_REGS:2,2 Q_REGS:2,2 NON_Q_REGS:2,2 LEGACY_REGS:2,2 GENERAL_REGS:2,2 SSE_FIRST_REG:13,13 SSE_REGS:13,13 MMX_REGS:13,13 MEM:4
  a109(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a110(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:7
  a111(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a112(r159,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a113(r73,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a114(r158,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a115(r72,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:39,39 SSE_REGS:39,39 MMX_REGS:39,39 MEM:11
  a116(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a117(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a118(r157,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 351(l0): point = 0
   Insn 348(l0): point = 3
   Insn 347(l0): point = 5
   Insn 346(l0): point = 7
   Insn 344(l0): point = 10
   Insn 343(l0): point = 12
   Insn 342(l0): point = 14
   Insn 341(l0): point = 16
   Insn 340(l0): point = 18
   Insn 339(l0): point = 20
   Insn 338(l0): point = 22
   Insn 334(l0): point = 25
   Insn 333(l0): point = 27
   Insn 332(l0): point = 29
   Insn 331(l0): point = 31
   Insn 330(l0): point = 33
   Insn 328(l0): point = 36
   Insn 327(l0): point = 38
   Insn 326(l0): point = 40
   Insn 325(l0): point = 42
   Insn 324(l0): point = 44
   Insn 323(l0): point = 46
   Insn 322(l0): point = 48
   Insn 321(l0): point = 50
   Insn 320(l0): point = 52
   Insn 317(l0): point = 55
   Insn 316(l0): point = 57
   Insn 314(l0): point = 60
   Insn 313(l0): point = 62
   Insn 312(l0): point = 64
   Insn 370(l0): point = 67
   Insn 306(l0): point = 69
   Insn 305(l0): point = 71
   Insn 304(l0): point = 73
   Insn 303(l0): point = 75
   Insn 302(l0): point = 77
   Insn 301(l0): point = 79
   Insn 300(l0): point = 81
   Insn 299(l0): point = 83
   Insn 298(l0): point = 85
   Insn 297(l0): point = 87
   Insn 296(l0): point = 89
   Insn 295(l0): point = 91
   Insn 293(l0): point = 94
   Insn 292(l0): point = 96
   Insn 290(l0): point = 99
   Insn 287(l0): point = 102
   Insn 284(l0): point = 105
   Insn 283(l0): point = 107
   Insn 282(l0): point = 109
   Insn 281(l0): point = 111
   Insn 280(l0): point = 113
   Insn 279(l0): point = 115
   Insn 278(l0): point = 117
   Insn 276(l0): point = 120
   Insn 275(l0): point = 122
   Insn 368(l0): point = 125
   Insn 270(l0): point = 127
   Insn 269(l0): point = 129
   Insn 268(l0): point = 131
   Insn 267(l0): point = 133
   Insn 266(l0): point = 135
   Insn 265(l0): point = 137
   Insn 264(l0): point = 139
   Insn 262(l0): point = 142
   Insn 261(l0): point = 144
   Insn 260(l0): point = 146
   Insn 259(l0): point = 148
   Insn 258(l0): point = 150
   Insn 257(l0): point = 152
   Insn 256(l0): point = 154
   Insn 255(l0): point = 156
   Insn 254(l0): point = 158
   Insn 253(l0): point = 160
   Insn 252(l0): point = 162
   Insn 251(l0): point = 164
   Insn 250(l0): point = 166
   Insn 249(l0): point = 168
   Insn 248(l0): point = 170
   Insn 247(l0): point = 172
   Insn 246(l0): point = 174
   Insn 245(l0): point = 176
   Insn 244(l0): point = 178
   Insn 242(l0): point = 180
   Insn 243(l0): point = 182
   Insn 241(l0): point = 184
   Insn 240(l0): point = 186
   Insn 239(l0): point = 188
   Insn 238(l0): point = 190
   Insn 232(l0): point = 193
   Insn 231(l0): point = 195
   Insn 230(l0): point = 197
   Insn 229(l0): point = 199
   Insn 228(l0): point = 201
   Insn 226(l0): point = 204
   Insn 225(l0): point = 206
   Insn 224(l0): point = 208
   Insn 223(l0): point = 210
   Insn 222(l0): point = 212
   Insn 221(l0): point = 214
   Insn 366(l0): point = 217
   Insn 215(l0): point = 219
   Insn 214(l0): point = 221
   Insn 213(l0): point = 223
   Insn 212(l0): point = 225
   Insn 211(l0): point = 227
   Insn 209(l0): point = 230
   Insn 208(l0): point = 232
   Insn 206(l0): point = 235
   Insn 203(l0): point = 238
   Insn 201(l0): point = 241
   Insn 200(l0): point = 243
   Insn 196(l0): point = 246
   Insn 195(l0): point = 248
   Insn 191(l0): point = 251
   Insn 190(l0): point = 253
   Insn 189(l0): point = 255
   Insn 188(l0): point = 257
   Insn 187(l0): point = 259
   Insn 364(l0): point = 262
   Insn 181(l0): point = 265
   Insn 180(l0): point = 267
   Insn 179(l0): point = 269
   Insn 178(l0): point = 271
   Insn 177(l0): point = 273
   Insn 176(l0): point = 275
   Insn 175(l0): point = 277
   Insn 174(l0): point = 279
   Insn 173(l0): point = 281
   Insn 172(l0): point = 283
   Insn 171(l0): point = 285
   Insn 170(l0): point = 287
   Insn 169(l0): point = 289
   Insn 168(l0): point = 291
   Insn 167(l0): point = 293
   Insn 166(l0): point = 295
   Insn 165(l0): point = 297
   Insn 164(l0): point = 299
   Insn 163(l0): point = 301
   Insn 162(l0): point = 303
   Insn 161(l0): point = 305
   Insn 160(l0): point = 307
   Insn 159(l0): point = 309
   Insn 157(l0): point = 311
   Insn 158(l0): point = 313
   Insn 156(l0): point = 315
   Insn 155(l0): point = 317
   Insn 154(l0): point = 319
   Insn 153(l0): point = 321
   Insn 152(l0): point = 323
   Insn 151(l0): point = 325
   Insn 150(l0): point = 327
   Insn 149(l0): point = 329
   Insn 148(l0): point = 331
   Insn 147(l0): point = 333
   Insn 146(l0): point = 335
   Insn 145(l0): point = 337
   Insn 144(l0): point = 339
   Insn 142(l0): point = 341
   Insn 141(l0): point = 343
   Insn 140(l0): point = 345
   Insn 139(l0): point = 347
   Insn 138(l0): point = 349
   Insn 137(l0): point = 351
   Insn 136(l0): point = 353
   Insn 135(l0): point = 355
   Insn 134(l0): point = 357
   Insn 133(l0): point = 359
   Insn 132(l0): point = 361
   Insn 131(l0): point = 363
   Insn 127(l0): point = 366
   Insn 126(l0): point = 368
   Insn 124(l0): point = 371
   Insn 123(l0): point = 373
   Insn 122(l0): point = 375
   Insn 121(l0): point = 377
   Insn 120(l0): point = 379
   Insn 119(l0): point = 381
   Insn 118(l0): point = 383
   Insn 117(l0): point = 385
   Insn 115(l0): point = 387
   Insn 116(l0): point = 389
   Insn 114(l0): point = 391
   Insn 112(l0): point = 394
   Insn 111(l0): point = 396
   Insn 110(l0): point = 398
   Insn 106(l0): point = 401
   Insn 105(l0): point = 403
   Insn 104(l0): point = 405
   Insn 102(l0): point = 408
   Insn 101(l0): point = 410
   Insn 100(l0): point = 412
   Insn 99(l0): point = 414
   Insn 98(l0): point = 416
   Insn 97(l0): point = 418
   Insn 96(l0): point = 420
   Insn 95(l0): point = 422
   Insn 92(l0): point = 425
   Insn 91(l0): point = 427
   Insn 360(l0): point = 430
   Insn 86(l0): point = 432
   Insn 84(l0): point = 435
   Insn 83(l0): point = 437
   Insn 82(l0): point = 439
   Insn 81(l0): point = 441
   Insn 80(l0): point = 443
   Insn 79(l0): point = 445
   Insn 78(l0): point = 447
   Insn 75(l0): point = 450
   Insn 358(l0): point = 453
   Insn 70(l0): point = 455
   Insn 68(l0): point = 458
   Insn 67(l0): point = 460
   Insn 66(l0): point = 462
   Insn 65(l0): point = 464
   Insn 64(l0): point = 466
   Insn 63(l0): point = 468
   Insn 62(l0): point = 470
   Insn 61(l0): point = 472
   Insn 60(l0): point = 474
   Insn 59(l0): point = 476
   Insn 58(l0): point = 478
   Insn 55(l0): point = 481
   Insn 52(l0): point = 484
   Insn 356(l0): point = 487
   Insn 47(l0): point = 489
   Insn 45(l0): point = 492
   Insn 44(l0): point = 494
   Insn 43(l0): point = 496
   Insn 42(l0): point = 498
   Insn 41(l0): point = 500
   Insn 40(l0): point = 502
   Insn 39(l0): point = 504
   Insn 38(l0): point = 506
   Insn 37(l0): point = 508
   Insn 36(l0): point = 511
   Insn 354(l0): point = 514
   Insn 31(l0): point = 516
   Insn 29(l0): point = 519
   Insn 28(l0): point = 521
   Insn 27(l0): point = 523
   Insn 26(l0): point = 525
   Insn 25(l0): point = 527
   Insn 24(l0): point = 529
   Insn 23(l0): point = 531
   Insn 22(l0): point = 533
   Insn 21(l0): point = 535
   Insn 19(l0): point = 537
   Insn 20(l0): point = 539
   Insn 18(l0): point = 541
   Insn 17(l0): point = 543
   Insn 16(l0): point = 545
   Insn 15(l0): point = 547
   Insn 14(l0): point = 549
   Insn 13(l0): point = 551
   Insn 12(l0): point = 553
   Insn 11(l0): point = 555
   Insn 10(l0): point = 557
   Insn 9(l0): point = 559
   Insn 8(l0): point = 561
   Insn 7(l0): point = 563
   Insn 6(l0): point = 565
   Insn 5(l0): point = 567
 a0(r156): [6..7]
 a1(r155): [13..14]
 a2(r154): [21..22]
 a3(r153): [39..40]
 a4(r178): [49..52]
 a5(r152): [58..64]
 a6(r66): [67..99]
 a7(r60): [262..345] [193..245] [67..102]
 a8(r147): [72..89]
 a9(r151): [72..73]
 a10(r104): [262..339] [67..245]
 a11(r150): [74..75]
 a12(r149): [76..85]
 a13(r177): [76..83]
 a14(r148): [86..87]
 a15(r61): [262..343] [193..245] [67..154]
 a16(r146): [90..91]
 a17(r65): [193..210] [67..152]
 a18(r123): [67..214]
 a19(r145): [106..107]
 a20(r144): [108..109]
 a21(r143): [114..117]
 a22(r139): [140..148] [116..124]
 a23(r134): [142..170] [123..124]
 a24(r142): [130..131]
 a25(r141): [132..133]
 a26(r176): [134..135]
 a27(r140): [145..146]
 a28(r138): [149..150]
 a29(r133): [151..176]
 a30(r137): [157..158]
 a31(r136): [159..160]
 a32(r135): [165..166]
 a33(r175): [171..172]
 a34(r132): [175..178]
 a35(r174): [179..182]
 a36(r131): [179..184]
 a37(r130): [185..186]
 a38(r129): [187..188]
 a39(r128): [187..190]
 a40(r127): [196..197]
 a41(r126): [196..199]
 a42(r125): [200..201]
 a43(r124): [207..208]
 a44(r102): [262..341] [211..245]
 a45(r62): [262..325] [215..245]
 a46(r63): [262..323] [217..245]
 a47(r121): [224..227]
 a48(r122): [224..225]
 a49(r105): [262..321] [217..245]
 a50(r64): [262..283] [241..245] [236..238]
 a51(r115): [262..295] [244..245]
 a52(r120): [268..269]
 a53(r119): [270..271]
 a54(r118): [270..277]
 a55(r173): [272..273]
 a56(r172): [278..279]
 a57(r117): [284..285]
 a58(r116): [290..293]
 a59(r114): [296..297]
 a60(r113): [298..299]
 a61(r112): [300..301]
 a62(r111): [304..305]
 a63(r110): [306..307]
 a64(r106): [306..319]
 a65(r109): [308..309]
 a66(r171): [310..313]
 a67(r108): [310..315]
 a68(r107): [316..317]
 a69(r170): [352..357]
 a70(r101): [362..363]
 a71(r100): [371..375] [364..365]
 a72(r99): [376..377]
 a73(r169): [378..379]
 a74(r98): [384..385]
 a75(r168): [386..389]
 a76(r97): [386..391]
 a77(r59): [430..432] [408..425] [392..400]
 a78(r96): [397..398]
 a79(r95): [411..412]
 a80(r94): [413..414]
 a81(r93): [415..416]
 a82(r167): [417..418]
 a83(r92): [421..422]
 a84(r88): [423..447]
 a85(r91): [426..427]
 a86(r83): [435..476] [428..429]
 a87(r90): [438..439]
 a88(r166): [440..441]
 a89(r89): [444..445]
 a90(r82): [448..478]
 a91(r69): [453..455] [448..450]
 a92(r87): [461..462]
 a93(r86): [463..464]
 a94(r85): [465..466]
 a95(r165): [467..468]
 a96(r164): [471..472]
 a97(r84): [471..474]
 a98(r74): [477..533]
 a99(r67): [514..516] [479..481]
 a100(r68): [487..489] [482..484]
 a101(r81): [495..496]
 a102(r80): [497..498]
 a103(r79): [499..500]
 a104(r163): [501..502]
 a105(r78): [505..506]
 a106(r160): [507..508]
 a107(r162): [510..511]
 a108(r161): [508..509]
 a109(r77): [522..523]
 a110(r76): [524..525]
 a111(r75): [526..527]
 a112(r159): [528..529]
 a113(r73): [534..535]
 a114(r158): [536..539]
 a115(r72): [536..541]
 a116(r71): [546..547]
 a117(r70): [548..549]
 a118(r157): [560..565]
Compressing live ranges: from 570 to 199 - 34%
Ranges after the compression:
 a0(r156): [0..1]
 a1(r155): [2..3]
 a2(r154): [4..5]
 a3(r153): [6..7]
 a4(r178): [8..9]
 a5(r152): [10..11]
 a6(r66): [12..21]
 a7(r60): [72..99] [58..71] [12..21]
 a8(r147): [12..19]
 a9(r151): [12..13]
 a10(r104): [72..99] [12..71]
 a11(r150): [14..15]
 a12(r149): [16..17]
 a13(r177): [16..17]
 a14(r148): [18..19]
 a15(r61): [72..99] [58..71] [12..41]
 a16(r146): [20..21]
 a17(r65): [58..63] [12..41]
 a18(r123): [12..65]
 a19(r145): [22..23]
 a20(r144): [24..25]
 a21(r143): [26..27]
 a22(r139): [36..37] [26..29]
 a23(r134): [36..47] [28..29]
 a24(r142): [30..31]
 a25(r141): [32..33]
 a26(r176): [34..35]
 a27(r140): [36..37]
 a28(r138): [38..39]
 a29(r133): [40..51]
 a30(r137): [42..43]
 a31(r136): [44..45]
 a32(r135): [46..47]
 a33(r175): [48..49]
 a34(r132): [50..51]
 a35(r174): [52..53]
 a36(r131): [52..53]
 a37(r130): [54..55]
 a38(r129): [56..57]
 a39(r128): [56..57]
 a40(r127): [58..59]
 a41(r126): [58..59]
 a42(r125): [60..61]
 a43(r124): [62..63]
 a44(r102): [72..99] [64..71]
 a45(r62): [72..99] [66..71]
 a46(r63): [72..99] [66..71]
 a47(r121): [66..67]
 a48(r122): [66..67]
 a49(r105): [72..99] [66..71]
 a50(r64): [72..79] [70..71] [68..69]
 a51(r115): [72..83] [70..71]
 a52(r120): [72..73]
 a53(r119): [74..75]
 a54(r118): [74..77]
 a55(r173): [76..77]
 a56(r172): [78..79]
 a57(r117): [80..81]
 a58(r116): [82..83]
 a59(r114): [84..85]
 a60(r113): [86..87]
 a61(r112): [88..89]
 a62(r111): [90..91]
 a63(r110): [92..93]
 a64(r106): [92..99]
 a65(r109): [94..95]
 a66(r171): [96..97]
 a67(r108): [96..97]
 a68(r107): [98..99]
 a69(r170): [100..101]
 a70(r101): [102..103]
 a71(r100): [106..107] [104..105]
 a72(r99): [108..109]
 a73(r169): [110..111]
 a74(r98): [112..113]
 a75(r168): [114..115]
 a76(r97): [114..115]
 a77(r59): [134..135] [118..129] [116..117]
 a78(r96): [116..117]
 a79(r95): [118..119]
 a80(r94): [120..121]
 a81(r93): [122..123]
 a82(r167): [124..125]
 a83(r92): [126..127]
 a84(r88): [128..141]
 a85(r91): [130..131]
 a86(r83): [136..155] [132..133]
 a87(r90): [136..137]
 a88(r166): [138..139]
 a89(r89): [140..141]
 a90(r82): [142..157]
 a91(r69): [144..145] [142..143]
 a92(r87): [146..147]
 a93(r86): [148..149]
 a94(r85): [150..151]
 a95(r165): [152..153]
 a96(r164): [154..155]
 a97(r84): [154..155]
 a98(r74): [156..188]
 a99(r67): [179..180] [158..159]
 a100(r68): [162..163] [160..161]
 a101(r81): [164..165]
 a102(r80): [166..167]
 a103(r79): [168..169]
 a104(r163): [170..171]
 a105(r78): [172..173]
 a106(r160): [174..175]
 a107(r162): [177..178]
 a108(r161): [175..176]
 a109(r77): [181..182]
 a110(r76): [183..184]
 a111(r75): [185..186]
 a112(r159): [187..188]
 a113(r73): [189..190]
 a114(r158): [191..192]
 a115(r72): [191..192]
 a116(r71): [193..194]
 a117(r70): [195..196]
 a118(r157): [197..198]
  regions=3, blocks=45, points=199
    allocnos=119 (big 0), copies=0, conflicts=0, ranges=141
Disposition:
   77:r59  l0     0    7:r60  l0    43   15:r61  l0    44   45:r62  l0    41
   46:r63  l0     3   50:r64  l0     0   17:r65  l0    41    6:r66  l0     1
   99:r67  l0     0  100:r68  l0     0   91:r69  l0     0  117:r70  l0     0
  116:r71  l0     0  115:r72  l0     0  113:r73  l0     0   98:r74  l0     2
  111:r75  l0     0  110:r76  l0     0  109:r77  l0     0  105:r78  l0     0
  103:r79  l0     0  102:r80  l0     0  101:r81  l0     0   90:r82  l0     4
   86:r83  l0     1   97:r84  l0     2   94:r85  l0     0   93:r86  l0     0
   92:r87  l0     0   84:r88  l0     2   89:r89  l0     0   87:r90  l0     0
   85:r91  l0     0   83:r92  l0     1   81:r93  l0     1   80:r94  l0     1
   79:r95  l0     1   78:r96  l0     1   76:r97  l0     0   74:r98  l0     0
   72:r99  l0     0   71:r100 l0     0   70:r101 l0     0   44:r102 l0   mem
   10:r104 l0   mem   49:r105 l0   mem   64:r106 l0     1   68:r107 l0     0
   67:r108 l0     0   65:r109 l0     0   63:r110 l0     0   62:r111 l0     0
   61:r112 l0     0   60:r113 l0     0   59:r114 l0     0   51:r115 l0    42
   58:r116 l0     0   57:r117 l0     0   54:r118 l0     2   53:r119 l0     1
   52:r120 l0     1   47:r121 l0     0   48:r122 l0     1   18:r123 l0     3
   43:r124 l0     0   42:r125 l0     0   41:r126 l0     1   40:r127 l0     0
   39:r128 l0     1   38:r129 l0     0   37:r130 l0     0   36:r131 l0     0
   34:r132 l0     1   29:r133 l0     0   23:r134 l0     1   32:r135 l0     2
   31:r136 l0     2   30:r137 l0     2   28:r138 l0     0   22:r139 l0     0
   27:r140 l0     2   25:r141 l0     0   24:r142 l0     0   21:r143 l0     1
   20:r144 l0     0   19:r145 l0     0   16:r146 l0     0    8:r147 l0     4
   14:r148 l0     0   12:r149 l0     2   11:r150 l0     0    9:r151 l0     0
    5:r152 l0     0    3:r153 l0     0    2:r154 l0     0    1:r155 l0     0
    0:r156 l0     0  118:r157 l0     0  114:r158 l0     1  112:r159 l0     0
  106:r160 l0     0  108:r161 l0     1  107:r162 l0     0  104:r163 l0     0
   96:r164 l0     0   95:r165 l0     0   88:r166 l0     0   82:r167 l0     1
   75:r168 l0     1   73:r169 l0     0   69:r170 l0     0   66:r171 l0     2
   56:r172 l0     1   55:r173 l0     1   35:r174 l0     1   33:r175 l0     1
   26:r176 l0     0   13:r177 l0     0    4:r178 l0     0
+++Costs: overall 16, reg -10, mem 26, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 157
insn=7, live_throughout: 7, 157, dead_or_set: 1
insn=8, live_throughout: 1, 7, 157, dead_or_set: 4
insn=9, live_throughout: 1, 4, 7, dead_or_set: 5, 157
insn=10, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=11, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=12, live_throughout: 7, dead_or_set: 
insn=13, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 70
insn=15, live_throughout: 7, dead_or_set: 70, 71
insn=16, live_throughout: 7, dead_or_set: 71
insn=17, live_throughout: 7, dead_or_set: 
insn=18, live_throughout: 7, dead_or_set: 72
insn=20, live_throughout: 7, 72, dead_or_set: 158
insn=19, live_throughout: 7, 72, 158, dead_or_set: 
insn=21, live_throughout: 7, dead_or_set: 72, 73, 158
insn=22, live_throughout: 7, dead_or_set: 73, 74
insn=23, live_throughout: 7, 74, dead_or_set: 
insn=24, live_throughout: 7, 74, dead_or_set: 159
insn=25, live_throughout: 7, 74, dead_or_set: 75, 159
insn=26, live_throughout: 7, 74, dead_or_set: 75, 76
insn=27, live_throughout: 7, 74, dead_or_set: 76, 77
insn=28, live_throughout: 7, 74, dead_or_set: 77
insn=29, live_throughout: 7, 74, dead_or_set: 
insn=31, live_throughout: 7, 74, dead_or_set: 67
insn=354, live_throughout: 7, 67, 74, dead_or_set: 
insn=34, live_throughout: 7, 74, dead_or_set: 
insn=36, live_throughout: 7, 74, dead_or_set: 162
insn=37, live_throughout: 7, 74, dead_or_set: 160, 161, 162
insn=38, live_throughout: 7, 74, dead_or_set: 78, 160
insn=39, live_throughout: 7, 74, dead_or_set: 78
insn=40, live_throughout: 7, 74, dead_or_set: 163
insn=41, live_throughout: 7, 74, dead_or_set: 79, 163
insn=42, live_throughout: 7, 74, dead_or_set: 79, 80
insn=43, live_throughout: 7, 74, dead_or_set: 80, 81
insn=44, live_throughout: 7, 74, dead_or_set: 81
insn=45, live_throughout: 7, 74, dead_or_set: 
insn=47, live_throughout: 7, 74, dead_or_set: 68
insn=356, live_throughout: 7, 68, 74, dead_or_set: 
insn=50, live_throughout: 7, 74, dead_or_set: 
insn=52, live_throughout: 7, 74, dead_or_set: 68
insn=53, live_throughout: 7, 68, 74, dead_or_set: 
insn=55, live_throughout: 7, 74, dead_or_set: 67, 68
insn=56, live_throughout: 7, 67, 74, dead_or_set: 
insn=58, live_throughout: 7, 74, dead_or_set: 67, 82
insn=59, live_throughout: 7, 82, dead_or_set: 74, 83
insn=60, live_throughout: 7, 82, 83, dead_or_set: 84
insn=61, live_throughout: 7, 82, 83, 84, dead_or_set: 164
insn=62, live_throughout: 7, 82, 83, dead_or_set: 84, 164
insn=63, live_throughout: 7, 82, 83, dead_or_set: 165
insn=64, live_throughout: 7, 82, 83, dead_or_set: 85, 165
insn=65, live_throughout: 7, 82, 83, dead_or_set: 85, 86
insn=66, live_throughout: 7, 82, 83, dead_or_set: 86, 87
insn=67, live_throughout: 7, 82, 83, dead_or_set: 87
insn=68, live_throughout: 7, 82, 83, dead_or_set: 
insn=70, live_throughout: 7, 82, 83, dead_or_set: 69
insn=358, live_throughout: 7, 69, 82, 83, dead_or_set: 
insn=73, live_throughout: 7, 82, 83, dead_or_set: 
insn=75, live_throughout: 7, 82, 83, dead_or_set: 69
insn=76, live_throughout: 7, 69, 82, 83, dead_or_set: 
insn=78, live_throughout: 7, 83, dead_or_set: 69, 82, 88
insn=79, live_throughout: 7, 83, 88, dead_or_set: 89
insn=80, live_throughout: 7, 83, 88, dead_or_set: 89
insn=81, live_throughout: 7, 83, 88, dead_or_set: 166
insn=82, live_throughout: 7, 83, 88, dead_or_set: 90, 166
insn=83, live_throughout: 7, 83, 88, dead_or_set: 90
insn=84, live_throughout: 7, 83, 88, dead_or_set: 
insn=86, live_throughout: 7, 88, dead_or_set: 59
insn=360, live_throughout: 7, 59, 88, dead_or_set: 
insn=89, live_throughout: 7, 83, 88, dead_or_set: 
insn=91, live_throughout: 7, 88, dead_or_set: 83, 91
insn=92, live_throughout: 7, 88, dead_or_set: 59, 91
insn=93, live_throughout: 7, 59, 88, dead_or_set: 
insn=95, live_throughout: 7, 59, dead_or_set: 88, 92
insn=96, live_throughout: 7, 59, dead_or_set: 92
insn=97, live_throughout: 7, 59, dead_or_set: 167
insn=98, live_throughout: 7, 59, dead_or_set: 93, 167
insn=99, live_throughout: 7, 59, dead_or_set: 93, 94
insn=100, live_throughout: 7, 59, dead_or_set: 94, 95
insn=101, live_throughout: 7, 59, dead_or_set: 95
insn=102, live_throughout: 7, 59, dead_or_set: 
insn=104, live_throughout: 7, dead_or_set: 5
insn=105, live_throughout: 5, 7, dead_or_set: 0
insn=106, live_throughout: 7, dead_or_set: 0, 5
insn=108, live_throughout: 7, 59, dead_or_set: 
insn=110, live_throughout: 7, 59, dead_or_set: 96
insn=111, live_throughout: 7, 59, dead_or_set: 96
insn=112, live_throughout: 7, 59, dead_or_set: 
insn=114, live_throughout: 7, dead_or_set: 59, 97
insn=116, live_throughout: 7, 97, dead_or_set: 168
insn=115, live_throughout: 7, 97, 168, dead_or_set: 
insn=117, live_throughout: 7, dead_or_set: 97, 98, 168
insn=118, live_throughout: 7, dead_or_set: 5, 98
insn=119, live_throughout: 7, dead_or_set: 0, 5
insn=120, live_throughout: 7, dead_or_set: 0, 169
insn=121, live_throughout: 7, dead_or_set: 99, 169
insn=122, live_throughout: 7, dead_or_set: 99, 100
insn=123, live_throughout: 7, 100, dead_or_set: 
insn=124, live_throughout: 7, 100, dead_or_set: 
insn=126, live_throughout: 7, dead_or_set: 5
insn=127, live_throughout: 7, dead_or_set: 5
insn=129, live_throughout: 7, 100, dead_or_set: 
insn=131, live_throughout: 7, dead_or_set: 100, 101
insn=132, live_throughout: 7, dead_or_set: 101
insn=133, live_throughout: 7, dead_or_set: 
insn=134, live_throughout: 7, dead_or_set: 170
insn=135, live_throughout: 7, 170, dead_or_set: 1
insn=136, live_throughout: 1, 7, 170, dead_or_set: 4
insn=137, live_throughout: 1, 4, 7, dead_or_set: 5, 170
insn=138, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=139, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=140, live_throughout: 7, dead_or_set: 60
insn=141, live_throughout: 7, 60, dead_or_set: 61
insn=142, live_throughout: 7, 60, 61, dead_or_set: 
insn=144, live_throughout: 7, 60, 61, dead_or_set: 
insn=145, live_throughout: 7, 60, 61, dead_or_set: 
insn=146, live_throughout: 7, 60, 61, dead_or_set: 
insn=147, live_throughout: 7, 60, 61, dead_or_set: 
insn=148, live_throughout: 7, 60, 61, dead_or_set: 
insn=149, live_throughout: 7, 60, 61, dead_or_set: 
insn=150, live_throughout: 7, 60, 61, dead_or_set: 
insn=151, live_throughout: 7, 60, 61, dead_or_set: 62
insn=152, live_throughout: 7, 60, 61, 62, dead_or_set: 63
insn=153, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 
insn=154, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 106
insn=155, live_throughout: 7, 60, 61, 62, 63, 106, dead_or_set: 107
insn=156, live_throughout: 7, 60, 61, 62, 63, 106, dead_or_set: 107, 108
insn=158, live_throughout: 7, 60, 61, 62, 63, 106, 108, dead_or_set: 171
insn=157, live_throughout: 7, 60, 61, 62, 63, 106, 108, 171, dead_or_set: 
insn=159, live_throughout: 7, 60, 61, 62, 63, 106, dead_or_set: 108, 109, 171
insn=160, live_throughout: 7, 60, 61, 62, 63, 106, dead_or_set: 109, 110
insn=161, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 106, 110, 111
insn=162, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 111
insn=163, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 112
insn=164, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 112, 113
insn=165, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 113, 114
insn=166, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 114, 115
insn=167, live_throughout: 7, 60, 61, 62, 63, 115, dead_or_set: 116
insn=168, live_throughout: 7, 60, 61, 62, 63, 115, 116, dead_or_set: 4
insn=169, live_throughout: 4, 7, 60, 61, 62, 63, 115, dead_or_set: 5, 116
insn=170, live_throughout: 7, 60, 61, 62, 63, 115, dead_or_set: 0, 4, 5
insn=171, live_throughout: 7, 60, 61, 62, 63, 115, dead_or_set: 0, 117
insn=172, live_throughout: 7, 60, 61, 62, 63, 115, dead_or_set: 64, 117
insn=173, live_throughout: 7, 60, 61, 62, 63, 64, 115, dead_or_set: 
insn=174, live_throughout: 7, 60, 61, 62, 63, 64, 115, dead_or_set: 172
insn=175, live_throughout: 7, 60, 61, 62, 63, 64, 115, dead_or_set: 118, 172
insn=176, live_throughout: 7, 60, 61, 62, 63, 64, 115, 118, dead_or_set: 
insn=177, live_throughout: 7, 60, 61, 62, 63, 64, 115, 118, dead_or_set: 173
insn=178, live_throughout: 7, 60, 61, 62, 63, 64, 115, 118, dead_or_set: 119, 173
insn=179, live_throughout: 7, 60, 61, 62, 63, 64, 115, dead_or_set: 118, 119, 120
insn=180, live_throughout: 7, 60, 61, 62, 63, 64, 115, dead_or_set: 120
insn=181, live_throughout: 7, 60, 61, 62, 63, 64, 115, dead_or_set: 
insn=364, live_throughout: 7, 60, 61, 62, 63, 64, 115, dead_or_set: 
insn=185, live_throughout: 7, dead_or_set: 
insn=187, live_throughout: 7, dead_or_set: 1
insn=188, live_throughout: 1, 7, dead_or_set: 4
insn=189, live_throughout: 1, 4, 7, dead_or_set: 5
insn=190, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=191, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=193, live_throughout: 7, dead_or_set: 
insn=195, live_throughout: 7, dead_or_set: 5
insn=196, live_throughout: 7, dead_or_set: 5
insn=363, live_throughout: 7, 60, 61, 62, 63, 64, 115, dead_or_set: 
insn=200, live_throughout: 7, 60, 61, 62, 63, 64, dead_or_set: 115
insn=201, live_throughout: 7, 60, 61, 62, 63, 64, dead_or_set: 
insn=203, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 64
insn=204, live_throughout: 7, 60, 61, 62, 63, 64, dead_or_set: 
insn=206, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 64
insn=216, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 
insn=208, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 
insn=209, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 
insn=211, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 121
insn=212, live_throughout: 7, 60, 61, 62, 63, 121, dead_or_set: 122
insn=213, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 121, 122
insn=214, live_throughout: 7, 60, 61, 63, dead_or_set: 62
insn=215, live_throughout: 7, 60, 61, 62, dead_or_set: 63
insn=366, live_throughout: 7, 60, 61, 62, 63, dead_or_set: 
insn=219, live_throughout: 7, 60, 61, 62, dead_or_set: 
insn=221, live_throughout: 7, 60, 61, dead_or_set: 62, 123
insn=222, live_throughout: 7, 60, 61, 123, dead_or_set: 
insn=223, live_throughout: 7, 60, 61, 123, dead_or_set: 65
insn=224, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 124
insn=225, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 124
insn=226, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 
insn=228, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 125
insn=229, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 125, 126
insn=230, live_throughout: 7, 60, 61, 65, 123, 126, dead_or_set: 127
insn=231, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 126, 127
insn=232, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 
insn=236, live_throughout: 7, 123, dead_or_set: 
insn=238, live_throughout: 7, 123, dead_or_set: 128
insn=239, live_throughout: 7, 123, 128, dead_or_set: 129
insn=240, live_throughout: 7, 123, dead_or_set: 128, 129, 130
insn=241, live_throughout: 7, 123, dead_or_set: 130, 131
insn=243, live_throughout: 7, 123, 131, dead_or_set: 174
insn=242, live_throughout: 7, 123, 131, 174, dead_or_set: 
insn=244, live_throughout: 7, 123, dead_or_set: 131, 132, 174
insn=245, live_throughout: 7, 123, 132, dead_or_set: 133
insn=246, live_throughout: 7, 123, 133, dead_or_set: 132
insn=247, live_throughout: 7, 123, 133, dead_or_set: 175
insn=248, live_throughout: 7, 123, 133, dead_or_set: 134, 175
insn=249, live_throughout: 7, 123, 133, 134, dead_or_set: 
insn=250, live_throughout: 7, 123, 133, 134, dead_or_set: 135
insn=251, live_throughout: 7, 123, 133, 134, dead_or_set: 135
insn=252, live_throughout: 7, 123, 133, 134, dead_or_set: 
insn=253, live_throughout: 7, 123, 133, 134, dead_or_set: 136
insn=254, live_throughout: 7, 123, 133, 134, dead_or_set: 136, 137
insn=255, live_throughout: 7, 123, 133, 134, dead_or_set: 137
insn=256, live_throughout: 7, 123, 133, 134, dead_or_set: 61
insn=257, live_throughout: 7, 61, 123, 133, 134, dead_or_set: 65
insn=258, live_throughout: 7, 61, 65, 123, 134, dead_or_set: 133, 138
insn=259, live_throughout: 7, 61, 65, 123, 134, dead_or_set: 138, 139
insn=260, live_throughout: 7, 61, 65, 123, 134, 139, dead_or_set: 140
insn=261, live_throughout: 7, 61, 65, 123, 134, 139, dead_or_set: 140
insn=262, live_throughout: 7, 61, 65, 123, 134, 139, dead_or_set: 
insn=264, live_throughout: 7, 61, 65, 123, dead_or_set: 5, 139
insn=265, live_throughout: 7, 61, 65, 123, dead_or_set: 0, 5
insn=266, live_throughout: 7, 61, 65, 123, dead_or_set: 0, 176
insn=267, live_throughout: 7, 61, 65, 123, dead_or_set: 141, 176
insn=268, live_throughout: 7, 61, 65, 123, dead_or_set: 141, 142
insn=269, live_throughout: 7, 61, 65, 123, dead_or_set: 142
insn=270, live_throughout: 7, 61, 65, 123, dead_or_set: 
insn=368, live_throughout: 7, 61, 65, 123, dead_or_set: 
insn=273, live_throughout: 7, 61, 65, 123, 134, 139, dead_or_set: 
insn=275, live_throughout: 7, 61, 65, 123, 139, dead_or_set: 134
insn=276, live_throughout: 7, 61, 65, 123, 139, dead_or_set: 
insn=278, live_throughout: 7, 61, 65, 123, 139, dead_or_set: 143
insn=279, live_throughout: 7, 61, 65, 123, 143, dead_or_set: 4, 139
insn=280, live_throughout: 4, 7, 61, 65, 123, dead_or_set: 5, 143
insn=281, live_throughout: 7, 61, 65, 123, dead_or_set: 0, 4, 5
insn=282, live_throughout: 7, 61, 65, 123, dead_or_set: 0, 144
insn=283, live_throughout: 7, 61, 65, 123, dead_or_set: 144, 145
insn=284, live_throughout: 7, 61, 65, 123, dead_or_set: 145
insn=285, live_throughout: 7, 61, 65, 123, dead_or_set: 
insn=287, live_throughout: 7, 61, 65, 123, dead_or_set: 60
insn=288, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 
insn=290, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 66
insn=307, live_throughout: 7, 60, 61, 65, 66, 123, dead_or_set: 
insn=292, live_throughout: 7, 60, 61, 65, 66, 123, dead_or_set: 
insn=293, live_throughout: 7, 60, 61, 65, 66, 123, dead_or_set: 
insn=295, live_throughout: 7, 60, 61, 65, 66, 123, dead_or_set: 146
insn=296, live_throughout: 7, 60, 61, 65, 66, 123, dead_or_set: 146, 147
insn=297, live_throughout: 7, 60, 61, 65, 66, 123, 147, dead_or_set: 148
insn=298, live_throughout: 7, 60, 61, 65, 66, 123, 147, dead_or_set: 148, 149
insn=299, live_throughout: 7, 60, 61, 65, 66, 123, 147, 149, dead_or_set: 177
insn=300, live_throughout: 7, 60, 61, 65, 66, 123, 147, 149, dead_or_set: 177
insn=301, live_throughout: 7, 60, 61, 65, 66, 123, 147, 149, dead_or_set: 177
insn=302, live_throughout: 7, 60, 61, 65, 66, 123, 147, 149, dead_or_set: 177
insn=303, live_throughout: 7, 60, 61, 65, 66, 123, 147, dead_or_set: 149, 150, 177
insn=304, live_throughout: 7, 60, 61, 65, 66, 123, 147, dead_or_set: 150, 151
insn=305, live_throughout: 7, 60, 61, 65, 66, 123, dead_or_set: 147, 151
insn=306, live_throughout: 7, 60, 61, 65, 123, dead_or_set: 66
insn=370, live_throughout: 7, 60, 61, 65, 66, 123, dead_or_set: 
insn=310, live_throughout: 7, dead_or_set: 
insn=312, live_throughout: 7, dead_or_set: 152
insn=313, live_throughout: 7, 152, dead_or_set: 
insn=314, live_throughout: 7, 152, dead_or_set: 
insn=316, live_throughout: 7, dead_or_set: 5, 152
insn=317, live_throughout: 7, dead_or_set: 5
insn=318, live_throughout: 7, dead_or_set: 
insn=320, live_throughout: 7, dead_or_set: 178
insn=321, live_throughout: 7, 178, dead_or_set: 1
insn=322, live_throughout: 1, 7, dead_or_set: 4, 178
insn=323, live_throughout: 1, 4, 7, dead_or_set: 5
insn=324, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=325, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=326, live_throughout: 7, dead_or_set: 153
insn=327, live_throughout: 7, dead_or_set: 153
insn=328, live_throughout: 7, dead_or_set: 
insn=330, live_throughout: 7, dead_or_set: 1
insn=331, live_throughout: 1, 7, dead_or_set: 4
insn=332, live_throughout: 1, 4, 7, dead_or_set: 5
insn=333, live_throughout: 1, 4, 5, 7, dead_or_set: 0
insn=334, live_throughout: 7, dead_or_set: 0, 1, 4, 5
insn=336, live_throughout: 7, dead_or_set: 
insn=338, live_throughout: 7, dead_or_set: 154
insn=339, live_throughout: 7, dead_or_set: 5, 154
insn=340, live_throughout: 7, dead_or_set: 5
insn=341, live_throughout: 7, dead_or_set: 
insn=342, live_throughout: 7, dead_or_set: 155
insn=343, live_throughout: 7, dead_or_set: 155
insn=344, live_throughout: 7, dead_or_set: 
insn=346, live_throughout: 7, dead_or_set: 156
insn=347, live_throughout: 7, dead_or_set: 5, 156
insn=348, live_throughout: 7, dead_or_set: 5
insn=349, live_throughout: 7, dead_or_set: 
insn=351, live_throughout: 7, dead_or_set: 
changing reg in insn 92
changing reg in insn 86
changing reg in insn 114
changing reg in insn 287
changing reg in insn 140
changing reg in insn 305
changing reg in insn 256
changing reg in insn 141
changing reg in insn 296
changing reg in insn 214
changing reg in insn 151
changing reg in insn 221
changing reg in insn 214
changing reg in insn 213
changing reg in insn 215
changing reg in insn 152
changing reg in insn 215
changing reg in insn 212
changing reg in insn 208
changing reg in insn 155
changing reg in insn 203
changing reg in insn 172
changing reg in insn 206
changing reg in insn 173
changing reg in insn 257
changing reg in insn 223
changing reg in insn 295
changing reg in insn 306
changing reg in insn 290
changing reg in insn 306
changing reg in insn 298
changing reg in insn 295
changing reg in insn 292
changing reg in insn 55
changing reg in insn 31
changing reg in insn 58
changing reg in insn 52
changing reg in insn 47
changing reg in insn 55
changing reg in insn 75
changing reg in insn 70
changing reg in insn 78
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 18
changing reg in insn 21
changing reg in insn 19
changing reg in insn 21
changing reg in insn 22
changing reg in insn 22
changing reg in insn 59
changing reg in insn 37
changing reg in insn 37
changing reg in insn 23
changing reg in insn 25
changing reg in insn 26
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
changing reg in insn 38
changing reg in insn 39
changing reg in insn 41
changing reg in insn 42
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 58
changing reg in insn 78
changing reg in insn 59
changing reg in insn 91
changing reg in insn 60
changing reg in insn 60
changing reg in insn 62
changing reg in insn 64
changing reg in insn 65
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 78
changing reg in insn 95
changing reg in insn 79
changing reg in insn 80
changing reg in insn 82
changing reg in insn 83
changing reg in insn 91
changing reg in insn 92
changing reg in insn 95
changing reg in insn 96
changing reg in insn 98
changing reg in insn 99
changing reg in insn 99
changing reg in insn 100
changing reg in insn 101
changing reg in insn 110
changing reg in insn 111
changing reg in insn 114
changing reg in insn 117
changing reg in insn 115
changing reg in insn 117
changing reg in insn 118
changing reg in insn 121
changing reg in insn 122
changing reg in insn 122
changing reg in insn 131
changing reg in insn 123
changing reg in insn 131
changing reg in insn 132
changing reg in insn 154
changing reg in insn 161
changing reg in insn 155
changing reg in insn 156
changing reg in insn 156
changing reg in insn 159
changing reg in insn 157
changing reg in insn 159
changing reg in insn 160
changing reg in insn 160
changing reg in insn 161
changing reg in insn 161
changing reg in insn 162
changing reg in insn 163
changing reg in insn 164
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 166
changing reg in insn 200
changing reg in insn 176
changing reg in insn 168
changing reg in insn 167
changing reg in insn 169
changing reg in insn 171
changing reg in insn 172
changing reg in insn 175
changing reg in insn 179
changing reg in insn 178
changing reg in insn 179
changing reg in insn 179
changing reg in insn 180
changing reg in insn 211
changing reg in insn 213
changing reg in insn 212
changing reg in insn 213
changing reg in insn 221
changing reg in insn 292
changing reg in insn 250
changing reg in insn 245
changing reg in insn 229
changing reg in insn 222
changing reg in insn 224
changing reg in insn 225
changing reg in insn 228
changing reg in insn 229
changing reg in insn 229
changing reg in insn 231
changing reg in insn 230
changing reg in insn 231
changing reg in insn 238
changing reg in insn 240
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 241
changing reg in insn 244
changing reg in insn 242
changing reg in insn 244
changing reg in insn 246
changing reg in insn 245
changing reg in insn 258
changing reg in insn 246
changing reg in insn 248
changing reg in insn 275
changing reg in insn 250
changing reg in insn 251
changing reg in insn 253
changing reg in insn 254
changing reg in insn 254
changing reg in insn 255
changing reg in insn 258
changing reg in insn 259
changing reg in insn 259
changing reg in insn 279
changing reg in insn 264
changing reg in insn 260
changing reg in insn 261
changing reg in insn 267
changing reg in insn 268
changing reg in insn 268
changing reg in insn 269
changing reg in insn 278
changing reg in insn 280
changing reg in insn 282
changing reg in insn 283
changing reg in insn 283
changing reg in insn 284
changing reg in insn 295
changing reg in insn 296
changing reg in insn 296
changing reg in insn 305
changing reg in insn 297
changing reg in insn 298
changing reg in insn 298
changing reg in insn 303
changing reg in insn 301
changing reg in insn 299
changing reg in insn 303
changing reg in insn 301
changing reg in insn 303
changing reg in insn 304
changing reg in insn 304
changing reg in insn 305
changing reg in insn 312
changing reg in insn 316
changing reg in insn 313
changing reg in insn 326
changing reg in insn 327
changing reg in insn 338
changing reg in insn 339
changing reg in insn 342
changing reg in insn 343
changing reg in insn 346
changing reg in insn 347
changing reg in insn 6
changing reg in insn 9
changing reg in insn 20
changing reg in insn 21
changing reg in insn 24
changing reg in insn 25
changing reg in insn 37
changing reg in insn 38
changing reg in insn 37
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 40
changing reg in insn 41
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 64
changing reg in insn 81
changing reg in insn 82
changing reg in insn 97
changing reg in insn 98
changing reg in insn 116
changing reg in insn 117
changing reg in insn 120
changing reg in insn 121
changing reg in insn 134
changing reg in insn 137
changing reg in insn 158
changing reg in insn 159
changing reg in insn 174
changing reg in insn 175
changing reg in insn 177
changing reg in insn 178
changing reg in insn 243
changing reg in insn 244
changing reg in insn 247
changing reg in insn 248
changing reg in insn 266
changing reg in insn 267
changing reg in insn 302
changing reg in insn 301
changing reg in insn 300
changing reg in insn 299
changing reg in insn 303
changing reg in insn 302
changing reg in insn 301
changing reg in insn 300
changing reg in insn 320
changing reg in insn 322
Spilling for insn 142.
Using reg 0 for reload 0
Spilling for insn 144.
Using reg 0 for reload 0
Spilling for insn 153.
Using reg 0 for reload 0
Spilling for insn 155.
Spilling for insn 240.
Using reg 2 for reload 0

Reloads for insn # 142
Reload 0: reload_out (DI) = (reg:DI 102 [ D.1608 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:DI 102 [ D.1608 ])
	reload_reg_rtx: (reg:DI 0 ax)

Reloads for insn # 144
Reload 0: reload_out (SI) = (reg:SI 104 [ D.1610 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 104 [ D.1610 ])
	reload_reg_rtx: (reg:SI 2 cx)

Reloads for insn # 153
Reload 0: reload_out (SI) = (reg:SI 105 [ D.1617 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 105 [ D.1617 ])
	reload_reg_rtx: (reg:SI 0 ax)

Reloads for insn # 155
Reload 0: reload_in (SI) = (reg:SI 105 [ D.1617 ])
	reload_out (SI) = (reg:SI 0 ax [orig:107 D.1731 ] [107])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:SI 105 [ D.1617 ])
	reload_out_reg: (reg:SI 0 ax [orig:107 D.1731 ] [107])
	reload_reg_rtx: (reg:SI 0 ax [orig:107 D.1731 ] [107])

Reloads for insn # 240
Reload 0: reload_in (DI) = (reg:DI 1 dx [orig:128 D.1759 ] [128])
	reload_out (DI) = (reg:DI 0 ax [orig:130 D.1761 ] [130])
	GENERAL_REGS, RELOAD_OTHER (opnum = 0)
	reload_in_reg: (reg:DI 1 dx [orig:128 D.1759 ] [128])
	reload_out_reg: (reg:DI 0 ax [orig:130 D.1761 ] [130])
	reload_reg_rtx: (reg:DI 2 cx)
deleting insn with uid = 26.
deleting insn with uid = 38.
deleting insn with uid = 42.
deleting insn with uid = 55.
deleting insn with uid = 65.
deleting insn with uid = 99.
deleting insn with uid = 114.
deleting insn with uid = 120.
deleting insn with uid = 121.
deleting insn with uid = 122.
deleting insn with uid = 131.
deleting insn with uid = 171.
deleting insn with uid = 172.
deleting insn with uid = 259.
deleting insn with uid = 266.
deleting insn with uid = 267.
deleting insn with uid = 268.
deleting insn with uid = 282.
deleting insn with uid = 283.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 106.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 127.
verify found no changes in insn with uid = 139.
verify found no changes in insn with uid = 170.
verify found no changes in insn with uid = 191.
verify found no changes in insn with uid = 196.
verify found no changes in insn with uid = 265.
verify found no changes in insn with uid = 281.
verify found no changes in insn with uid = 317.
verify found no changes in insn with uid = 325.
verify found no changes in insn with uid = 334.
verify found no changes in insn with uid = 340.
verify found no changes in insn with uid = 348.


init_random_seed

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={88d,81u} r1={45d,31u} r2={29d,18u,2e} r3={3d,9u} r4={25d,9u} r5={31d,15u} r6={1d,109u} r7={1d,59u} r8={15d} r9={15d} r10={15d} r11={15d} r12={15d} r13={15d} r14={15d} r15={15d} r17={80d,30u} r18={15d} r19={15d} r20={1d,1u} r21={16d} r22={16d} r23={16d} r24={16d} r25={16d} r26={16d} r27={16d} r28={16d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={16d} r38={16d} r39={15d} r40={15d} r41={4d,4u} r42={1d,3u} r43={2d,1u} r44={2d,1u} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} 
;;    total ref usage 1266{893d,371u,2e} in 250{235 regular + 15 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 70 71 72 73 74 75 76 77 157 158 159

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])
        (const_int 0 [0])) Test6.f08:25 62 {*movdi_internal_rex64}
     (nil))

(insn 6 5 7 2 (parallel [
            (set (reg:DI 0 ax [157])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -56 [0xffffffffffffffc8])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:27 253 {*adddi_1}
     (nil))

(insn 7 6 8 2 (set (reg:DI 1 dx)
        (const_int 0 [0])) Test6.f08:27 62 {*movdi_internal_rex64}
     (nil))

(insn 8 7 9 2 (set (reg:DI 4 si)
        (const_int 0 [0])) Test6.f08:27 62 {*movdi_internal_rex64}
     (nil))

(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg:DI 0 ax [157])) Test6.f08:27 62 {*movdi_internal_rex64}
     (nil))

(insn 10 9 11 2 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:27 66 {*movqi_internal}
     (nil))

(call_insn 11 10 12 2 (call (mem:QI (symbol_ref:DI ("_gfortran_random_seed_i4") [flags 0x41]  <function_decl 0x7fc95dbed700 _gfortran_random_seed_i4>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:27 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))

(insn 12 11 13 2 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 seed.dtype+0 S8 A64])
        (const_int 265 [0x109])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 13 12 14 2 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 seed.dim[0].lbound+0 S8 A64])
        (const_int 1 [0x1])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 14 13 15 2 (set (reg:SI 0 ax [orig:70 n.12 ] [70])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 n+0 S4 A64])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 15 14 16 2 (set (reg:DI 0 ax [orig:71 D.1686 ] [71])
        (sign_extend:DI (reg:SI 0 ax [orig:70 n.12 ] [70]))) Test6.f08:28 126 {*extendsidi2_rex64}
     (nil))

(insn 16 15 17 2 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 seed.dim[0].ubound+0 S8 A64])
        (reg:DI 0 ax [orig:71 D.1686 ] [71])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 17 16 18 2 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 seed.dim[0].stride+0 S8 A64])
        (const_int 1 [0x1])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 18 17 20 2 (set (reg:SI 0 ax [orig:72 n.13 ] [72])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 n+0 S4 A64])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 20 18 19 2 (set (reg:SI 1 dx [158])
        (const_int 0 [0])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 19 20 21 2 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:72 n.13 ] [72])
            (const_int 0 [0]))) Test6.f08:28 2 {*cmpsi_ccno_1}
     (nil))

(insn 21 19 22 2 (set (reg:SI 0 ax [orig:73 D.1688 ] [73])
        (if_then_else:SI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 0 ax [orig:72 n.13 ] [72])
            (reg:SI 1 dx [158]))) Test6.f08:28 885 {*movsicc_noc}
     (nil))

(insn 22 21 23 2 (set (reg:DI 2 cx [orig:74 D.1595 ] [74])
        (sign_extend:DI (reg:SI 0 ax [orig:73 D.1688 ] [73]))) Test6.f08:28 126 {*extendsidi2_rex64}
     (nil))

(insn 23 22 24 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 2 cx [orig:74 D.1595 ] [74])
            (const_int 0 [0]))) Test6.f08:28 3 {*cmpdi_ccno_1}
     (nil))

(insn 24 23 25 2 (set (reg:QI 0 ax [159])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) Test6.f08:28 585 {*setcc_qi}
     (nil))

(insn 25 24 27 2 (set (reg:DI 0 ax [orig:75 D.1690 ] [75])
        (zero_extend:DI (reg:QI 0 ax [159]))) Test6.f08:28 116 {zero_extendqidi2}
     (nil))

(insn 27 25 28 2 (set (reg:SI 0 ax [orig:77 D.1692 ] [77])
        (reg:SI 0 ax [orig:76 D.1691 ] [76])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 28 27 29 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:77 D.1692 ] [77])
            (const_int 0 [0]))) Test6.f08:28 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 29 28 30 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 34)
            (pc))) Test6.f08:28 591 {*jcc_1}
     (nil)
 -> 34)
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 74


;; Succ edge  3 (fallthru)
;; Succ edge  4

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 74
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 67

;; Pred edge  2 (fallthru)
(note 30 29 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 354 3 (set (reg:SI 0 ax [orig:67 iftmp.14 ] [67])
        (const_int 0 [0])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(jump_insn 354 31 355 3 (set (pc)
        (label_ref 56)) 606 {jump}
     (nil)
 -> 56)
;; End of basic block 3 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67 74


;; Succ edge  8 [100.0%] 

(barrier 355 354 34)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 74
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 74
;; lr  def 	 17 [flags] 78 79 80 81 160 161 162 163

;; Pred edge  2
(code_label 34 355 35 4 13 "" [1 uses])

(note 35 34 36 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 37 4 (set (reg:DI 0 ax [162])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 37 36 39 4 (parallel [
            (set (reg:DI 0 ax [160])
                (div:DI (reg:DI 0 ax [162])
                    (reg:DI 2 cx [orig:74 D.1595 ] [74])))
            (set (reg:DI 1 dx [161])
                (mod:DI (reg:DI 0 ax [162])
                    (reg:DI 2 cx [orig:74 D.1595 ] [74])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:28 354 {*divmoddi4}
     (nil))

(insn 39 37 40 4 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:DI 0 ax [orig:78 D.1697 ] [78])
            (const_int 0 [0]))) Test6.f08:28 3 {*cmpdi_ccno_1}
     (nil))

(insn 40 39 41 4 (set (reg:QI 0 ax [163])
        (le:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) Test6.f08:28 585 {*setcc_qi}
     (nil))

(insn 41 40 43 4 (set (reg:DI 0 ax [orig:79 D.1698 ] [79])
        (zero_extend:DI (reg:QI 0 ax [163]))) Test6.f08:28 116 {zero_extendqidi2}
     (nil))

(insn 43 41 44 4 (set (reg:SI 0 ax [orig:81 D.1700 ] [81])
        (reg:SI 0 ax [orig:80 D.1699 ] [80])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 44 43 45 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:81 D.1700 ] [81])
            (const_int 0 [0]))) Test6.f08:28 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 45 44 46 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 50)
            (pc))) Test6.f08:28 591 {*jcc_1}
     (nil)
 -> 50)
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 74


;; Succ edge  5 (fallthru)
;; Succ edge  6

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 74
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 68

;; Pred edge  4 (fallthru)
(note 46 45 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 47 46 356 5 (set (reg:SI 0 ax [orig:68 iftmp.15 ] [68])
        (const_int 1 [0x1])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(jump_insn 356 47 357 5 (set (pc)
        (label_ref 53)) 606 {jump}
     (nil)
 -> 53)
;; End of basic block 5 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 74


;; Succ edge  7 [100.0%] 

(barrier 357 356 50)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 74
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 68

;; Pred edge  4
(code_label 50 357 51 6 15 "" [1 uses])

(note 51 50 52 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 6 (set (reg:SI 0 ax [orig:68 iftmp.15 ] [68])
        (const_int 0 [0])) Test6.f08:28 64 {*movsi_internal}
     (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 74


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68 74
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 68
;; lr  def 	 67

;; Pred edge  6 (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 53 52 54 7 16 "" [1 uses])

(note 54 53 56 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67 74


;; Succ edge  8 (fallthru)

;; Start of basic block ( 7 3) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67 74
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 67 74
;; lr  def 	 17 [flags] 82 83 84 85 86 87 164 165

;; Pred edge  7 (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 56 54 57 8 14 "" [1 uses])

(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 8 (set (reg:SI 4 si [orig:82 D.1596 ] [82])
        (reg:SI 0 ax [orig:67 iftmp.14 ] [67])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 59 58 60 8 (set (reg:DI 1 dx [orig:83 D.1597 ] [83])
        (reg:DI 2 cx [orig:74 D.1595 ] [74])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 60 59 61 8 (set (reg:DI 2 cx [orig:84 D.1705 ] [84])
        (reg:DI 1 dx [orig:83 D.1597 ] [83])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 61 60 62 8 (set (reg:DI 0 ax [164])
        (const_int 4611686018427387903 [0x3fffffffffffffff])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 62 61 63 8 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 2 cx [orig:84 D.1705 ] [84])
            (reg:DI 0 ax [164]))) Test6.f08:28 7 {*cmpdi_1}
     (nil))

(insn 63 62 64 8 (set (reg:QI 0 ax [165])
        (gtu:QI (reg:CC 17 flags)
            (const_int 0 [0]))) Test6.f08:28 585 {*setcc_qi}
     (nil))

(insn 64 63 66 8 (set (reg:DI 0 ax [orig:85 D.1706 ] [85])
        (zero_extend:DI (reg:QI 0 ax [165]))) Test6.f08:28 116 {zero_extendqidi2}
     (nil))

(insn 66 64 67 8 (set (reg:SI 0 ax [orig:87 D.1708 ] [87])
        (reg:SI 0 ax [orig:86 D.1707 ] [86])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 67 66 68 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:87 D.1708 ] [87])
            (const_int 0 [0]))) Test6.f08:28 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 68 67 69 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 73)
            (pc))) Test6.f08:28 591 {*jcc_1}
     (nil)
 -> 73)
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 83


;; Succ edge  9 (fallthru)
;; Succ edge  10

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 69

;; Pred edge  8 (fallthru)
(note 69 68 70 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 358 9 (set (reg:SI 0 ax [orig:69 iftmp.16 ] [69])
        (const_int 1 [0x1])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(jump_insn 358 70 359 9 (set (pc)
        (label_ref 76)) 606 {jump}
     (nil)
 -> 76)
;; End of basic block 9 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69 82 83


;; Succ edge  11 [100.0%] 

(barrier 359 358 73)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 82 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 69

;; Pred edge  8
(code_label 73 359 74 10 17 "" [1 uses])

(note 74 73 75 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 75 74 76 10 (set (reg:SI 0 ax [orig:69 iftmp.16 ] [69])
        (const_int 0 [0])) Test6.f08:28 64 {*movsi_internal}
     (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69 82 83


;; Succ edge  11 (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69 82 83
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 69 82
;; lr  def 	 17 [flags] 88 89 90 166

;; Pred edge  10 (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 76 75 77 11 18 "" [1 uses])

(note 77 76 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 78 77 79 11 (parallel [
            (set (reg:SI 2 cx [orig:88 D.1598 ] [88])
                (plus:SI (reg:SI 0 ax [orig:69 iftmp.16 ] [69])
                    (reg:SI 4 si [orig:82 D.1596 ] [82])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:28 252 {*addsi_1}
     (nil))

(insn 79 78 80 11 (set (reg:SI 0 ax [orig:89 n.17 ] [89])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 n+0 S4 A64])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 80 79 81 11 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg:SI 0 ax [orig:89 n.17 ] [89])
            (const_int 0 [0]))) Test6.f08:28 2 {*cmpsi_ccno_1}
     (nil))

(insn 81 80 82 11 (set (reg:QI 0 ax [166])
        (le:QI (reg:CCNO 17 flags)
            (const_int 0 [0]))) Test6.f08:28 585 {*setcc_qi}
     (nil))

(insn 82 81 83 11 (parallel [
            (set (reg:SI 0 ax [orig:90 D.1600 ] [90])
                (zero_extend:SI (reg:QI 0 ax [166])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:28 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 83 82 84 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:90 D.1600 ] [90])
            (const_int 0 [0]))) Test6.f08:28 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 84 83 85 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 89)
            (pc))) Test6.f08:28 591 {*jcc_1}
     (nil)
 -> 89)
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 88


;; Succ edge  12 (fallthru)
;; Succ edge  13

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 59

;; Pred edge  11 (fallthru)
(note 85 84 86 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 360 12 (set (reg:DI 0 ax [orig:59 size.0 ] [59])
        (const_int 0 [0])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(jump_insn 360 86 361 12 (set (pc)
        (label_ref 93)) 606 {jump}
     (nil)
 -> 93)
;; End of basic block 12 -> ( 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 88


;; Succ edge  14 [100.0%] 

(barrier 361 360 89)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 83
;; lr  def 	 17 [flags] 59 91

;; Pred edge  11
(code_label 89 361 90 13 19 "" [1 uses])

(note 90 89 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 91 90 92 13 (set (reg:DI 0 ax [orig:91 D.1716 ] [91])
        (reg:DI 1 dx [orig:83 D.1597 ] [83])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 92 91 93 13 (parallel [
            (set (reg:DI 0 ax [orig:59 size.0 ] [59])
                (ashift:DI (reg:DI 0 ax [orig:91 D.1716 ] [91])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:28 498 {*ashldi3_1}
     (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 88


;; Succ edge  14 (fallthru)

;; Start of basic block ( 13 12) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 88
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88
;; lr  def 	 17 [flags] 92 93 94 95 167

;; Pred edge  13 (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 93 92 94 14 20 "" [1 uses])

(note 94 93 95 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 14 (set (reg:SI 1 dx [orig:92 overflow.1 ] [92])
        (reg:SI 2 cx [orig:88 D.1598 ] [88])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 96 95 97 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:92 overflow.1 ] [92])
            (const_int 0 [0]))) Test6.f08:28 2 {*cmpsi_ccno_1}
     (nil))

(insn 97 96 98 14 (set (reg:QI 1 dx [167])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) Test6.f08:28 585 {*setcc_qi}
     (nil))

(insn 98 97 100 14 (set (reg:DI 1 dx [orig:93 D.1717 ] [93])
        (zero_extend:DI (reg:QI 1 dx [167]))) Test6.f08:28 116 {zero_extendqidi2}
     (nil))

(insn 100 98 101 14 (set (reg:SI 1 dx [orig:95 D.1719 ] [95])
        (reg:SI 1 dx [orig:94 D.1718 ] [94])) Test6.f08:28 64 {*movsi_internal}
     (nil))

(insn 101 100 102 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:95 D.1719 ] [95])
            (const_int 0 [0]))) Test6.f08:28 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 102 101 103 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 108)
            (pc))) Test6.f08:28 591 {*jcc_1}
     (nil)
 -> 108)
;; End of basic block 14 -> ( 15 16)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  15 (fallthru)
;; Succ edge  16

;; Start of basic block ( 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  14 (fallthru)
(note 103 102 104 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 104 103 105 15 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC5") [flags 0x2]  <var_decl 0x7fc95dc27780 *.LC5>)) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 105 104 106 15 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:28 66 {*movqi_internal}
     (nil))

(call_insn 106 105 107 15 (call (mem:QI (symbol_ref:DI ("_gfortran_runtime_error") [flags 0x41]  <function_decl 0x7fc95ddde200 _gfortran_runtime_error>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:28 618 {*call_0}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))
;; End of basic block 15 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 107 106 108)

;; Start of basic block ( 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 96

;; Pred edge  14
(code_label 108 107 109 16 21 "" [1 uses])

(note 109 108 110 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 110 109 111 16 (set (reg/f:DI 1 dx [orig:96 D.1722 ] [96])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 111 110 112 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 1 dx [orig:96 D.1722 ] [96])
            (const_int 0 [0]))) Test6.f08:28 3 {*cmpdi_ccno_1}
     (nil))

(jump_insn 112 111 113 16 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 185)
            (pc))) Test6.f08:28 591 {*jcc_1}
     (nil)
 -> 185)
;; End of basic block 16 -> ( 17 21)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59


;; Succ edge  17 (fallthru)
;; Succ edge  21

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 97 98 99 100 168 169

;; Pred edge  16 (fallthru)
(note 113 112 116 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 116 113 115 17 (set (reg:DI 1 dx [168])
        (const_int 1 [0x1])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 115 116 117 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:97 D.1603 ] [97])
            (const_int 0 [0]))) Test6.f08:28 3 {*cmpdi_ccno_1}
     (nil))

(insn 117 115 118 17 (set (reg:DI 0 ax [orig:98 D.1725 ] [98])
        (if_then_else:DI (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:97 D.1603 ] [97])
            (reg:DI 1 dx [168]))) Test6.f08:28 886 {*movdicc_noc}
     (nil))

(insn 118 117 119 17 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:98 D.1725 ] [98])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(call_insn 119 118 123 17 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fc95dd56d00 __builtin_malloc>) [0 S1 A8])
            (const_int 0 [0]))) Test6.f08:28 929 {*call_value_0_rex64}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 123 119 124 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:100 D.1604 ] [100])
            (const_int 0 [0]))) Test6.f08:28 3 {*cmpdi_ccno_1}
     (nil))

(jump_insn 124 123 125 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 129)
            (pc))) Test6.f08:28 591 {*jcc_1}
     (nil)
 -> 129)
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100


;; Succ edge  18 (fallthru)
;; Succ edge  19

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  17 (fallthru)
(note 125 124 126 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 126 125 127 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fc95dc27820 *.LC6>)) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(call_insn 127 126 128 18 (call (mem:QI (symbol_ref:DI ("_gfortran_os_error") [flags 0x41]  <function_decl 0x7fc95ddde600 _gfortran_os_error>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:28 618 {*call_0}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 18 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 128 127 129)

;; Start of basic block ( 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 100
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 60 61 62 63 64 101 102 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 170 171 172 173

;; Pred edge  17
(code_label 129 128 130 19 23 "" [1 uses])

(note 130 129 132 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 132 130 133 19 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])
        (reg/f:DI 0 ax [orig:101 D.1602 ] [101])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 133 132 134 19 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 seed.offset+0 S8 A64])
        (const_int -1 [0xffffffffffffffff])) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 134 133 135 19 (parallel [
            (set (reg:DI 0 ax [170])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -52 [0xffffffffffffffcc])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:29 253 {*adddi_1}
     (nil))

(insn 135 134 136 19 (set (reg:DI 1 dx)
        (const_int 0 [0])) Test6.f08:29 62 {*movdi_internal_rex64}
     (nil))

(insn 136 135 137 19 (set (reg:DI 4 si)
        (const_int 0 [0])) Test6.f08:29 62 {*movdi_internal_rex64}
     (nil))

(insn 137 136 138 19 (set (reg:DI 5 di)
        (reg:DI 0 ax [170])) Test6.f08:29 62 {*movdi_internal_rex64}
     (nil))

(insn 138 137 139 19 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:29 66 {*movqi_internal}
     (nil))

(call_insn 139 138 140 19 (call (mem:QI (symbol_ref:DI ("_gfortran_system_clock_4") [flags 0x41]  <function_decl 0x7fc95dbed800 _gfortran_system_clock_4>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:29 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))

(insn 140 139 141 19 (set (reg/f:DI 43 r14 [orig:60 D.1606 ] [60])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 141 140 142 19 (set (reg:DI 44 r15 [orig:61 D.1607 ] [61])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 seed.offset+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 142 141 373 19 (set (reg:DI 0 ax)
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 seed.dim[0].lbound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 373 142 144 19 (set (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-120 S8 A64])
        (reg:DI 0 ax)) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 144 373 374 19 (set (reg:SI 2 cx)
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -52 [0xffffffffffffffcc])) [0 clock+0 S4 A32])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 374 144 145 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -172 [0xffffffffffffff54])) [0 %sfp+-124 S4 A32])
        (reg:SI 2 cx)) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 145 374 146 19 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -144 [0xffffffffffffff70])) [0 atmp.2.dtype+0 S8 A64])
        (const_int 265 [0x109])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 146 145 147 19 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -136 [0xffffffffffffff78])) [0 atmp.2.dim[0].stride+0 S8 A64])
        (const_int 1 [0x1])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 147 146 148 19 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -128 [0xffffffffffffff80])) [0 atmp.2.dim[0].lbound+0 S8 A64])
        (const_int 0 [0])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 148 147 149 19 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 atmp.2.dim[0].ubound+0 S8 A64])
        (const_int -1 [0xffffffffffffffff])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 149 148 150 19 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 atmp.2.data+0 S8 A64])
        (const_int 0 [0])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 150 149 151 19 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -152 [0xffffffffffffff68])) [0 atmp.2.offset+0 S8 A64])
        (const_int 0 [0])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 151 150 152 19 (set (reg:DI 41 r12 [orig:62 offset.3 ] [62])
        (const_int 0 [0])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 152 151 153 19 (set (reg:SI 3 bx [orig:63 shadow_loopvar.4 ] [63])
        (const_int 1 [0x1])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 153 152 375 19 (set (reg:SI 0 ax)
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -56 [0xffffffffffffffc8])) [0 n+0 S4 A64])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 375 153 154 19 (set (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 %sfp+-128 S4 A32])
        (reg:SI 0 ax)) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 154 375 376 19 (set (reg:DI 1 dx [orig:106 D.1730 ] [106])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 atmp.2.dim[0].ubound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 376 154 155 19 (set (reg:SI 0 ax [orig:107 D.1731 ] [107])
        (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -176 [0xffffffffffffff50])) [0 %sfp+-128 S4 A32])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 155 376 156 19 (parallel [
            (set (reg:SI 0 ax [orig:107 D.1731 ] [107])
                (minus:SI (reg:SI 0 ax [orig:107 D.1731 ] [107])
                    (reg:SI 3 bx [orig:63 shadow_loopvar.4 ] [63])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 291 {*subsi_1}
     (nil))

(insn 156 155 158 19 (parallel [
            (set (reg:SI 0 ax [orig:108 D.1732 ] [108])
                (plus:SI (reg:SI 0 ax [orig:107 D.1731 ] [107])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 252 {*addsi_1}
     (nil))

(insn 158 156 157 19 (set (reg:SI 2 cx [171])
        (const_int 0 [0])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 157 158 159 19 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:SI 0 ax [orig:108 D.1732 ] [108])
            (const_int 0 [0]))) Test6.f08:30 2 {*cmpsi_ccno_1}
     (nil))

(insn 159 157 160 19 (set (reg:SI 0 ax [orig:109 D.1733 ] [109])
        (if_then_else:SI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:SI 0 ax [orig:108 D.1732 ] [108])
            (reg:SI 2 cx [171]))) Test6.f08:30 885 {*movsicc_noc}
     (nil))

(insn 160 159 161 19 (set (reg:DI 0 ax [orig:110 D.1734 ] [110])
        (sign_extend:DI (reg:SI 0 ax [orig:109 D.1733 ] [109]))) Test6.f08:30 126 {*extendsidi2_rex64}
     (nil))

(insn 161 160 162 19 (parallel [
            (set (reg:DI 0 ax [orig:111 D.1735 ] [111])
                (plus:DI (reg:DI 1 dx [orig:106 D.1730 ] [106])
                    (reg:DI 0 ax [orig:110 D.1734 ] [110])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 162 161 163 19 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 atmp.2.dim[0].ubound+0 S8 A64])
        (reg:DI 0 ax [orig:111 D.1735 ] [111])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 163 162 164 19 (set (reg:DI 0 ax [orig:112 D.1736 ] [112])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 atmp.2.dim[0].ubound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 164 163 165 19 (parallel [
            (set (reg:DI 0 ax [orig:113 D.1737 ] [113])
                (plus:DI (reg:DI 0 ax [orig:112 D.1736 ] [112])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 165 164 166 19 (parallel [
            (set (reg:DI 0 ax [orig:114 D.1738 ] [114])
                (ashift:DI (reg:DI 0 ax [orig:113 D.1737 ] [113])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 498 {*ashldi3_1}
     (nil))

(insn 166 165 167 19 (set (reg:DI 42 r13 [orig:115 D.1618 ] [115])
        (reg:DI 0 ax [orig:114 D.1738 ] [114])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 167 166 168 19 (set (reg/f:DI 0 ax [orig:116 D.1739 ] [116])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 atmp.2.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 168 167 169 19 (set (reg:DI 4 si)
        (reg:DI 42 r13 [orig:115 D.1618 ] [115])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 169 168 170 19 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:116 D.1739 ] [116])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(call_insn 170 169 173 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7fc95dd56e00 __builtin_realloc>) [0 S1 A8])
            (const_int 0 [0]))) Test6.f08:30 929 {*call_value_0_rex64}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 173 170 174 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:64 D.1619 ] [64])
            (const_int 0 [0]))) Test6.f08:30 3 {*cmpdi_ccno_1}
     (nil))

(insn 174 173 175 19 (set (reg:QI 1 dx [172])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) Test6.f08:30 585 {*setcc_qi}
     (nil))

(insn 175 174 176 19 (parallel [
            (set (reg:SI 2 cx [orig:118 D.1741 ] [118])
                (zero_extend:SI (reg:QI 1 dx [172])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 176 175 177 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 42 r13 [orig:115 D.1618 ] [115])
            (const_int 0 [0]))) Test6.f08:30 3 {*cmpdi_ccno_1}
     (nil))

(insn 177 176 178 19 (set (reg:QI 1 dx [173])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) Test6.f08:30 585 {*setcc_qi}
     (nil))

(insn 178 177 179 19 (parallel [
            (set (reg:SI 1 dx [orig:119 D.1742 ] [119])
                (zero_extend:SI (reg:QI 1 dx [173])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 179 178 180 19 (parallel [
            (set (reg:SI 1 dx [orig:120 D.1743 ] [120])
                (and:SI (reg:SI 1 dx [orig:119 D.1742 ] [119])
                    (reg:SI 2 cx [orig:118 D.1741 ] [118])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 380 {*andsi_1}
     (nil))

(insn 180 179 181 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:120 D.1743 ] [120])
            (const_int 0 [0]))) Test6.f08:30 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 181 180 362 19 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 193)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 193)
;; End of basic block 19 -> ( 22 20)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 64 102 104 105 115


;; Succ edge  22
;; Succ edge  20 (fallthru)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 64 102 104 105 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  19 (fallthru)
(note 362 181 364 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(jump_insn 364 362 365 20 (set (pc)
        (label_ref 363)) Test6.f08:30 606 {jump}
     (nil)
 -> 363)
;; End of basic block 20 -> ( 23)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 64 102 104 105 115


;; Succ edge  23 [100.0%] 

(barrier 365 364 185)

;; Start of basic block ( 16) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  16
(code_label 185 365 186 21 22 "" [1 uses])

(note 186 185 187 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 187 186 188 21 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fc95dc278c0 *.LC7>)) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 188 187 189 21 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC8") [flags 0x2]  <var_decl 0x7fc95dc27960 *.LC8>)) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 189 188 190 21 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC9") [flags 0x2]  <var_decl 0x7fc95dc27a00 *.LC9>)) Test6.f08:28 62 {*movdi_internal_rex64}
     (nil))

(insn 190 189 191 21 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:28 66 {*movqi_internal}
     (nil))

(call_insn 191 190 192 21 (call (mem:QI (symbol_ref:DI ("_gfortran_runtime_error_at") [flags 0x41]  <function_decl 0x7fc95ddde300 _gfortran_runtime_error_at>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:28 618 {*call_0}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))
;; End of basic block 21 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 192 191 193)

;; Start of basic block ( 19) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  19
(code_label 193 192 194 22 24 "" [1 uses])

(note 194 193 195 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 195 194 196 22 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC6") [flags 0x2]  <var_decl 0x7fc95dc27820 *.LC6>)) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(call_insn 196 195 197 22 (call (mem:QI (symbol_ref:DI ("_gfortran_os_error") [flags 0x41]  <function_decl 0x7fc95ddde600 _gfortran_os_error>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:30 618 {*call_0}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 22 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 197 196 363)

;; Start of basic block ( 20) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 64 102 104 105 115
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 115
;; lr  def 	 17 [flags]

;; Pred edge  20 [100.0%] 
(code_label 363 197 199 23 38 "" [1 uses])

(note 199 363 200 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 200 199 201 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 42 r13 [orig:115 D.1618 ] [115])
            (const_int 0 [0]))) Test6.f08:30 3 {*cmpdi_ccno_1}
     (nil))

(jump_insn 201 200 202 23 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 204)
;; End of basic block 23 -> ( 24 25)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 64 102 104 105


;; Succ edge  24 (fallthru)
;; Succ edge  25

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 102 104 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 64

;; Pred edge  23 (fallthru)
(note 202 201 203 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 203 202 204 24 (set (reg/f:DI 0 ax [orig:64 D.1619 ] [64])
        (const_int 0 [0])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))
;; End of basic block 24 -> ( 25)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 64 102 104 105


;; Succ edge  25 (fallthru)

;; Start of basic block ( 23 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 64 102 104 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 64
;; lr  def 	

;; Pred edge  23
;; Pred edge  24 (fallthru)
(code_label 204 203 205 25 26 "" [1 uses])

(note 205 204 206 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 206 205 216 25 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 atmp.2.data+0 S8 A64])
        (reg/f:DI 0 ax [orig:64 D.1619 ] [64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))
;; End of basic block 25 -> ( 26)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 102 104 105


;; Succ edge  26 (fallthru)

;; Start of basic block ( 25 27) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 102 104 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 63 105
;; lr  def 	 17 [flags]

;; Pred edge  25 (fallthru)
;; Pred edge  27 [100.0%] 
(code_label 216 206 207 26 28 "" [1 uses])

(note 207 216 208 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 208 207 209 26 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:SI 3 bx [orig:63 shadow_loopvar.4 ] [63])
            (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -176 [0xffffffffffffff50])) [0 %sfp+-128 S4 A32]))) Test6.f08:30 6 {*cmpsi_1}
     (nil))

(jump_insn 209 208 210 26 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 219)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 219)
;; End of basic block 26 -> ( 28 27)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 102 104 105


;; Succ edge  28
;; Succ edge  27 (fallthru)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 102 104 105
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 63
;; lr  def 	 17 [flags] 62 63 121 122

;; Pred edge  26 (fallthru)
(note 210 209 211 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 211 210 212 27 (set (reg/f:DI 0 ax [orig:121 D.1751 ] [121])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 atmp.2.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 212 211 213 27 (parallel [
            (set (reg:SI 1 dx [orig:122 D.1752 ] [122])
                (plus:SI (reg:SI 3 bx [orig:63 shadow_loopvar.4 ] [63])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 252 {*addsi_1}
     (nil))

(insn 213 212 214 27 (set (mem/s/j:SI (plus:DI (mult:DI (reg:DI 41 r12 [orig:62 offset.3 ] [62])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [orig:121 D.1751 ] [121])) [0 MEM[(integer(kind=4)[0] *)D.1751_77] S4 A32])
        (reg:SI 1 dx [orig:122 D.1752 ] [122])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 214 213 215 27 (parallel [
            (set (reg:DI 41 r12 [orig:62 offset.3 ] [62])
                (plus:DI (reg:DI 41 r12 [orig:62 offset.3 ] [62])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 215 214 366 27 (parallel [
            (set (reg:SI 3 bx [orig:63 shadow_loopvar.4 ] [63])
                (plus:SI (reg:SI 3 bx [orig:63 shadow_loopvar.4 ] [63])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 252 {*addsi_1}
     (nil))

(jump_insn 366 215 367 27 (set (pc)
        (label_ref 216)) Test6.f08:30 606 {jump}
     (nil)
 -> 216)
;; End of basic block 27 -> ( 26)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 63 102 104 105


;; Succ edge  26 [100.0%] 

(barrier 367 366 219)

;; Start of basic block ( 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 62 102 104
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 62 102
;; lr  def 	 17 [flags] 65 123 124

;; Pred edge  26
(code_label 219 367 220 28 27 "" [1 uses])

(note 220 219 221 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 221 220 222 28 (parallel [
            (set (reg:DI 3 bx [orig:123 D.1621 ] [123])
                (plus:DI (reg:DI 41 r12 [orig:62 offset.3 ] [62])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 222 221 223 28 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -120 [0xffffffffffffff88])) [0 atmp.2.dim[0].ubound+0 S8 A64])
        (reg:DI 3 bx [orig:123 D.1621 ] [123])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 223 222 224 28 (set (reg:DI 41 r12 [orig:65 D.1622 ] [65])
        (mem/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -168 [0xffffffffffffff58])) [0 %sfp+-120 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 224 223 225 28 (set (reg/f:DI 0 ax [orig:124 D.1753 ] [124])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 225 224 226 28 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:124 D.1753 ] [124])
            (const_int 0 [0]))) Test6.f08:30 3 {*cmpdi_ccno_1}
     (nil))

(jump_insn 226 225 227 28 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 236)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 236)
;; End of basic block 28 -> ( 30 29)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 104 123


;; Succ edge  30
;; Succ edge  29 (fallthru)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 104 123
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123
;; lr  def 	 17 [flags] 125 126 127

;; Pred edge  28 (fallthru)
(note 227 226 228 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 228 227 229 29 (set (reg:DI 0 ax [orig:125 D.1755 ] [125])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 seed.dim[0].lbound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 229 228 230 29 (parallel [
            (set (reg:DI 1 dx [orig:126 D.1756 ] [126])
                (plus:DI (reg:DI 0 ax [orig:125 D.1755 ] [125])
                    (reg:DI 3 bx [orig:123 D.1621 ] [123])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 230 229 231 29 (set (reg:DI 0 ax [orig:127 D.1757 ] [127])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 seed.dim[0].ubound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 231 230 232 29 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 1 dx [orig:126 D.1756 ] [126])
            (reg:DI 0 ax [orig:127 D.1757 ] [127]))) Test6.f08:30 7 {*cmpdi_1}
     (nil))

(jump_insn 232 231 236 29 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 288)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 288)
;; End of basic block 29 -> ( 30 35)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 104 123


;; Succ edge  30 (fallthru)
;; Succ edge  35

;; Start of basic block ( 28 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 123
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123
;; lr  def 	 17 [flags] 61 65 128 129 130 131 132 133 134 135 136 137 138 139 140 174 175

;; Pred edge  28
;; Pred edge  29 (fallthru)
(code_label 236 232 237 30 29 "" [1 uses])

(note 237 236 238 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 238 237 239 30 (set (reg:DI 1 dx [orig:128 D.1759 ] [128])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 seed.dim[0].ubound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 239 238 377 30 (set (reg:DI 0 ax [orig:129 D.1760 ] [129])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 seed.dim[0].lbound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 377 239 240 30 (set (reg:DI 2 cx)
        (reg:DI 1 dx [orig:128 D.1759 ] [128])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 240 377 378 30 (parallel [
            (set (reg:DI 2 cx)
                (minus:DI (reg:DI 2 cx)
                    (reg:DI 0 ax [orig:129 D.1760 ] [129])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 292 {*subdi_1}
     (nil))

(insn 378 240 241 30 (set (reg:DI 0 ax [orig:130 D.1761 ] [130])
        (reg:DI 2 cx)) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 241 378 243 30 (parallel [
            (set (reg:DI 0 ax [orig:131 D.1762 ] [131])
                (plus:DI (reg:DI 0 ax [orig:130 D.1761 ] [130])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 243 241 242 30 (set (reg:DI 1 dx [174])
        (const_int 0 [0])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 242 243 244 30 (set (reg:CCGOC 17 flags)
        (compare:CCGOC (reg:DI 0 ax [orig:131 D.1762 ] [131])
            (const_int 0 [0]))) Test6.f08:30 3 {*cmpdi_ccno_1}
     (nil))

(insn 244 242 245 30 (set (reg:DI 1 dx [orig:132 D.1626 ] [132])
        (if_then_else:DI (ge (reg:CCGOC 17 flags)
                (const_int 0 [0]))
            (reg:DI 0 ax [orig:131 D.1762 ] [131])
            (reg:DI 1 dx [174]))) Test6.f08:30 886 {*movdicc_noc}
     (nil))

(insn 245 244 246 30 (parallel [
            (set (reg:DI 0 ax [orig:133 D.1627 ] [133])
                (plus:DI (reg:DI 3 bx [orig:123 D.1621 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 246 245 247 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 1 dx [orig:132 D.1626 ] [132])
            (reg:DI 0 ax [orig:133 D.1627 ] [133]))) Test6.f08:30 7 {*cmpdi_1}
     (nil))

(insn 247 246 248 30 (set (reg:QI 1 dx [175])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) Test6.f08:30 585 {*setcc_qi}
     (nil))

(insn 248 247 249 30 (parallel [
            (set (reg:SI 1 dx [orig:134 D.1628 ] [134])
                (zero_extend:SI (reg:QI 1 dx [175])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 249 248 250 30 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 seed.dim[0].lbound+0 S8 A64])
        (const_int 1 [0x1])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 250 249 251 30 (parallel [
            (set (reg:DI 2 cx [orig:135 D.1763 ] [135])
                (plus:DI (reg:DI 3 bx [orig:123 D.1621 ] [123])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 251 250 252 30 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -72 [0xffffffffffffffb8])) [0 seed.dim[0].ubound+0 S8 A64])
        (reg:DI 2 cx [orig:135 D.1763 ] [135])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 252 251 253 30 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -88 [0xffffffffffffffa8])) [0 seed.dim[0].stride+0 S8 A64])
        (const_int 1 [0x1])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 253 252 254 30 (set (reg:DI 2 cx [orig:136 D.1764 ] [136])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 seed.dim[0].lbound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 254 253 255 30 (parallel [
            (set (reg:DI 2 cx [orig:137 D.1765 ] [137])
                (neg:DI (reg:DI 2 cx [orig:136 D.1764 ] [136])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 448 {*negdi2_1}
     (nil))

(insn 255 254 256 30 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 seed.offset+0 S8 A64])
        (reg:DI 2 cx [orig:137 D.1765 ] [137])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 256 255 257 30 (set (reg:DI 44 r15 [orig:61 D.1607 ] [61])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -104 [0xffffffffffffff98])) [0 seed.offset+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 257 256 258 30 (set (reg:DI 41 r12 [orig:65 D.1622 ] [65])
        (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -80 [0xffffffffffffffb0])) [0 seed.dim[0].lbound+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 258 257 260 30 (parallel [
            (set (reg:DI 0 ax [orig:138 D.1766 ] [138])
                (ashift:DI (reg:DI 0 ax [orig:133 D.1627 ] [133])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 498 {*ashldi3_1}
     (nil))

(insn 260 258 261 30 (set (reg/f:DI 2 cx [orig:140 D.1767 ] [140])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 261 260 262 30 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:140 D.1767 ] [140])
            (const_int 0 [0]))) Test6.f08:30 3 {*cmpdi_ccno_1}
     (nil))

(jump_insn 262 261 263 30 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 273)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 273)
;; End of basic block 30 -> ( 31 32)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 65 104 123 134 139


;; Succ edge  31 (fallthru)
;; Succ edge  32

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 65 104 123 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 141 142 176

;; Pred edge  30 (fallthru)
(note 263 262 264 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 264 263 265 31 (set (reg:DI 5 di)
        (reg:DI 0 ax [orig:139 D.1629 ] [139])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(call_insn 265 264 269 31 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fc95dd56d00 __builtin_malloc>) [0 S1 A8])
            (const_int 0 [0]))) Test6.f08:30 929 {*call_value_0_rex64}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 269 265 270 31 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])
        (reg/f:DI 0 ax [orig:142 D.1771 ] [142])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 270 269 368 31 (set (mem/s/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -96 [0xffffffffffffffa0])) [0 seed.dtype+0 S8 A64])
        (const_int 265 [0x109])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(jump_insn 368 270 369 31 (set (pc)
        (label_ref 285)) 606 {jump}
     (nil)
 -> 285)
;; End of basic block 31 -> ( 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 65 104 123


;; Succ edge  34 [100.0%] 

(barrier 369 368 273)

;; Start of basic block ( 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 65 104 123 134 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134
;; lr  def 	 17 [flags]

;; Pred edge  30
(code_label 273 369 274 32 31 "" [1 uses])

(note 274 273 275 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 275 274 276 32 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 1 dx [orig:134 D.1628 ] [134])
            (const_int 0 [0]))) Test6.f08:30 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 276 275 277 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 285)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 285)
;; End of basic block 32 -> ( 33 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 65 104 123 139


;; Succ edge  33 (fallthru)
;; Succ edge  34

;; Start of basic block ( 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 65 104 123 139
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 139
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 143 144 145

;; Pred edge  32 (fallthru)
(note 277 276 278 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 278 277 279 33 (set (reg/f:DI 1 dx [orig:143 D.1775 ] [143])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 279 278 280 33 (set (reg:DI 4 si)
        (reg:DI 0 ax [orig:139 D.1629 ] [139])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 280 279 281 33 (set (reg:DI 5 di)
        (reg/f:DI 1 dx [orig:143 D.1775 ] [143])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(call_insn 281 280 284 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("realloc") [flags 0x41]  <function_decl 0x7fc95dd56e00 __builtin_realloc>) [0 S1 A8])
            (const_int 0 [0]))) Test6.f08:30 929 {*call_value_0_rex64}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 284 281 285 33 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])
        (reg/f:DI 0 ax [orig:145 D.1777 ] [145])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))
;; End of basic block 33 -> ( 34)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 65 104 123


;; Succ edge  34 (fallthru)

;; Start of basic block ( 33 32 31) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 61 65 104 123
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 60

;; Pred edge  33 (fallthru)
;; Pred edge  32
;; Pred edge  31 [100.0%] 
(code_label 285 284 286 34 32 "" [2 uses])

(note 286 285 287 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 287 286 288 34 (set (reg/f:DI 43 r14 [orig:60 D.1606 ] [60])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))
;; End of basic block 34 -> ( 35)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 104 123


;; Succ edge  35 (fallthru)

;; Start of basic block ( 29 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 104 123
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 66

;; Pred edge  29
;; Pred edge  34 (fallthru)
(code_label 288 287 289 35 30 "" [1 uses])

(note 289 288 290 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 290 289 307 35 (set (reg:DI 1 dx [orig:66 S.5 ] [66])
        (const_int 0 [0])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))
;; End of basic block 35 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 66 104 123


;; Succ edge  36 (fallthru)

;; Start of basic block ( 35 37) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 66 104 123
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 66 123
;; lr  def 	 17 [flags]

;; Pred edge  35 (fallthru)
;; Pred edge  37 [100.0%] 
(code_label 307 290 291 36 34 "" [1 uses])

(note 291 307 292 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 292 291 293 36 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 1 dx [orig:66 S.5 ] [66])
            (reg:DI 3 bx [orig:123 D.1621 ] [123]))) Test6.f08:30 7 {*cmpdi_1}
     (nil))

(jump_insn 293 292 294 36 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 310)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 310)
;; End of basic block 36 -> ( 38 37)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 66 104 123


;; Succ edge  38
;; Succ edge  37 (fallthru)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 66 104 123
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 66 104
;; lr  def 	 17 [flags] 66 146 147 148 149 150 151 177

;; Pred edge  36 (fallthru)
(note 294 293 295 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 295 294 296 37 (parallel [
            (set (reg:DI 0 ax [orig:146 D.1781 ] [146])
                (plus:DI (reg:DI 1 dx [orig:66 S.5 ] [66])
                    (reg:DI 41 r12 [orig:65 D.1622 ] [65])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 296 295 297 37 (parallel [
            (set (reg:DI 4 si [orig:147 D.1782 ] [147])
                (plus:DI (reg:DI 0 ax [orig:146 D.1781 ] [146])
                    (reg:DI 44 r15 [orig:61 D.1607 ] [61])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(insn 297 296 298 37 (set (reg/f:DI 0 ax [orig:148 D.1783 ] [148])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 atmp.2.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 298 297 299 37 (set (reg:SI 2 cx [orig:149 D.1784 ] [149])
        (mem/s/j:SI (plus:DI (mult:DI (reg:DI 1 dx [orig:66 S.5 ] [66])
                    (const_int 4 [0x4]))
                (reg/f:DI 0 ax [orig:148 D.1783 ] [148])) [0 MEM[(integer(kind=4)[0] *)D.1783_111] S4 A32])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 299 298 300 37 (set (reg:SI 0 ax [177])
        (reg:SI 2 cx [orig:149 D.1784 ] [149])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 300 299 301 37 (parallel [
            (set (reg:SI 0 ax [177])
                (ashift:SI (reg:SI 0 ax [177])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 497 {*ashlsi3_1}
     (nil))

(insn 301 300 302 37 (parallel [
            (set (reg:SI 0 ax [177])
                (plus:SI (reg:SI 0 ax [177])
                    (reg:SI 2 cx [orig:149 D.1784 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [orig:149 D.1784 ] [149])
            (const_int 9 [0x9]))
        (nil)))

(insn 302 301 303 37 (parallel [
            (set (reg:SI 0 ax [177])
                (ashift:SI (reg:SI 0 ax [177])
                    (const_int 2 [0x2])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 497 {*ashlsi3_1}
     (nil))

(insn 303 302 304 37 (parallel [
            (set (reg:SI 0 ax [orig:150 D.1785 ] [150])
                (plus:SI (reg:SI 0 ax [177])
                    (reg:SI 2 cx [orig:149 D.1784 ] [149])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 252 {*addsi_1}
     (expr_list:REG_EQUAL (mult:SI (reg:SI 2 cx [orig:149 D.1784 ] [149])
            (const_int 37 [0x25]))
        (nil)))

(insn 304 303 305 37 (parallel [
            (set (reg:SI 0 ax [orig:151 D.1786 ] [151])
                (plus:SI (reg:SI 0 ax [orig:150 D.1785 ] [150])
                    (mem/c:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -172 [0xffffffffffffff54])) [0 %sfp+-124 S4 A32])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 252 {*addsi_1}
     (nil))

(insn 305 304 306 37 (set (mem/s/j:SI (plus:DI (mult:DI (reg:DI 4 si [orig:147 D.1782 ] [147])
                    (const_int 4 [0x4]))
                (reg/f:DI 43 r14 [orig:60 D.1606 ] [60])) [0 *D.1606_2 S4 A32])
        (reg:SI 0 ax [orig:151 D.1786 ] [151])) Test6.f08:30 64 {*movsi_internal}
     (nil))

(insn 306 305 370 37 (parallel [
            (set (reg:DI 1 dx [orig:66 S.5 ] [66])
                (plus:DI (reg:DI 1 dx [orig:66 S.5 ] [66])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:30 253 {*adddi_1}
     (nil))

(jump_insn 370 306 371 37 (set (pc)
        (label_ref 307)) Test6.f08:30 606 {jump}
     (nil)
 -> 307)
;; End of basic block 37 -> ( 36)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60 61 65 66 104 123


;; Succ edge  36 [100.0%] 

(barrier 371 370 310)

;; Start of basic block ( 36) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags] 152

;; Pred edge  36
(code_label 310 371 311 38 33 "" [1 uses])

(note 311 310 312 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 312 311 313 38 (set (reg/f:DI 0 ax [orig:152 D.1614 ] [152])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -160 [0xffffffffffffff60])) [0 atmp.2.data+0 S8 A64])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(insn 313 312 314 38 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:152 D.1614 ] [152])
            (const_int 0 [0]))) Test6.f08:30 3 {*cmpdi_ccno_1}
     (nil))

(jump_insn 314 313 315 38 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 318)
            (pc))) Test6.f08:30 591 {*jcc_1}
     (nil)
 -> 318)
;; End of basic block 38 -> ( 39 40)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152


;; Succ edge  39 (fallthru)
;; Succ edge  40

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 152
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  38 (fallthru)
(note 315 314 316 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 316 315 317 39 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:152 D.1614 ] [152])) Test6.f08:30 62 {*movdi_internal_rex64}
     (nil))

(call_insn 317 316 318 39 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc95dd56c00 __builtin_free>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:30 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 39 -> ( 40)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  40 (fallthru)

;; Start of basic block ( 38 39) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 153 178

;; Pred edge  38
;; Pred edge  39 (fallthru)
(code_label 318 317 319 40 35 "" [1 uses])

(note 319 318 320 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 320 319 321 40 (parallel [
            (set (reg:DI 0 ax [178])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -112 [0xffffffffffffff90])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:31 253 {*adddi_1}
     (nil))

(insn 321 320 322 40 (set (reg:DI 1 dx)
        (const_int 0 [0])) Test6.f08:31 62 {*movdi_internal_rex64}
     (nil))

(insn 322 321 323 40 (set (reg:DI 4 si)
        (reg:DI 0 ax [178])) Test6.f08:31 62 {*movdi_internal_rex64}
     (nil))

(insn 323 322 324 40 (set (reg:DI 5 di)
        (const_int 0 [0])) Test6.f08:31 62 {*movdi_internal_rex64}
     (nil))

(insn 324 323 325 40 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:31 66 {*movqi_internal}
     (nil))

(call_insn 325 324 326 40 (call (mem:QI (symbol_ref:DI ("_gfortran_random_seed_i4") [flags 0x41]  <function_decl 0x7fc95dbed700 _gfortran_random_seed_i4>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:31 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))

(insn 326 325 327 40 (set (reg/f:DI 0 ax [orig:153 D.1790 ] [153])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:32 62 {*movdi_internal_rex64}
     (nil))

(insn 327 326 328 40 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:153 D.1790 ] [153])
            (const_int 0 [0]))) Test6.f08:32 3 {*cmpdi_ccno_1}
     (nil))

(jump_insn 328 327 329 40 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 336)
            (pc))) Test6.f08:32 591 {*jcc_1}
     (nil)
 -> 336)
;; End of basic block 40 -> ( 41 42)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  41 (fallthru)
;; Succ edge  42

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]

;; Pred edge  40 (fallthru)
(note 329 328 330 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 330 329 331 41 (set (reg:DI 1 dx)
        (symbol_ref/f:DI ("*.LC7") [flags 0x2]  <var_decl 0x7fc95dc278c0 *.LC7>)) Test6.f08:32 62 {*movdi_internal_rex64}
     (nil))

(insn 331 330 332 41 (set (reg:DI 4 si)
        (symbol_ref/f:DI ("*.LC10") [flags 0x2]  <var_decl 0x7fc95dc27aa0 *.LC10>)) Test6.f08:32 62 {*movdi_internal_rex64}
     (nil))

(insn 332 331 333 41 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC11") [flags 0x2]  <var_decl 0x7fc95dc27b40 *.LC11>)) Test6.f08:32 62 {*movdi_internal_rex64}
     (nil))

(insn 333 332 334 41 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:32 66 {*movqi_internal}
     (nil))

(call_insn 334 333 335 41 (call (mem:QI (symbol_ref:DI ("_gfortran_runtime_error_at") [flags 0x41]  <function_decl 0x7fc95ddde300 _gfortran_runtime_error_at>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:32 618 {*call_0}
     (expr_list:REG_NORETURN (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
                (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                    (nil))))))
;; End of basic block 41 -> ()
;; lr  out 	 7 [sp] 16 [argp] 20 [frame]



(barrier 335 334 336)

;; Start of basic block ( 40) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 154 155

;; Pred edge  40
(code_label 336 335 337 42 36 "" [1 uses])

(note 337 336 338 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 338 337 339 42 (set (reg/f:DI 0 ax [orig:154 D.1793 ] [154])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:32 62 {*movdi_internal_rex64}
     (nil))

(insn 339 338 340 42 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:154 D.1793 ] [154])) Test6.f08:32 62 {*movdi_internal_rex64}
     (nil))

(call_insn 340 339 341 42 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc95dd56c00 __builtin_free>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:32 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 341 340 342 42 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])
        (const_int 0 [0])) Test6.f08:32 62 {*movdi_internal_rex64}
     (nil))

(insn 342 341 343 42 (set (reg/f:DI 0 ax [orig:155 D.1794 ] [155])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:33 62 {*movdi_internal_rex64}
     (nil))

(insn 343 342 344 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:155 D.1794 ] [155])
            (const_int 0 [0]))) Test6.f08:33 3 {*cmpdi_ccno_1}
     (nil))

(jump_insn 344 343 345 42 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 349)
            (pc))) Test6.f08:33 591 {*jcc_1}
     (nil)
 -> 349)
;; End of basic block 42 -> ( 43 44)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  43 (fallthru)
;; Succ edge  44

;; Start of basic block ( 42) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 156

;; Pred edge  42 (fallthru)
(note 345 344 346 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 346 345 347 43 (set (reg/f:DI 0 ax [orig:156 D.1797 ] [156])
        (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])) Test6.f08:33 62 {*movdi_internal_rex64}
     (nil))

(insn 347 346 348 43 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:156 D.1797 ] [156])) Test6.f08:33 62 {*movdi_internal_rex64}
     (nil))

(call_insn 348 347 349 43 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fc95dd56c00 __builtin_free>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:33 618 {*call_0}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 43 -> ( 44)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  44 (fallthru)

;; Start of basic block ( 42 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  42
;; Pred edge  43 (fallthru)
(code_label 349 348 350 44 37 "" [1 uses])

(note 350 349 351 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 351 350 372 44 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -112 [0xffffffffffffff90])) [0 seed.data+0 S8 A64])
        (const_int 0 [0])) Test6.f08:33 62 {*movdi_internal_rex64}
     (nil))
;; End of basic block 44 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 372 351 0 NOTE_INSN_DELETED)


;; Function test6 (MAIN__)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 18 count 15 (  1.1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r86: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r86,l0) best DIREG, cover GENERAL_REGS
    r85: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a1 (r85,l0) best DIREG, cover GENERAL_REGS
    r84: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r84,l0) best SIREG, cover GENERAL_REGS
    r83: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a4 (r83,l0) best SSE_REGS, cover SSE_REGS
    r82: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a9 (r82,l0) best DIREG, cover GENERAL_REGS
    r81: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a11 (r81,l0) best GENERAL_REGS, cover GENERAL_REGS
    r80: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a17 (r80,l0) best GENERAL_REGS, cover GENERAL_REGS
    r79: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a18 (r79,l0) best DIREG, cover GENERAL_REGS
    r78: preferred DREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a19 (r78,l0) best DREG, cover GENERAL_REGS
    r77: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a20 (r77,l0) best SIREG, cover GENERAL_REGS
    r76: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a22 (r76,l0) best GENERAL_REGS, cover GENERAL_REGS
    r75: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a26 (r75,l0) best GENERAL_REGS, cover GENERAL_REGS
    r74: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a27 (r74,l0) best DIREG, cover GENERAL_REGS
    r73: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a3 (r73,l0) best SSE_REGS, cover SSE_REGS
    r72: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a7 (r72,l0) best SSE_REGS, cover SSE_REGS
    r71: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a8 (r71,l0) best GENERAL_REGS, cover GENERAL_REGS
    r70: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a10 (r70,l0) best GENERAL_REGS, cover GENERAL_REGS
    r69: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a13 (r69,l0) best SSE_REGS, cover SSE_REGS
    r68: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a14 (r68,l0) best SSE_REGS, cover SSE_REGS
    r67: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a15 (r67,l0) best SSE_REGS, cover SSE_REGS
    r66: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a12 (r66,l0) best GENERAL_REGS, cover GENERAL_REGS
    r65: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a16 (r65,l0) best GENERAL_REGS, cover GENERAL_REGS
    r64: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a21 (r64,l0) best GENERAL_REGS, cover GENERAL_REGS
    r63: preferred SSE_FIRST_REG, alternative GENERAL_REGS, cover SSE_REGS
    a24 (r63,l0) best SSE_FIRST_REG, cover SSE_REGS
    r62: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a23 (r62,l0) best GENERAL_REGS, cover GENERAL_REGS
    r61: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a25 (r61,l0) best GENERAL_REGS, cover GENERAL_REGS
    r60: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a6 (r60,l0) best GENERAL_REGS, cover GENERAL_REGS
    r59: preferred SSE_REGS, alternative NO_REGS, cover SSE_REGS
    a5 (r59,l0) best SSE_REGS, cover SSE_REGS

  a0(r86,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r85,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r84,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r73,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a4(r83,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a5(r59,l0) costs: AREG:39,39 DREG:39,39 CREG:39,39 BREG:39,39 SIREG:39,39 DIREG:39,39 AD_REGS:39,39 CLOBBERED_REGS:39,39 Q_REGS:39,39 NON_Q_REGS:39,39 LEGACY_REGS:39,39 GENERAL_REGS:39,39 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:64,64 FP_TOP_REG:63,63 FP_SECOND_REG:63,63 FLOAT_REGS:63,63 MEM:27
  a6(r60,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:65,65 SSE_REGS:65,65 MMX_REGS:65,65 MEM:17
  a7(r72,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a8(r71,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a9(r82,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a10(r70,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a11(r81,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a12(r66,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a13(r69,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a14(r68,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:11
  a15(r67,l0) costs: AREG:13,13 DREG:13,13 CREG:13,13 BREG:13,13 SIREG:13,13 DIREG:13,13 AD_REGS:13,13 CLOBBERED_REGS:13,13 Q_REGS:13,13 NON_Q_REGS:13,13 LEGACY_REGS:13,13 GENERAL_REGS:13,13 SSE_FIRST_REG:0,0 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:21,21 FP_SECOND_REG:21,21 FLOAT_REGS:21,21 MEM:12
  a16(r65,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a17(r80,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a18(r79,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a19(r78,l0) costs: AREG:0,0 DREG:-1,-1 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a20(r77,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a21(r64,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:8
  a22(r76,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 MEM:6
  a23(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a24(r63,l0) costs: AREG:4,4 DREG:4,4 CREG:4,4 BREG:4,4 SIREG:4,4 DIREG:4,4 AD_REGS:4,4 CLOBBERED_REGS:4,4 Q_REGS:4,4 NON_Q_REGS:4,4 LEGACY_REGS:4,4 GENERAL_REGS:4,4 SSE_FIRST_REG:-1,-1 SSE_REGS:0,0 MMX_REGS:30,30 FP_TOP_REG:4,4 FP_SECOND_REG:4,4 FLOAT_REGS:4,4 MEM:12
  a25(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a26(r75,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a27(r74,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 103(l0): point = 0
   Insn 102(l0): point = 2
   Insn 101(l0): point = 4
   Insn 100(l0): point = 6
   Insn 99(l0): point = 8
   Insn 98(l0): point = 10
   Insn 97(l0): point = 12
   Insn 96(l0): point = 14
   Insn 95(l0): point = 16
   Insn 94(l0): point = 18
   Insn 93(l0): point = 20
   Insn 92(l0): point = 22
   Insn 106(l0): point = 25
   Insn 86(l0): point = 27
   Insn 85(l0): point = 29
   Insn 84(l0): point = 31
   Insn 83(l0): point = 33
   Insn 81(l0): point = 36
   Insn 80(l0): point = 38
   Insn 78(l0): point = 41
   Insn 77(l0): point = 43
   Insn 76(l0): point = 45
   Insn 75(l0): point = 47
   Insn 74(l0): point = 49
   Insn 73(l0): point = 51
   Insn 72(l0): point = 53
   Insn 71(l0): point = 55
   Insn 70(l0): point = 57
   Insn 63(l0): point = 60
   Insn 62(l0): point = 62
   Insn 61(l0): point = 64
   Insn 60(l0): point = 66
   Insn 59(l0): point = 68
   Insn 58(l0): point = 70
   Insn 57(l0): point = 72
   Insn 56(l0): point = 74
   Insn 55(l0): point = 76
   Insn 54(l0): point = 78
   Insn 53(l0): point = 80
   Insn 52(l0): point = 82
   Insn 51(l0): point = 84
   Insn 50(l0): point = 86
   Insn 49(l0): point = 88
   Insn 48(l0): point = 90
   Insn 47(l0): point = 92
   Insn 46(l0): point = 94
   Insn 45(l0): point = 96
   Insn 44(l0): point = 98
   Insn 43(l0): point = 100
   Insn 42(l0): point = 102
   Insn 41(l0): point = 104
   Insn 40(l0): point = 106
   Insn 39(l0): point = 108
   Insn 38(l0): point = 110
   Insn 31(l0): point = 113
   Insn 30(l0): point = 115
   Insn 29(l0): point = 117
   Insn 28(l0): point = 119
   Insn 27(l0): point = 121
   Insn 26(l0): point = 123
   Insn 25(l0): point = 125
   Insn 24(l0): point = 127
   Insn 23(l0): point = 129
   Insn 22(l0): point = 131
   Insn 21(l0): point = 133
   Insn 20(l0): point = 135
   Insn 19(l0): point = 137
   Insn 18(l0): point = 139
   Insn 17(l0): point = 141
   Insn 113(l0): point = 144
   Insn 109(l0): point = 147
   Insn 15(l0): point = 150
   Insn 14(l0): point = 152
   Insn 13(l0): point = 154
   Insn 12(l0): point = 156
   Insn 11(l0): point = 158
   Insn 10(l0): point = 160
   Insn 9(l0): point = 162
   Insn 119(l0): point = 165
   Insn 115(l0): point = 168
   Insn 7(l0): point = 171
   Insn 6(l0): point = 173
   Insn 5(l0): point = 175
 a0(r86): [3..4]
 a1(r85): [9..14]
 a2(r84): [11..16]
 a3(r73): [19..20]
 a4(r83): [21..22]
 a5(r59): [21..43]
 a6(r60): [25..41]
 a7(r72): [30..31]
 a8(r71): [32..33]
 a9(r82): [48..49]
 a10(r70): [63..66]
 a11(r81): [67..68]
 a12(r66): [73..80]
 a13(r69): [73..74]
 a14(r68): [75..76]
 a15(r67): [75..78]
 a16(r65): [81..82]
 a17(r80): [83..84]
 a18(r79): [91..92]
 a19(r78): [101..102]
 a20(r77): [109..110]
 a21(r64): [116..119]
 a22(r76): [120..121]
 a23(r62): [126..133]
 a24(r63): [126..127]
 a25(r61): [134..135]
 a26(r75): [136..137]
 a27(r74): [161..162]
Compressing live ranges: from 178 to 44 - 24%
Ranges after the compression:
 a0(r86): [0..1]
 a1(r85): [2..3]
 a2(r84): [2..3]
 a3(r73): [4..5]
 a4(r83): [6..7]
 a5(r59): [6..11]
 a6(r60): [8..11]
 a7(r72): [8..9]
 a8(r71): [10..11]
 a9(r82): [12..13]
 a10(r70): [14..15]
 a11(r81): [16..17]
 a12(r66): [18..21]
 a13(r69): [18..19]
 a14(r68): [20..21]
 a15(r67): [20..21]
 a16(r65): [22..23]
 a17(r80): [24..25]
 a18(r79): [26..27]
 a19(r78): [28..29]
 a20(r77): [30..31]
 a21(r64): [32..33]
 a22(r76): [34..35]
 a23(r62): [36..37]
 a24(r63): [36..37]
 a25(r61): [38..39]
 a26(r75): [40..41]
 a27(r74): [42..43]
  regions=4, blocks=14, points=44
    allocnos=28 (big 0), copies=0, conflicts=0, ranges=28
Disposition:
    5:r59  l0    21    6:r60  l0     0   25:r61  l0     0   23:r62  l0     3
   24:r63  l0    21   21:r64  l0     0   16:r65  l0     0   12:r66  l0     0
   15:r67  l0    21   14:r68  l0    22   13:r69  l0    21   10:r70  l0     0
    8:r71  l0     1    7:r72  l0    22    3:r73  l0    21   27:r74  l0     0
   26:r75  l0     0   22:r76  l0     0   20:r77  l0     0   19:r78  l0     0
   18:r79  l0     0   17:r80  l0     0   11:r81  l0     0    9:r82  l0     0
    4:r83  l0    22    2:r84  l0     2    1:r85  l0     0    0:r86  l0     0
+++Costs: overall -9, reg -9, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 7, dead_or_set: 
insn=6, live_throughout: 7, dead_or_set: 
insn=7, live_throughout: 7, dead_or_set: 
insn=115, live_throughout: 7, dead_or_set: 
insn=118, live_throughout: 7, dead_or_set: 
insn=119, live_throughout: 7, dead_or_set: 
insn=65, live_throughout: 7, dead_or_set: 
insn=9, live_throughout: 7, dead_or_set: 74
insn=10, live_throughout: 7, dead_or_set: 5, 74
insn=11, live_throughout: 5, 7, dead_or_set: 0
insn=12, live_throughout: 7, dead_or_set: 0, 5
insn=13, live_throughout: 7, dead_or_set: 
insn=14, live_throughout: 7, dead_or_set: 
insn=15, live_throughout: 7, dead_or_set: 
insn=109, live_throughout: 7, dead_or_set: 
insn=112, live_throughout: 7, dead_or_set: 
insn=113, live_throughout: 7, dead_or_set: 
insn=33, live_throughout: 7, dead_or_set: 
insn=17, live_throughout: 7, dead_or_set: 0
insn=18, live_throughout: 7, dead_or_set: 0
insn=19, live_throughout: 7, dead_or_set: 75
insn=20, live_throughout: 7, dead_or_set: 61, 75
insn=21, live_throughout: 7, dead_or_set: 61, 62
insn=22, live_throughout: 7, 62, dead_or_set: 0
insn=23, live_throughout: 7, 62, dead_or_set: 0, 21
insn=24, live_throughout: 7, 62, dead_or_set: 21, 63
insn=25, live_throughout: 7, dead_or_set: 62, 63
insn=26, live_throughout: 7, dead_or_set: 
insn=27, live_throughout: 7, dead_or_set: 76
insn=28, live_throughout: 7, dead_or_set: 64, 76
insn=29, live_throughout: 7, 64, dead_or_set: 
insn=30, live_throughout: 7, dead_or_set: 64
insn=31, live_throughout: 7, dead_or_set: 
insn=36, live_throughout: 7, dead_or_set: 
insn=38, live_throughout: 7, dead_or_set: 77
insn=39, live_throughout: 7, dead_or_set: 4, 77
insn=40, live_throughout: 4, 7, dead_or_set: 5
insn=41, live_throughout: 7, dead_or_set: 4, 5
insn=42, live_throughout: 7, dead_or_set: 78
insn=43, live_throughout: 7, dead_or_set: 1, 78
insn=44, live_throughout: 1, 7, dead_or_set: 4
insn=45, live_throughout: 1, 4, 7, dead_or_set: 5
insn=46, live_throughout: 7, dead_or_set: 1, 4, 5
insn=47, live_throughout: 7, dead_or_set: 79
insn=48, live_throughout: 7, dead_or_set: 5, 79
insn=49, live_throughout: 5, 7, dead_or_set: 0
insn=50, live_throughout: 7, dead_or_set: 0, 5
insn=51, live_throughout: 7, dead_or_set: 80
insn=52, live_throughout: 7, dead_or_set: 65, 80
insn=53, live_throughout: 7, dead_or_set: 65, 66
insn=54, live_throughout: 7, 66, dead_or_set: 67
insn=55, live_throughout: 7, 66, 67, dead_or_set: 68
insn=56, live_throughout: 7, 66, dead_or_set: 67, 68, 69
insn=57, live_throughout: 7, dead_or_set: 66, 69
insn=58, live_throughout: 7, dead_or_set: 
insn=59, live_throughout: 7, dead_or_set: 81
insn=60, live_throughout: 7, dead_or_set: 70, 81
insn=61, live_throughout: 7, 70, dead_or_set: 
insn=62, live_throughout: 7, dead_or_set: 70
insn=63, live_throughout: 7, dead_or_set: 
insn=68, live_throughout: 7, dead_or_set: 
insn=70, live_throughout: 7, dead_or_set: 
insn=71, live_throughout: 7, dead_or_set: 
insn=72, live_throughout: 7, dead_or_set: 
insn=73, live_throughout: 7, dead_or_set: 
insn=74, live_throughout: 7, dead_or_set: 82
insn=75, live_throughout: 7, dead_or_set: 5, 82
insn=76, live_throughout: 7, dead_or_set: 5
insn=77, live_throughout: 7, dead_or_set: 59
insn=78, live_throughout: 7, 59, dead_or_set: 60
insn=87, live_throughout: 7, 59, 60, dead_or_set: 
insn=80, live_throughout: 7, 59, 60, dead_or_set: 
insn=81, live_throughout: 7, 59, 60, dead_or_set: 
insn=83, live_throughout: 7, 59, 60, dead_or_set: 71
insn=84, live_throughout: 7, 59, 60, dead_or_set: 71, 72
insn=85, live_throughout: 7, 60, dead_or_set: 59, 72
insn=86, live_throughout: 7, 59, dead_or_set: 60
insn=106, live_throughout: 7, 59, 60, dead_or_set: 
insn=90, live_throughout: 7, 59, dead_or_set: 
insn=92, live_throughout: 7, 59, dead_or_set: 83
insn=93, live_throughout: 7, dead_or_set: 59, 73, 83
insn=94, live_throughout: 7, dead_or_set: 73
insn=95, live_throughout: 7, dead_or_set: 84
insn=96, live_throughout: 7, 84, dead_or_set: 85
insn=97, live_throughout: 7, 84, 85, dead_or_set: 1
insn=98, live_throughout: 1, 7, 85, dead_or_set: 4, 84
insn=99, live_throughout: 1, 4, 7, dead_or_set: 5, 85
insn=100, live_throughout: 7, dead_or_set: 1, 4, 5
insn=101, live_throughout: 7, dead_or_set: 86
insn=102, live_throughout: 7, dead_or_set: 5, 86
insn=103, live_throughout: 7, dead_or_set: 5
changing reg in insn 85
changing reg in insn 77
changing reg in insn 93
changing reg in insn 85
changing reg in insn 86
changing reg in insn 78
changing reg in insn 86
changing reg in insn 83
changing reg in insn 80
changing reg in insn 20
changing reg in insn 21
changing reg in insn 21
changing reg in insn 25
changing reg in insn 24
changing reg in insn 25
changing reg in insn 28
changing reg in insn 30
changing reg in insn 52
changing reg in insn 53
changing reg in insn 53
changing reg in insn 57
changing reg in insn 54
changing reg in insn 56
changing reg in insn 55
changing reg in insn 56
changing reg in insn 56
changing reg in insn 57
changing reg in insn 60
changing reg in insn 62
changing reg in insn 83
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 93
changing reg in insn 94
changing reg in insn 9
changing reg in insn 10
changing reg in insn 19
changing reg in insn 20
changing reg in insn 27
changing reg in insn 28
changing reg in insn 38
changing reg in insn 39
changing reg in insn 42
changing reg in insn 43
changing reg in insn 47
changing reg in insn 48
changing reg in insn 51
changing reg in insn 52
changing reg in insn 59
changing reg in insn 60
changing reg in insn 74
changing reg in insn 75
changing reg in insn 92
changing reg in insn 93
changing reg in insn 95
changing reg in insn 98
changing reg in insn 96
changing reg in insn 99
changing reg in insn 101
changing reg in insn 102
deleting insn with uid = 24.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 12.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 100.
verify found no changes in insn with uid = 103.


test6

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 21[xmm0] 22[xmm1]
;;  ref usage 	r0={32d,23u} r1={13d,3u} r2={11d,1u} r3={1d,1u} r4={13d,3u} r5={17d,7u} r6={1d,42u} r7={1d,22u} r8={9d} r9={9d} r10={9d} r11={9d} r12={9d} r13={9d} r14={9d} r15={9d} r17={32d,7u} r18={9d} r19={9d} r20={1d,1u} r21={15d,6u} r22={13d,3u} r23={10d} r24={10d} r25={10d} r26={10d} r27={10d} r28={10d} r29={9d} r30={9d} r31={9d} r32={9d} r33={9d} r34={9d} r35={9d} r36={9d} r37={10d} r38={10d} r39={9d} r40={9d} r45={9d} r46={9d} r47={9d} r48={9d} r49={9d} r50={9d} r51={9d} r52={9d} 
;;    total ref usage 601{482d,119u,0e} in 82{73 regular + 9 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 17 [flags]

;; Pred edge  ENTRY (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 6 2 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
        (const_int 1 [0x1])) Test6.f08:6 64 {*movsi_internal}
     (nil))

(insn 6 5 7 2 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 15 [0xf]))) Test6.f08:6 6 {*cmpsi_1}
     (nil))

(jump_insn 7 6 114 2 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) Test6.f08:6 591 {*jcc_1}
     (nil)
 -> 68)
;; End of basic block 2 -> ( 12 6)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  12 (fallthru)
;; Succ edge  6

;; Start of basic block ( 2) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  2 (fallthru)
(note 114 7 115 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn 115 114 116 12 (set (pc)
        (label_ref 65)) 606 {jump}
     (nil)
 -> 65)
;; End of basic block 12 -> ( 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 [100.0%] 

(barrier 116 115 118)

;; Start of basic block ( 5) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  5
(code_label 118 116 117 13 47 "" [1 uses])

(note 117 118 119 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 119 117 65 13 (const_int 0 [0]) Test6.f08:6 638 {nop}
     (nil))
;; End of basic block 13 -> ( 3)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 13 12) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 74

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 65 119 8 3 43 "" [1 uses])

(note 8 65 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 10 3 (parallel [
            (set (reg:DI 0 ax [74])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -32 [0xffffffffffffffe0])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:7 253 {*adddi_1}
     (nil))

(insn 10 9 11 3 (set (reg:DI 5 di)
        (reg:DI 0 ax [74])) Test6.f08:7 62 {*movdi_internal_rex64}
     (nil))

(insn 11 10 12 3 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:7 66 {*movqi_internal}
     (nil))

(call_insn 12 11 13 3 (call (mem:QI (symbol_ref:DI ("_gfortran_cpu_time_4") [flags 0x41]  <function_decl 0x7fc95dbedf00 _gfortran_cpu_time_4>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:7 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))

(insn 13 12 14 3 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
        (const_int 1 [0x1])) Test6.f08:8 64 {*movsi_internal}
     (nil))

(insn 14 13 15 3 (set (reg:CCGC 17 flags)
        (compare:CCGC (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
            (const_int 2400000 [0x249f00]))) Test6.f08:8 6 {*cmpsi_1}
     (nil))

(jump_insn 15 14 108 3 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 36)
            (pc))) Test6.f08:8 591 {*jcc_1}
     (nil)
 -> 36)
;; End of basic block 3 -> ( 10 5)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  10 (fallthru)
;; Succ edge  5

;; Start of basic block ( 3) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  3 (fallthru)
(note 108 15 109 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(jump_insn 109 108 110 10 (set (pc)
        (label_ref 33)) 606 {jump}
     (nil)
 -> 33)
;; End of basic block 10 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 [100.0%] 

(barrier 110 109 112)

;; Start of basic block ( 4) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	

;; Pred edge  4
(code_label 112 110 111 11 46 "" [1 uses])

(note 111 112 113 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 113 111 33 11 (const_int 0 [0]) Test6.f08:8 638 {nop}
     (nil))
;; End of basic block 11 -> ( 4)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 11 10) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 61 62 63 64 75 76

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 33 113 16 4 42 "" [1 uses])

(note 16 33 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 18 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:9 66 {*movqi_internal}
     (nil))

(call_insn 18 17 19 4 (call (mem:QI (symbol_ref:DI ("init_random_seed_") [flags 0x3]  <function_decl 0x7fc95dbed400 init_random_seed>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:9 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (nil)))

(insn 19 18 20 4 (set (reg:SI 0 ax [75])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])) Test6.f08:10 64 {*movsi_internal}
     (nil))

(insn 20 19 21 4 (set (reg:DI 0 ax [orig:61 D.1670 ] [61])
        (sign_extend:DI (reg:SI 0 ax [75]))) Test6.f08:10 126 {*extendsidi2_rex64}
     (nil))

(insn 21 20 22 4 (parallel [
            (set (reg:DI 3 bx [orig:62 D.1671 ] [62])
                (plus:DI (reg:DI 0 ax [orig:61 D.1670 ] [61])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:10 253 {*adddi_1}
     (nil))

(insn 22 21 23 4 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:10 66 {*movqi_internal}
     (nil))

(call_insn 23 22 25 4 (set (reg:SF 21 xmm0)
        (call (mem:QI (symbol_ref:DI ("random_normal_") [flags 0x3]  <function_decl 0x7fc95dbed100 random_normal>) [0 S1 A8])
            (const_int 0 [0]))) Test6.f08:10 929 {*call_value_0_rex64}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (nil)))

(insn 25 23 26 4 (set (mem/s/j:SF (plus:DI (mult:DI (reg:DI 3 bx [orig:62 D.1671 ] [62])
                    (const_int 4 [0x4]))
                (symbol_ref:DI ("t6.1638") [flags 0x2]  <var_decl 0x7fc95dbfa5a0 t6>)) [0 t6 S4 A32])
        (reg:SF 21 xmm0 [orig:63 D.1672 ] [63])) Test6.f08:10 110 {*movsf_internal}
     (nil))

(insn 26 25 27 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
            (const_int 2400000 [0x249f00]))) Test6.f08:8 6 {*cmpsi_1}
     (nil))

(insn 27 26 28 4 (set (reg:QI 0 ax [76])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) Test6.f08:8 585 {*setcc_qi}
     (nil))

(insn 28 27 29 4 (parallel [
            (set (reg:SI 0 ax [orig:64 D.1648 ] [64])
                (zero_extend:SI (reg:QI 0 ax [76])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:8 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 29 28 30 4 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -24 [0xffffffffffffffe8])) [0 j+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:8 252 {*addsi_1}
     (nil))

(insn 30 29 31 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:64 D.1648 ] [64])
            (const_int 0 [0]))) Test6.f08:8 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 31 30 36 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 112)
            (pc))) Test6.f08:8 591 {*jcc_1}
     (nil)
 -> 112)
;; End of basic block 4 -> ( 5 11)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  5 (fallthru)
;; Succ edge  11

;; Start of basic block ( 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 65 66 67 68 69 70 77 78 79 80 81

;; Pred edge  3
;; Pred edge  4 (fallthru)
(code_label 36 31 37 5 41 "" [1 uses])

(note 37 36 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 5 (parallel [
            (set (reg:DI 0 ax [77])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -208 [0xffffffffffffff30])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:12 253 {*adddi_1}
     (nil))

(insn 39 38 40 5 (set (reg:DI 4 si)
        (reg:DI 0 ax [77])) Test6.f08:12 62 {*movdi_internal_rex64}
     (nil))

(insn 40 39 41 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fc95dc27be0 *.LC12>)) Test6.f08:12 62 {*movdi_internal_rex64}
     (nil))

(call_insn 41 40 42 5 (call (mem:QI (symbol_ref:DI ("rffti_") [flags 0x3]  <function_decl 0x7fc95ddfde00 rffti>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:12 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 42 41 43 5 (parallel [
            (set (reg:DI 0 ax [78])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -208 [0xffffffffffffff30])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:13 253 {*adddi_1}
     (nil))

(insn 43 42 44 5 (set (reg:DI 1 dx)
        (reg:DI 0 ax [78])) Test6.f08:13 62 {*movdi_internal_rex64}
     (nil))

(insn 44 43 45 5 (set (reg:DI 4 si)
        (symbol_ref:DI ("t6.1638") [flags 0x2]  <var_decl 0x7fc95dbfa5a0 t6>)) Test6.f08:13 62 {*movdi_internal_rex64}
     (nil))

(insn 45 44 46 5 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC12") [flags 0x2]  <var_decl 0x7fc95dc27be0 *.LC12>)) Test6.f08:13 62 {*movdi_internal_rex64}
     (nil))

(call_insn 46 45 47 5 (call (mem:QI (symbol_ref:DI ("rfftf_") [flags 0x3]  <function_decl 0x7fc95ddfda00 rfftf>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:13 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:DI 1 dx))
                (nil)))))

(insn 47 46 48 5 (parallel [
            (set (reg:DI 0 ax [79])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -28 [0xffffffffffffffe4])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:14 253 {*adddi_1}
     (nil))

(insn 48 47 49 5 (set (reg:DI 5 di)
        (reg:DI 0 ax [79])) Test6.f08:14 62 {*movdi_internal_rex64}
     (nil))

(insn 49 48 50 5 (set (reg:QI 0 ax)
        (const_int 0 [0])) Test6.f08:14 66 {*movqi_internal}
     (nil))

(call_insn 50 49 51 5 (call (mem:QI (symbol_ref:DI ("_gfortran_cpu_time_4") [flags 0x41]  <function_decl 0x7fc95dbedf00 _gfortran_cpu_time_4>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:14 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:QI 0 ax))
        (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
            (nil))))

(insn 51 50 52 5 (set (reg:SI 0 ax [80])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])) Test6.f08:15 64 {*movsi_internal}
     (nil))

(insn 52 51 53 5 (set (reg:DI 0 ax [orig:65 D.1674 ] [65])
        (sign_extend:DI (reg:SI 0 ax [80]))) Test6.f08:15 126 {*extendsidi2_rex64}
     (nil))

(insn 53 52 54 5 (parallel [
            (set (reg:DI 0 ax [orig:66 D.1675 ] [66])
                (plus:DI (reg:DI 0 ax [orig:65 D.1674 ] [65])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:15 253 {*adddi_1}
     (nil))

(insn 54 53 55 5 (set (reg:SF 21 xmm0 [orig:67 finish.10 ] [67])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -28 [0xffffffffffffffe4])) [0 finish+0 S4 A32])) Test6.f08:15 110 {*movsf_internal}
     (nil))

(insn 55 54 56 5 (set (reg:SF 22 xmm1 [orig:68 start.11 ] [68])
        (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -32 [0xffffffffffffffe0])) [0 start+0 S4 A64])) Test6.f08:15 110 {*movsf_internal}
     (nil))

(insn 56 55 57 5 (set (reg:SF 21 xmm0 [orig:69 D.1678 ] [69])
        (minus:SF (reg:SF 21 xmm0 [orig:67 finish.10 ] [67])
            (reg:SF 22 xmm1 [orig:68 start.11 ] [68]))) Test6.f08:15 740 {*fop_sf_1_sse}
     (nil))

(insn 57 56 58 5 (set (mem/s/j:SF (plus:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:66 D.1675 ] [66])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -96 [0xffffffffffffffa0])) [0 tresults S4 A32])
        (reg:SF 21 xmm0 [orig:69 D.1678 ] [69])) Test6.f08:15 110 {*movsf_internal}
     (nil))

(insn 58 57 59 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                    (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
            (const_int 15 [0xf]))) Test6.f08:6 6 {*cmpsi_1}
     (nil))

(insn 59 58 60 5 (set (reg:QI 0 ax [81])
        (eq:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) Test6.f08:6 585 {*setcc_qi}
     (nil))

(insn 60 59 61 5 (parallel [
            (set (reg:SI 0 ax [orig:70 D.1651 ] [70])
                (zero_extend:SI (reg:QI 0 ax [81])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:6 123 {*zero_extendqisi2_movzbl_and}
     (nil))

(insn 61 60 62 5 (parallel [
            (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                        (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                (plus:SI (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                            (const_int -20 [0xffffffffffffffec])) [0 i+0 S4 A32])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:6 252 {*addsi_1}
     (nil))

(insn 62 61 63 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:SI 0 ax [orig:70 D.1651 ] [70])
            (const_int 0 [0]))) Test6.f08:6 2 {*cmpsi_ccno_1}
     (nil))

(jump_insn 63 62 68 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 118)
            (pc))) Test6.f08:6 591 {*jcc_1}
     (nil)
 -> 118)
;; End of basic block 5 -> ( 6 13)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  6 (fallthru)
;; Succ edge  13

;; Start of basic block ( 2 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 82

;; Pred edge  2
;; Pred edge  5 (fallthru)
(code_label 68 63 69 6 40 "" [1 uses])

(note 69 68 70 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 71 6 (set (mem/s/f/j/c:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -696 [0xfffffffffffffd48])) [0 dt_parm.6.common.filename+0 S8 A64])
        (symbol_ref/f:DI ("*.LC13") [flags 0x2]  <var_decl 0x7fc95dc27c80 *.LC13>)) Test6.f08:17 62 {*movdi_internal_rex64}
     (nil))

(insn 71 70 72 6 (set (mem/s/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -688 [0xfffffffffffffd50])) [0 dt_parm.6.common.line+0 S4 A64])
        (const_int 17 [0x11])) Test6.f08:17 64 {*movsi_internal}
     (nil))

(insn 72 71 73 6 (set (mem/s/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -704 [0xfffffffffffffd40])) [0 dt_parm.6.common.flags+0 S4 A64])
        (const_int 128 [0x80])) Test6.f08:17 64 {*movsi_internal}
     (nil))

(insn 73 72 74 6 (set (mem/s/j/c:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -700 [0xfffffffffffffd44])) [0 dt_parm.6.common.unit+0 S4 A32])
        (const_int 6 [0x6])) Test6.f08:17 64 {*movsi_internal}
     (nil))

(insn 74 73 75 6 (parallel [
            (set (reg:DI 0 ax [82])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -704 [0xfffffffffffffd40])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:17 253 {*adddi_1}
     (nil))

(insn 75 74 76 6 (set (reg:DI 5 di)
        (reg:DI 0 ax [82])) Test6.f08:17 62 {*movdi_internal_rex64}
     (nil))

(call_insn 76 75 77 6 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write") [flags 0x41]  <function_decl 0x7fc95ddf9900 _gfortran_st_write>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:17 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))

(insn 77 76 78 6 (set (reg:SF 21 xmm0 [orig:59 val.7 ] [59])
        (mem/u/c/i:SF (symbol_ref/u:DI ("*.LC14") [flags 0x2]) [0 S4 A32])) Test6.f08:17 110 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 0.0 [0x0.0p+0])
        (nil)))

(insn 78 77 87 6 (set (reg:DI 0 ax [orig:60 S.8 ] [60])
        (const_int 1 [0x1])) Test6.f08:17 62 {*movdi_internal_rex64}
     (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60


;; Succ edge  7 (fallthru)

;; Start of basic block ( 6 8) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 60
;; lr  def 	 17 [flags]

;; Pred edge  6 (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 87 78 79 7 45 "" [1 uses])

(note 79 87 80 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 81 7 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg:DI 0 ax [orig:60 S.8 ] [60])
            (const_int 15 [0xf]))) Test6.f08:17 7 {*cmpdi_1}
     (nil))

(jump_insn 81 80 82 7 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref 90)
            (pc))) Test6.f08:17 591 {*jcc_1}
     (nil)
 -> 90)
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60


;; Succ edge  9
;; Succ edge  8 (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60
;; lr  def 	 17 [flags] 59 60 71 72

;; Pred edge  7 (fallthru)
(note 82 81 83 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 83 82 84 8 (parallel [
            (set (reg:DI 1 dx [orig:71 D.1682 ] [71])
                (plus:DI (reg:DI 0 ax [orig:60 S.8 ] [60])
                    (const_int -1 [0xffffffffffffffff])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:17 253 {*adddi_1}
     (nil))

(insn 84 83 85 8 (set (reg:SF 22 xmm1 [orig:72 D.1683 ] [72])
        (mem/s/j:SF (plus:DI (plus:DI (mult:DI (reg:DI 1 dx [orig:71 D.1682 ] [71])
                        (const_int 4 [0x4]))
                    (reg/f:DI 6 bp))
                (const_int -96 [0xffffffffffffffa0])) [0 tresults S4 A32])) Test6.f08:17 110 {*movsf_internal}
     (nil))

(insn 85 84 86 8 (set (reg:SF 21 xmm0 [orig:59 val.7 ] [59])
        (plus:SF (reg:SF 21 xmm0 [orig:59 val.7 ] [59])
            (reg:SF 22 xmm1 [orig:72 D.1683 ] [72]))) Test6.f08:17 729 {*fop_sf_comm_sse}
     (nil))

(insn 86 85 106 8 (parallel [
            (set (reg:DI 0 ax [orig:60 S.8 ] [60])
                (plus:DI (reg:DI 0 ax [orig:60 S.8 ] [60])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:17 253 {*adddi_1}
     (nil))

(jump_insn 106 86 107 8 (set (pc)
        (label_ref 87)) Test6.f08:17 606 {jump}
     (nil)
 -> 87)
;; End of basic block 8 -> ( 7)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59 60


;; Succ edge  7 [100.0%] 

(barrier 107 106 90)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  use 	 6 [bp] 7 [sp] 16 [argp] 20 [frame] 59
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 73 83 84 85 86

;; Pred edge  7
(code_label 90 107 91 9 44 "" [1 uses])

(note 91 90 92 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 92 91 93 9 (set (reg:SF 22 xmm1 [83])
        (mem/u/c/i:SF (symbol_ref/u:DI ("*.LC15") [flags 0x2]) [0 S4 A32])) Test6.f08:17 110 {*movsf_internal}
     (expr_list:REG_EQUAL (const_double:SF 1.5e+1 [0x0.fp+4])
        (nil)))

(insn 93 92 94 9 (set (reg:SF 21 xmm0 [orig:73 D.1684 ] [73])
        (div:SF (reg:SF 21 xmm0 [orig:59 val.7 ] [59])
            (reg:SF 22 xmm1 [83]))) Test6.f08:17 740 {*fop_sf_1_sse}
     (nil))

(insn 94 93 95 9 (set (mem/c/i:SF (plus:DI (reg/f:DI 6 bp)
                (const_int -212 [0xffffffffffffff2c])) [0 D.1656+0 S4 A32])
        (reg:SF 21 xmm0 [orig:73 D.1684 ] [73])) Test6.f08:17 110 {*movsf_internal}
     (nil))

(insn 95 94 96 9 (parallel [
            (set (reg:DI 2 cx [84])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -212 [0xffffffffffffff2c])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:17 253 {*adddi_1}
     (nil))

(insn 96 95 97 9 (parallel [
            (set (reg:DI 0 ax [85])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -704 [0xfffffffffffffd40])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:17 253 {*adddi_1}
     (nil))

(insn 97 96 98 9 (set (reg:SI 1 dx)
        (const_int 4 [0x4])) Test6.f08:17 64 {*movsi_internal}
     (nil))

(insn 98 97 99 9 (set (reg:DI 4 si)
        (reg:DI 2 cx [84])) Test6.f08:17 62 {*movdi_internal_rex64}
     (nil))

(insn 99 98 100 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [85])) Test6.f08:17 62 {*movdi_internal_rex64}
     (nil))

(call_insn 100 99 101 9 (call (mem:QI (symbol_ref:DI ("_gfortran_transfer_real_write") [flags 0x41]  <function_decl 0x7fc95ddeff00 _gfortran_transfer_real_write>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:17 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 dx))
                (nil)))))

(insn 101 100 102 9 (parallel [
            (set (reg:DI 0 ax [86])
                (plus:DI (reg/f:DI 6 bp)
                    (const_int -704 [0xfffffffffffffd40])))
            (clobber (reg:CC 17 flags))
        ]) Test6.f08:17 253 {*adddi_1}
     (nil))

(insn 102 101 103 9 (set (reg:DI 5 di)
        (reg:DI 0 ax [86])) Test6.f08:17 62 {*movdi_internal_rex64}
     (nil))

(call_insn 103 102 120 9 (call (mem:QI (symbol_ref:DI ("_gfortran_st_write_done") [flags 0x41]  <function_decl 0x7fc95ddfd400 _gfortran_st_write_done>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:17 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 5 di))
        (nil)))
;; End of basic block 9 -> ( 1)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 120 103 0 NOTE_INSN_DELETED)


;; Function main (main)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding pseudo/allocno costs

    r62: preferred DIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a2 (r62,l0) best DIREG, cover GENERAL_REGS
    r61: preferred SIREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a3 (r61,l0) best SIREG, cover GENERAL_REGS
    r60: preferred AREG, alternative GENERAL_REGS, cover GENERAL_REGS
    a0 (r60,l0) best AREG, cover GENERAL_REGS
    r59: preferred GENERAL_REGS, alternative NO_REGS, cover GENERAL_REGS
    a1 (r59,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r60,l0) costs: AREG:-1,-1 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a1(r59,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a2(r62,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:0,0 DIREG:-1,-1 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7
  a3(r61,l0) costs: AREG:0,0 DREG:0,0 CREG:0,0 BREG:0,0 SIREG:-1,-1 DIREG:0,0 AD_REGS:0,0 CLOBBERED_REGS:0,0 Q_REGS:0,0 NON_Q_REGS:0,0 LEGACY_REGS:0,0 GENERAL_REGS:0,0 SSE_FIRST_REG:26,26 SSE_REGS:26,26 MMX_REGS:26,26 MEM:7

   Insn 24(l0): point = 0
   Insn 21(l0): point = 2
   Insn 17(l0): point = 4
   Insn 16(l0): point = 6
   Insn 15(l0): point = 8
   Insn 14(l0): point = 10
   Insn 13(l0): point = 12
   Insn 12(l0): point = 14
   Insn 11(l0): point = 16
   Insn 10(l0): point = 18
   Insn 9(l0): point = 20
   Insn 8(l0): point = 22
   Insn 7(l0): point = 24
   Insn 3(l0): point = 26
   Insn 2(l0): point = 28
 a0(r60): [3..4]
 a1(r59): [5..6]
 a2(r62): [19..22]
 a3(r61): [21..24]
Compressing live ranges: from 31 to 6 - 19%
Ranges after the compression:
 a0(r60): [0..1]
 a1(r59): [2..3]
 a2(r62): [4..5]
 a3(r61): [4..5]
  regions=1, blocks=3, points=6
    allocnos=4 (big 0), copies=0, conflicts=0, ranges=4
Disposition:
    1:r59  l0     0    0:r60  l0     0    3:r61  l0     1    2:r62  l0     0
+++Costs: overall -3, reg -3, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 4, 7, dead_or_set: 5
insn=3, live_throughout: 7, dead_or_set: 4
insn=7, live_throughout: 7, dead_or_set: 61
insn=8, live_throughout: 7, 61, dead_or_set: 62
insn=9, live_throughout: 7, 62, dead_or_set: 4, 61
insn=10, live_throughout: 4, 7, dead_or_set: 5, 62
insn=11, live_throughout: 7, dead_or_set: 4, 5
insn=12, live_throughout: 7, dead_or_set: 4
insn=13, live_throughout: 4, 7, dead_or_set: 5
insn=14, live_throughout: 7, dead_or_set: 4, 5
insn=15, live_throughout: 7, dead_or_set: 
insn=16, live_throughout: 7, dead_or_set: 59
insn=17, live_throughout: 7, dead_or_set: 59, 60
insn=21, live_throughout: 7, dead_or_set: 0, 60
insn=24, live_throughout: 0, 7, dead_or_set: 
changing reg in insn 16
changing reg in insn 17
changing reg in insn 17
changing reg in insn 21
changing reg in insn 7
changing reg in insn 9
changing reg in insn 8
changing reg in insn 10
deleting insn with uid = 17.
deleting insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 15.


main

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15]
;;  hardware regs used 	
;;  regular block artificial uses 	 6 [bp] 7 [sp]
;;  eh block artificial uses 	 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 6 [bp] 7 [sp] 20 [frame]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={6d,3u} r1={5d,1u} r2={4d} r4={6d,3u} r5={6d,3u} r6={1d,6u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r20={1d,1u} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} 
;;    total ref usage 179{157d,22u,0e} in 13{10 regular + 3 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(6){ }u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  use 	 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 59 60 61 62

;; Pred edge  ENTRY (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 (set (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 argc+0 S4 A32])
        (reg:SI 5 di [ argc ])) Test6.f08:18 64 {*movsi_internal}
     (nil))

(insn 3 2 4 2 (set (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 argv+0 S8 A64])
        (reg:DI 4 si [ argv ])) Test6.f08:18 62 {*movdi_internal_rex64}
     (nil))

(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 (set (reg:DI 1 dx [61])
        (mem/f/c/i:DI (plus:DI (reg/f:DI 6 bp)
                (const_int -16 [0xfffffffffffffff0])) [0 argv+0 S8 A64])) Test6.f08:18 62 {*movdi_internal_rex64}
     (nil))

(insn 8 7 9 2 (set (reg:SI 0 ax [62])
        (mem/c/i:SI (plus:DI (reg/f:DI 6 bp)
                (const_int -4 [0xfffffffffffffffc])) [0 argc+0 S4 A32])) Test6.f08:18 64 {*movsi_internal}
     (nil))

(insn 9 8 10 2 (set (reg:DI 4 si)
        (reg:DI 1 dx [61])) Test6.f08:18 62 {*movdi_internal_rex64}
     (nil))

(insn 10 9 11 2 (set (reg:SI 5 di)
        (reg:SI 0 ax [62])) Test6.f08:18 64 {*movsi_internal}
     (nil))

(call_insn 11 10 12 2 (call (mem:QI (symbol_ref:DI ("_gfortran_set_args") [flags 0x41]  <function_decl 0x7fc95ddde700 _gfortran_set_args>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:18 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(insn 12 11 13 2 (set (reg:DI 4 si)
        (symbol_ref:DI ("options.9.1661") [flags 0x2]  <var_decl 0x7fc95dbfab40 options.9>)) Test6.f08:18 62 {*movdi_internal_rex64}
     (nil))

(insn 13 12 14 2 (set (reg:SI 5 di)
        (const_int 8 [0x8])) Test6.f08:18 64 {*movsi_internal}
     (nil))

(call_insn 14 13 15 2 (call (mem:QI (symbol_ref:DI ("_gfortran_set_options") [flags 0x41]  <function_decl 0x7fc95ddde900 _gfortran_set_options>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:18 618 {*call_0}
     (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 5 di))
        (expr_list:REG_DEP_TRUE (use (reg:DI 4 si))
            (nil))))

(call_insn 15 14 16 2 (call (mem:QI (symbol_ref:DI ("MAIN__") [flags 0x3]  <function_decl 0x7fc95dbeda00 test6>) [0 S1 A8])
        (const_int 0 [0])) Test6.f08:18 618 {*call_0}
     (nil)
    (nil))

(insn 16 15 24 2 (set (reg:SI 0 ax [orig:59 D.1662 ] [59])
        (const_int 0 [0])) Test6.f08:18 64 {*movsi_internal}
     (nil))

(insn 24 16 27 2 (use (reg/i:SI 0 ax)) Test6.f08:18 -1
     (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 27 24 0 NOTE_INSN_DELETED)

